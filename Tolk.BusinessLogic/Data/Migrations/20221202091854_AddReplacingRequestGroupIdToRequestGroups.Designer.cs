// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tolk.BusinessLogic.Data;

#nullable disable

namespace Tolk.BusinessLogic.Data.Migrations
{
    [DbContext(typeof(TolkDbContext))]
    [Migration("20221202091854_AddReplacingRequestGroupIdToRequestGroups")]
    partial class AddReplacingRequestGroupIdToRequestGroups
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.AspNetUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("BrokerId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CustomerOrganisationId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("InterpreterId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApiUser")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastLoginAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NameFamily")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NameFirst")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumberCellphone")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("BrokerId");

                    b.HasIndex("CustomerOrganisationId");

                    b.HasIndex("InterpreterId")
                        .IsUnique()
                        .HasFilter("[InterpreterId] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.AspNetUserClaimHistoryEntry", b =>
                {
                    b.Property<int>("AspNetUserClaimHistoryEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AspNetUserClaimHistoryEntryId"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserAuditLogEntryId")
                        .HasColumnType("int");

                    b.HasKey("AspNetUserClaimHistoryEntryId");

                    b.HasIndex("UserAuditLogEntryId");

                    b.ToTable("AspNetUserClaimHistoryEntries");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.AspNetUserHistoryEntry", b =>
                {
                    b.Property<int>("AspNetUserHistoryEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AspNetUserHistoryEntryId"), 1L, 1);

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApiUser")
                        .HasColumnType("bit");

                    b.Property<string>("NameFamily")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NameFirst")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumberCellphone")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<int>("UserAuditLogEntryId")
                        .HasColumnType("int");

                    b.HasKey("AspNetUserHistoryEntryId");

                    b.HasIndex("UserAuditLogEntryId")
                        .IsUnique();

                    b.ToTable("AspNetUserHistoryEntries");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.AspNetUserRoleHistoryEntry", b =>
                {
                    b.Property<int>("AspNetUserRoleHistoryEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AspNetUserRoleHistoryEntryId"), 1L, 1);

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserAuditLogEntryId")
                        .HasColumnType("int");

                    b.HasKey("AspNetUserRoleHistoryEntryId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserAuditLogEntryId");

                    b.ToTable("AspNetUserRoleHistoryEntries");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.Attachment", b =>
                {
                    b.Property<int>("AttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttachmentId"), 1L, 1);

                    b.Property<byte[]>("Blob")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("ImpersonatingCreator")
                        .HasColumnType("int");

                    b.HasKey("AttachmentId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ImpersonatingCreator");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.Broker", b =>
                {
                    b.Property<int>("BrokerId")
                        .HasColumnType("int");

                    b.Property<string>("ContactEmailAddress")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ContactPhoneNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("EmailDomain")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("OrganizationNumber")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("OrganizationPrefix")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("BrokerId");

                    b.ToTable("Brokers");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.BrokerFeeByServiceTypePriceListRow", b =>
                {
                    b.Property<int>("BrokerFeeByServiceTypePriceListRowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrokerFeeByServiceTypePriceListRowId"), 1L, 1);

                    b.Property<int>("CompetenceLevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("FirstValidDate")
                        .HasColumnType("date");

                    b.Property<int>("InterpreterLocation")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastValidDate")
                        .HasColumnType("date");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("RegionGroupId")
                        .HasColumnType("int");

                    b.HasKey("BrokerFeeByServiceTypePriceListRowId");

                    b.HasIndex("RegionGroupId");

                    b.ToTable("BrokerFeeByServiceTypePriceListRows");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.BrokerStartListRow", b =>
                {
                    b.Property<DateTimeOffset?>("AcceptedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("AnswerProcessedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("AnsweredAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("BrokerId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CancelledAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CompetenceLevel")
                        .HasColumnType("int");

                    b.Property<int?>("ComplaintStatus")
                        .HasColumnType("int");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("EndAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("EntityDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ExtraCompetencelevel")
                        .HasColumnType("int");

                    b.Property<string>("LanguageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastAcceptAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastRequestCreatedUpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LatestAnswerTimeForCustomer")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("NoOfChildren")
                        .HasColumnType("int");

                    b.Property<int?>("NoOfExtraInterpreter")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("OrderChangedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("OrderGroupNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReplacingOrderId")
                        .HasColumnType("int");

                    b.Property<int>("RequestAnswerRuleType")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("RequestExpiresAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("RequestGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("RequestGroupStatus")
                        .HasColumnType("int");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int");

                    b.Property<int?>("RequestStatus")
                        .HasColumnType("int");

                    b.Property<int?>("RequisitionStatus")
                        .HasColumnType("int");

                    b.Property<int>("RowType")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("StartAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ViewedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ViewedByUserId")
                        .HasColumnType("int");

                    b.ToView("BrokerStartListRows");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.Complaint", b =>
                {
                    b.Property<int>("ComplaintId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComplaintId"), 1L, 1);

                    b.Property<DateTimeOffset?>("AnswerDisputedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("AnswerDisputedBy")
                        .HasColumnType("int");

                    b.Property<string>("AnswerDisputedMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("AnswerMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTimeOffset?>("AnsweredAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("AnsweredBy")
                        .HasColumnType("int");

                    b.Property<string>("ComplaintMessage")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("ComplaintType")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("ImpersonatingAnswerDisputedBy")
                        .HasColumnType("int");

                    b.Property<int?>("ImpersonatingAnsweredBy")
                        .HasColumnType("int");

                    b.Property<int?>("ImpersonatingCreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("ImpersonatingTerminatedBy")
                        .HasColumnType("int");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("TerminatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("TerminatedBy")
                        .HasColumnType("int");

                    b.Property<string>("TerminationMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("ComplaintId");

                    b.HasIndex("AnswerDisputedBy");

                    b.HasIndex("AnsweredBy");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ImpersonatingAnswerDisputedBy");

                    b.HasIndex("ImpersonatingAnsweredBy");

                    b.HasIndex("ImpersonatingCreatedBy");

                    b.HasIndex("ImpersonatingTerminatedBy");

                    b.HasIndex("RequestId");

                    b.HasIndex("TerminatedBy");

                    b.ToTable("Complaints");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.CustomerChangeLogEntry", b =>
                {
                    b.Property<int>("CustomerChangeLogEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerChangeLogEntryId"), 1L, 1);

                    b.Property<int>("CustomerChangeLogType")
                        .HasColumnType("int");

                    b.Property<int>("CustomerOrganisationId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LoggedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.HasKey("CustomerChangeLogEntryId");

                    b.HasIndex("CustomerOrganisationId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("CustomerChangeLogEntries");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.CustomerOrganisation", b =>
                {
                    b.Property<int>("CustomerOrganisationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerOrganisationId"), 1L, 1);

                    b.Property<string>("EmailDomain")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OrganisationNumber")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("OrganisationPrefix")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int?>("ParentCustomerOrganisationId")
                        .HasColumnType("int");

                    b.Property<string>("PeppolId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PriceListType")
                        .HasColumnType("int");

                    b.Property<int>("TravelCostAgreementType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UseOrderAgreementsFromDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CustomerOrganisationId");

                    b.HasIndex("ParentCustomerOrganisationId");

                    b.ToTable("CustomerOrganisations");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.CustomerOrganisationHistoryEntry", b =>
                {
                    b.Property<int>("CustomerOrganisationHistoryEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerOrganisationHistoryEntryId"), 1L, 1);

                    b.Property<int>("CustomerChangeLogEntryId")
                        .HasColumnType("int");

                    b.Property<string>("EmailDomain")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OrganisationNumber")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("OrganisationPrefix")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("PeppolId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PriceListType")
                        .HasColumnType("int");

                    b.Property<int>("TravelCostAgreementType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UseOrderAgreementsFromDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CustomerOrganisationHistoryEntryId");

                    b.HasIndex("CustomerChangeLogEntryId")
                        .IsUnique();

                    b.ToTable("CustomerOrganisationHistoryEntry");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.CustomerSetting", b =>
                {
                    b.Property<int>("CustomerOrganisationId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerSettingType")
                        .HasColumnType("int");

                    b.Property<bool>("Value")
                        .HasColumnType("bit");

                    b.HasKey("CustomerOrganisationId", "CustomerSettingType");

                    b.ToTable("CustomerSettings");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.CustomerSettingHistoryEntry", b =>
                {
                    b.Property<int>("CustomerSettingHistoryEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerSettingHistoryEntryId"), 1L, 1);

                    b.Property<int>("CustomerChangeLogEntryId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerSettingType")
                        .HasColumnType("int");

                    b.Property<bool>("Value")
                        .HasColumnType("bit");

                    b.HasKey("CustomerSettingHistoryEntryId");

                    b.HasIndex("CustomerChangeLogEntryId");

                    b.ToTable("CustomerSettingHistoryEntries");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.CustomerStartListRow", b =>
                {
                    b.Property<DateTimeOffset?>("AnsweredAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("CancelledAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CompetenceLevel")
                        .HasColumnType("int");

                    b.Property<int?>("ComplaintStatus")
                        .HasColumnType("int");

                    b.Property<int?>("ContactPersonId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("CustomerOrganisationId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerUnitId")
                        .HasColumnType("int");

                    b.Property<bool>("CustomerUnitIsActive")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("EndAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("EntityDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ExtraCompetencelevel")
                        .HasColumnType("int");

                    b.Property<string>("LanguageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastRequestCreatedUpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LatestAnswerTimeForCustomer")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("NoOfChildren")
                        .HasColumnType("int");

                    b.Property<int?>("NoOfExtraInterpreter")
                        .HasColumnType("int");

                    b.Property<int?>("OrderGroupId")
                        .HasColumnType("int");

                    b.Property<string>("OrderGroupNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderGroupStatus")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("OrderNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<int?>("ReplacingOrderId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("RequestExpiresAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("RequisitionStatus")
                        .HasColumnType("int");

                    b.Property<int>("RowType")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("StartAt")
                        .HasColumnType("datetimeoffset");

                    b.ToView("CustomerStartListRows");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.CustomerUnit", b =>
                {
                    b.Property<int>("CustomerUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerUnitId"), 1L, 1);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("CustomerOrganisationId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("ImpersonatingCreator")
                        .HasColumnType("int");

                    b.Property<int?>("ImpersonatingInactivatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("InactivatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("InactivatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("CustomerUnitId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomerOrganisationId");

                    b.HasIndex("ImpersonatingCreator");

                    b.HasIndex("ImpersonatingInactivatedBy");

                    b.HasIndex("InactivatedBy");

                    b.ToTable("CustomerUnits");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.CustomerUnitUser", b =>
                {
                    b.Property<int>("CustomerUnitId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsLocalAdmin")
                        .HasColumnType("bit");

                    b.HasKey("CustomerUnitId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("CustomerUnitUsers");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.CustomerUnitUserHistoryEntry", b =>
                {
                    b.Property<int>("CustomerUnitUserHistoryEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerUnitUserHistoryEntryId"), 1L, 1);

                    b.Property<int>("CustomerUnitId")
                        .HasColumnType("int");

                    b.Property<bool>("IsLocalAdmin")
                        .HasColumnType("bit");

                    b.Property<int>("UserAuditLogEntryId")
                        .HasColumnType("int");

                    b.HasKey("CustomerUnitUserHistoryEntryId");

                    b.HasIndex("UserAuditLogEntryId");

                    b.ToTable("CustomerUnitUserHistoryEntries");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.FailedPeppolMessage", b =>
                {
                    b.Property<int>("FailedPeppolMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FailedPeppolMessageId"), 1L, 1);

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("FailedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("OutboundPeppolMessageId")
                        .HasColumnType("int");

                    b.HasKey("FailedPeppolMessageId");

                    b.HasIndex("OutboundPeppolMessageId");

                    b.ToTable("FailedPeppolMessages");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.FailedWebHookCall", b =>
                {
                    b.Property<int>("FailedWebHookCallId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FailedWebHookCallId"), 1L, 1);

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("FailedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("OutboundWebHookCallId")
                        .HasColumnType("int");

                    b.HasKey("FailedWebHookCallId");

                    b.HasIndex("OutboundWebHookCallId");

                    b.ToTable("FailedWebHookCalls");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.Faq", b =>
                {
                    b.Property<int>("FaqId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FaqId"), 1L, 1);

                    b.Property<string>("Answer")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsDisplayed")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastUpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("FaqId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("Faq");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.FaqDisplayUserRole", b =>
                {
                    b.Property<int>("FaqId")
                        .HasColumnType("int");

                    b.Property<int>("DisplayUserRole")
                        .HasColumnType("int");

                    b.HasKey("FaqId", "DisplayUserRole");

                    b.ToTable("FaqDisplayUserRole");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.FrameworkAgreement", b =>
                {
                    b.Property<int>("FrameworkAgreementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FrameworkAgreementId"), 1L, 1);

                    b.Property<string>("AgreementNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("BrokerFeeCalculationType")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("FirstValidDate")
                        .HasColumnType("date");

                    b.Property<int>("FrameworkAgreementResponseRuleset")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastValidDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("OriginalLastValidDate")
                        .HasColumnType("date");

                    b.Property<int>("PossibleAgreementExtensionsInMonths")
                        .HasColumnType("int");

                    b.HasKey("FrameworkAgreementId");

                    b.ToTable("FrameworkAgreements");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.Holiday", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int>("DateType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Date", "DateType");

                    b.ToTable("Holidays");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.Interpreter", b =>
                {
                    b.Property<int>("InterpreterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InterpreterId"), 1L, 1);

                    b.Property<bool>("IsProtected")
                        .HasColumnType("bit");

                    b.HasKey("InterpreterId");

                    b.ToTable("Interpreters");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.InterpreterBroker", b =>
                {
                    b.Property<int>("InterpreterBrokerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InterpreterBrokerId"), 1L, 1);

                    b.Property<int>("BrokerId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("ImpersonatingInactivatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("InactivatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("InactivatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("InterpreterId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("OfficialInterpreterId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("InterpreterBrokerId");

                    b.HasIndex("BrokerId");

                    b.HasIndex("ImpersonatingInactivatedBy");

                    b.HasIndex("InactivatedBy");

                    b.HasIndex("InterpreterId");

                    b.ToTable("InterpreterBrokers");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LanguageId"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<bool>("HasAuthorized")
                        .HasColumnType("bit");

                    b.Property<bool>("HasEducated")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHealthcare")
                        .HasColumnType("bit");

                    b.Property<bool>("HasLegal")
                        .HasColumnType("bit");

                    b.Property<string>("ISO_639_Code")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TellusName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("LanguageId");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.MealBreak", b =>
                {
                    b.Property<int>("MealBreakId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MealBreakId"), 1L, 1);

                    b.Property<DateTimeOffset>("EndAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("RequisitionId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("StartAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("MealBreakId");

                    b.HasIndex("RequisitionId");

                    b.ToTable("MealBreaks");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"), 1L, 1);

                    b.Property<int?>("AllowExceedingTravelCost")
                        .HasColumnType("int");

                    b.Property<int>("AssignmentType")
                        .HasColumnType("int");

                    b.Property<int?>("ContactPersonId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool?>("CreatorIsInterpreterUser")
                        .HasColumnType("bit");

                    b.Property<int>("CustomerOrganisationId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerReferenceNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("CustomerUnitId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTimeOffset>("EndAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ImpersonatingCreator")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceReference")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("IsExtraInterpreterForOrderId")
                        .HasColumnType("int");

                    b.Property<bool>("LanguageHasAuthorizedInterpreter")
                        .HasColumnType("bit");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<bool?>("MealBreakIncluded")
                        .HasColumnType("bit");

                    b.Property<int?>("OrderGroupId")
                        .HasColumnType("int");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasComputedColumnSql("CAST(YEAR([CreatedAt]) AS NVARCHAR(MAX)) + '-' + CAST(([OrderId]+(100000)) AS NVARCHAR(MAX))");

                    b.Property<string>("OtherLanguage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<int?>("ReplacingOrderId")
                        .HasColumnType("int");

                    b.Property<bool>("SpecificCompetenceLevelRequired")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("StartAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UnitName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("OrderId");

                    b.HasIndex("ContactPersonId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomerOrganisationId");

                    b.HasIndex("CustomerUnitId");

                    b.HasIndex("ImpersonatingCreator");

                    b.HasIndex("IsExtraInterpreterForOrderId")
                        .IsUnique()
                        .HasFilter("[IsExtraInterpreterForOrderId] IS NOT NULL");

                    b.HasIndex("LanguageId");

                    b.HasIndex("OrderGroupId");

                    b.HasIndex("RegionId");

                    b.HasIndex("ReplacingOrderId")
                        .IsUnique()
                        .HasFilter("[ReplacingOrderId] IS NOT NULL");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderAgreementPayload", b =>
                {
                    b.Property<int>("OrderAgreementPayloadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderAgreementPayloadId"), 1L, 1);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("IdentificationNumber")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<int?>("ImpersonatingCreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<int?>("OutboundPeppolMessageId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Payload")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("ReplacedById")
                        .HasColumnType("int");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<int?>("RequisitionId")
                        .HasColumnType("int");

                    b.HasKey("OrderAgreementPayloadId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ImpersonatingCreatedBy");

                    b.HasIndex("OutboundPeppolMessageId")
                        .IsUnique()
                        .HasFilter("[OutboundPeppolMessageId] IS NOT NULL");

                    b.HasIndex("ReplacedById")
                        .IsUnique()
                        .HasFilter("[ReplacedById] IS NOT NULL");

                    b.HasIndex("RequisitionId")
                        .IsUnique()
                        .HasFilter("[RequisitionId] IS NOT NULL");

                    b.HasIndex("RequestId", "Index")
                        .IsUnique();

                    b.ToTable("OrderAgreementPayloads");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderAttachment", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("AttachmentId")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "AttachmentId");

                    b.HasIndex("AttachmentId");

                    b.ToTable("OrderAttachments");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderAttachmentHistoryEntry", b =>
                {
                    b.Property<int>("OrderAttachmentHistoryEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderAttachmentHistoryEntryId"), 1L, 1);

                    b.Property<int>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<int>("OrderChangeLogEntryId")
                        .HasColumnType("int");

                    b.Property<bool>("OrderGroupAttachmentRemoved")
                        .HasColumnType("bit");

                    b.HasKey("OrderAttachmentHistoryEntryId");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("OrderChangeLogEntryId");

                    b.ToTable("OrderAttachmentHistoryEntries");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderChangeConfirmation", b =>
                {
                    b.Property<int>("OrderChangeConfirmationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderChangeConfirmationId"), 1L, 1);

                    b.Property<DateTimeOffset>("ConfirmedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ConfirmedBy")
                        .HasColumnType("int");

                    b.Property<int?>("ImpersonatingConfirmedBy")
                        .HasColumnType("int");

                    b.Property<int>("OrderChangeLogEntryId")
                        .HasColumnType("int");

                    b.HasKey("OrderChangeConfirmationId");

                    b.HasIndex("ConfirmedBy");

                    b.HasIndex("ImpersonatingConfirmedBy");

                    b.HasIndex("OrderChangeLogEntryId")
                        .IsUnique();

                    b.ToTable("OrderChangeConfirmations");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderChangeLogEntry", b =>
                {
                    b.Property<int>("OrderChangeLogEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderChangeLogEntryId"), 1L, 1);

                    b.Property<int?>("BrokerId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LoggedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("OrderChangeLogType")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedByImpersonatorId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.HasKey("OrderChangeLogEntryId");

                    b.HasIndex("BrokerId");

                    b.HasIndex("OrderId");

                    b.HasIndex("UpdatedByImpersonatorId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("OrderChangeLogEntries");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderCompetenceRequirement", b =>
                {
                    b.Property<int>("OrderCompetenceRequirementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderCompetenceRequirementId"), 1L, 1);

                    b.Property<int>("CompetenceLevel")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("Rank")
                        .HasColumnType("int");

                    b.HasKey("OrderCompetenceRequirementId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderCompetenceRequirements");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderContactPersonHistory", b =>
                {
                    b.Property<int>("OrderContactPersonHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderContactPersonHistoryId"), 1L, 1);

                    b.Property<int>("OrderChangeLogEntryId")
                        .HasColumnType("int");

                    b.Property<int?>("PreviousContactPersonId")
                        .HasColumnType("int");

                    b.HasKey("OrderContactPersonHistoryId");

                    b.HasIndex("OrderChangeLogEntryId")
                        .IsUnique();

                    b.HasIndex("PreviousContactPersonId");

                    b.ToTable("OrderContactPersonHistory");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderGroup", b =>
                {
                    b.Property<int>("OrderGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderGroupId"), 1L, 1);

                    b.Property<int?>("AllowExceedingTravelCost")
                        .HasColumnType("int");

                    b.Property<int>("AssignmentType")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool?>("CreatorIsInterpreterUser")
                        .HasColumnType("bit");

                    b.Property<int>("CustomerOrganisationId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerUnitId")
                        .HasColumnType("int");

                    b.Property<int?>("ImpersonatingCreator")
                        .HasColumnType("int");

                    b.Property<bool>("LanguageHasAuthorizedInterpreter")
                        .HasColumnType("bit");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("OrderGroupNumber")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComputedColumnSql("'G-' + CAST(YEAR([CreatedAt]) AS NVARCHAR(100)) + '-' + CAST(([OrderGroupId]+(100000)) AS NVARCHAR(100))");

                    b.Property<string>("OtherLanguage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<bool>("RequireSameInterpreter")
                        .HasColumnType("bit");

                    b.Property<bool>("SpecificCompetenceLevelRequired")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("OrderGroupId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomerOrganisationId");

                    b.HasIndex("CustomerUnitId");

                    b.HasIndex("ImpersonatingCreator");

                    b.HasIndex("LanguageId");

                    b.HasIndex("RegionId");

                    b.ToTable("OrderGroups");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderGroupAttachment", b =>
                {
                    b.Property<int>("OrderGroupId")
                        .HasColumnType("int");

                    b.Property<int>("AttachmentId")
                        .HasColumnType("int");

                    b.HasKey("OrderGroupId", "AttachmentId");

                    b.HasIndex("AttachmentId");

                    b.ToTable("OrderGroupAttachments");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderGroupCompetenceRequirement", b =>
                {
                    b.Property<int>("OrderGroupId")
                        .HasColumnType("int");

                    b.Property<int>("CompetenceLevel")
                        .HasColumnType("int");

                    b.Property<int?>("Rank")
                        .HasColumnType("int");

                    b.HasKey("OrderGroupId", "CompetenceLevel");

                    b.ToTable("OrderGroupCompetenceRequirements");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderGroupInterpreterLocation", b =>
                {
                    b.Property<int>("OrderGroupId")
                        .HasColumnType("int");

                    b.Property<int>("InterpreterLocation")
                        .HasColumnType("int");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.HasKey("OrderGroupId", "InterpreterLocation");

                    b.ToTable("OrderGroupInterpreterLocations");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderGroupRequirement", b =>
                {
                    b.Property<int>("OrderGroupRequirementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderGroupRequirementId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<int>("OrderGroupId")
                        .HasColumnType("int");

                    b.Property<int>("RequirementType")
                        .HasColumnType("int");

                    b.HasKey("OrderGroupRequirementId");

                    b.HasIndex("OrderGroupId");

                    b.ToTable("OrderGroupRequirements");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderGroupStatusConfirmation", b =>
                {
                    b.Property<int>("OrderGroupStatusConfirmationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderGroupStatusConfirmationId"), 1L, 1);

                    b.Property<DateTimeOffset>("ConfirmedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ConfirmedBy")
                        .HasColumnType("int");

                    b.Property<int?>("ImpersonatingConfirmedBy")
                        .HasColumnType("int");

                    b.Property<int>("OrderGroupId")
                        .HasColumnType("int");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.HasKey("OrderGroupStatusConfirmationId");

                    b.HasIndex("ConfirmedBy");

                    b.HasIndex("ImpersonatingConfirmedBy");

                    b.HasIndex("OrderGroupId");

                    b.ToTable("OrderGroupStatusConfirmations");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderHistoryEntry", b =>
                {
                    b.Property<int>("OrderHistoryEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderHistoryEntryId"), 1L, 1);

                    b.Property<int>("ChangeOrderType")
                        .HasColumnType("int");

                    b.Property<int>("OrderChangeLogEntryId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderHistoryEntryId");

                    b.HasIndex("OrderChangeLogEntryId");

                    b.ToTable("OrderHistoryEntries");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderInterpreterLocation", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("InterpreterLocation")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OffSiteContactInformation")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("OrderId", "InterpreterLocation");

                    b.ToTable("OrderInterpreterLocation");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderListRow", b =>
                {
                    b.Property<int?>("BrokerId")
                        .HasColumnType("int");

                    b.Property<string>("BrokerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ContactPersonId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerOrganisationId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerReferenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CustomerUnitId")
                        .HasColumnType("int");

                    b.Property<bool>("CustomerUnitIsActive")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("EndAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityParentNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("LanguageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<string>("RegionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RowType")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("StartAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.ToView("OrderListRows");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderPriceRow", b =>
                {
                    b.Property<int>("OrderPriceRowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderPriceRowId"), 1L, 1);

                    b.Property<DateTimeOffset>("EndAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("PriceCalculationChargeId")
                        .HasColumnType("int");

                    b.Property<int?>("PriceListRowId")
                        .HasColumnType("int");

                    b.Property<int>("PriceRowType")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("StartAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("OrderPriceRowId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PriceCalculationChargeId");

                    b.HasIndex("PriceListRowId");

                    b.ToTable("OrderPriceRows");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderRequirement", b =>
                {
                    b.Property<int>("OrderRequirementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderRequirementId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<int?>("OrderGroupRequirementId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("RequirementType")
                        .HasColumnType("int");

                    b.HasKey("OrderRequirementId");

                    b.HasIndex("OrderGroupRequirementId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderRequirements");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderRequirementRequestAnswer", b =>
                {
                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<int>("OrderRequirementId")
                        .HasColumnType("int");

                    b.Property<string>("Answer")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("CanSatisfyRequirement")
                        .HasColumnType("bit");

                    b.HasKey("RequestId", "OrderRequirementId");

                    b.HasIndex("OrderRequirementId");

                    b.ToTable("OrderRequirementRequestAnswer");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderStatusConfirmation", b =>
                {
                    b.Property<int>("OrderStatusConfirmationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderStatusConfirmationId"), 1L, 1);

                    b.Property<DateTimeOffset>("ConfirmedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ConfirmedBy")
                        .HasColumnType("int");

                    b.Property<int?>("ImpersonatingConfirmedBy")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.HasKey("OrderStatusConfirmationId");

                    b.HasIndex("ConfirmedBy");

                    b.HasIndex("ImpersonatingConfirmedBy");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderStatusConfirmation");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OutboundEmail", b =>
                {
                    b.Property<int>("OutboundEmailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OutboundEmailId"), 1L, 1);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeliveredAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("HtmlBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsHandling")
                        .HasColumnType("bit");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int");

                    b.Property<string>("PlainBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recipient")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReplacingEmailId")
                        .HasColumnType("int");

                    b.Property<int?>("ResentByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OutboundEmailId");

                    b.HasIndex("ReplacingEmailId")
                        .IsUnique()
                        .HasFilter("[ReplacingEmailId] IS NOT NULL");

                    b.HasIndex("ResentByUserId");

                    b.ToTable("OutboundEmails");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OutboundPeppolMessage", b =>
                {
                    b.Property<int>("OutboundPeppolMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OutboundPeppolMessageId"), 1L, 1);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeliveredAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("FailedTries")
                        .HasColumnType("int");

                    b.Property<bool?>("HasNotifiedFailure")
                        .HasColumnType("bit");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsHandling")
                        .HasColumnType("bit");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int");

                    b.Property<byte[]>("Payload")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Recipient")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReplacingPeppolMessageId")
                        .HasColumnType("int");

                    b.Property<int?>("ResentByUserId")
                        .HasColumnType("int");

                    b.Property<int?>("ResentImpersonatorUserId")
                        .HasColumnType("int");

                    b.HasKey("OutboundPeppolMessageId");

                    b.HasIndex("ReplacingPeppolMessageId")
                        .IsUnique()
                        .HasFilter("[ReplacingPeppolMessageId] IS NOT NULL");

                    b.HasIndex("ResentByUserId");

                    b.HasIndex("ResentImpersonatorUserId");

                    b.ToTable("OutboundPeppolMessages");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OutboundWebHookCall", b =>
                {
                    b.Property<int>("OutboundWebHookCallId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OutboundWebHookCallId"), 1L, 1);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeliveredAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("FailedTries")
                        .HasColumnType("int");

                    b.Property<bool?>("HasNotifiedFailure")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHandling")
                        .HasColumnType("bit");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecipientUserId")
                        .HasColumnType("int");

                    b.Property<int?>("ResentHookId")
                        .HasColumnType("int");

                    b.Property<int?>("ResentImpersonatorUserId")
                        .HasColumnType("int");

                    b.Property<int?>("ResentUserId")
                        .HasColumnType("int");

                    b.HasKey("OutboundWebHookCallId");

                    b.HasIndex("RecipientUserId");

                    b.HasIndex("ResentHookId")
                        .IsUnique()
                        .HasFilter("[ResentHookId] IS NOT NULL");

                    b.HasIndex("ResentImpersonatorUserId");

                    b.HasIndex("ResentUserId");

                    b.ToTable("OutboundWebHookCalls");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.PriceCalculationCharge", b =>
                {
                    b.Property<int>("PriceCalculationChargeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PriceCalculationChargeId"), 1L, 1);

                    b.Property<decimal>("ChargePercentage")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("ChargeTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PriceCalculationChargeId");

                    b.ToTable("PriceCalculationCharges");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.PriceListRow", b =>
                {
                    b.Property<int?>("PriceListRowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("PriceListRowId"), 1L, 1);

                    b.Property<int>("CompetenceLevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxMinutes")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("PriceListRowType")
                        .HasColumnType("int");

                    b.Property<int>("PriceListType")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PriceListRowId");

                    b.ToTable("PriceListRows");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.Quarantine", b =>
                {
                    b.Property<int>("QuarantineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuarantineId"), 1L, 1);

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("CustomerOrganisationId")
                        .HasColumnType("int");

                    b.Property<string>("Motivation")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("RankingId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("QuarantineId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomerOrganisationId");

                    b.HasIndex("RankingId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Quarantines");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.QuarantineHistoryEntry", b =>
                {
                    b.Property<int>("QuarantineHistoryEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuarantineHistoryEntryId"), 1L, 1);

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("LoggedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Motivation")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("QuarantineId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("QuarantineHistoryEntryId");

                    b.HasIndex("QuarantineId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("QuarantineHistoryEntries");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.Ranking", b =>
                {
                    b.Property<int>("RankingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RankingId"), 1L, 1);

                    b.Property<decimal?>("BrokerFee")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("BrokerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FirstValidDate")
                        .HasColumnType("date");

                    b.Property<int>("FrameworkAgreementId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastValidDate")
                        .HasColumnType("date");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("RankingId");

                    b.HasIndex("BrokerId");

                    b.HasIndex("FrameworkAgreementId");

                    b.HasIndex("RegionId");

                    b.ToTable("Rankings");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("RegionGroupId")
                        .HasColumnType("int");

                    b.HasKey("RegionId");

                    b.HasIndex("RegionGroupId");

                    b.ToTable("Regions");

                    b.HasData(
                        new
                        {
                            RegionId = 1,
                            Name = "Stockholm",
                            RegionGroupId = 1
                        },
                        new
                        {
                            RegionId = 2,
                            Name = "Uppsala",
                            RegionGroupId = 1
                        },
                        new
                        {
                            RegionId = 3,
                            Name = "Södermanland",
                            RegionGroupId = 1
                        },
                        new
                        {
                            RegionId = 4,
                            Name = "Östergötland",
                            RegionGroupId = 3
                        },
                        new
                        {
                            RegionId = 5,
                            Name = "Jönköping",
                            RegionGroupId = 3
                        },
                        new
                        {
                            RegionId = 6,
                            Name = "Kronoberg",
                            RegionGroupId = 3
                        },
                        new
                        {
                            RegionId = 7,
                            Name = "Kalmar",
                            RegionGroupId = 3
                        },
                        new
                        {
                            RegionId = 80,
                            Name = "Gotland",
                            RegionGroupId = 3
                        },
                        new
                        {
                            RegionId = 8,
                            Name = "Blekinge ",
                            RegionGroupId = 3
                        },
                        new
                        {
                            RegionId = 25,
                            Name = "Skåne",
                            RegionGroupId = 1
                        },
                        new
                        {
                            RegionId = 11,
                            Name = "Halland",
                            RegionGroupId = 3
                        },
                        new
                        {
                            RegionId = 13,
                            Name = "Västra Götaland",
                            RegionGroupId = 1
                        },
                        new
                        {
                            RegionId = 15,
                            Name = "Värmland",
                            RegionGroupId = 3
                        },
                        new
                        {
                            RegionId = 16,
                            Name = "Örebro",
                            RegionGroupId = 3
                        },
                        new
                        {
                            RegionId = 17,
                            Name = "Västmanland",
                            RegionGroupId = 3
                        },
                        new
                        {
                            RegionId = 18,
                            Name = "Dalarna",
                            RegionGroupId = 2
                        },
                        new
                        {
                            RegionId = 19,
                            Name = "Gävleborg",
                            RegionGroupId = 3
                        },
                        new
                        {
                            RegionId = 20,
                            Name = "Västernorrland",
                            RegionGroupId = 2
                        },
                        new
                        {
                            RegionId = 21,
                            Name = "Jämtland",
                            RegionGroupId = 2
                        },
                        new
                        {
                            RegionId = 22,
                            Name = "Västerbotten",
                            RegionGroupId = 2
                        },
                        new
                        {
                            RegionId = 23,
                            Name = "Norrbotten",
                            RegionGroupId = 3
                        });
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.RegionGroup", b =>
                {
                    b.Property<int>("RegionGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegionGroupId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("RegionGroupId");

                    b.ToTable("RegionGroups");

                    b.HasData(
                        new
                        {
                            RegionGroupId = 1,
                            Name = "Storstadsregioner"
                        },
                        new
                        {
                            RegionGroupId = 2,
                            Name = "Norra mellansverige"
                        },
                        new
                        {
                            RegionGroupId = 3,
                            Name = "Övriga"
                        });
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.Request", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"), 1L, 1);

                    b.Property<DateTimeOffset?>("AcceptedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("AcceptedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("AnswerDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("AnswerProcessedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("AnswerProcessedBy")
                        .HasColumnType("int");

                    b.Property<int?>("AnsweredBy")
                        .HasColumnType("int");

                    b.Property<string>("BrokerMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("BrokerReferenceNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CancelMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTimeOffset?>("CancelledAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CancelledBy")
                        .HasColumnType("int");

                    b.Property<int?>("CompetenceLevel")
                        .HasColumnType("int");

                    b.Property<bool?>("CompletedNotificationIsHandled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DenyMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ExpectedTravelCostInfo")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTimeOffset?>("ExpiresAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ImpersonatingAcceptedBy")
                        .HasColumnType("int");

                    b.Property<int?>("ImpersonatingAnswerProcessedBy")
                        .HasColumnType("int");

                    b.Property<int?>("ImpersonatingAnsweredBy")
                        .HasColumnType("int");

                    b.Property<int?>("ImpersonatingCanceller")
                        .HasColumnType("int");

                    b.Property<int?>("ImpersonatingReceivedBy")
                        .HasColumnType("int");

                    b.Property<int?>("InterpreterBrokerId")
                        .HasColumnType("int");

                    b.Property<int?>("InterpreterCompetenceVerificationResultOnAssign")
                        .HasColumnType("int");

                    b.Property<int?>("InterpreterCompetenceVerificationResultOnStart")
                        .HasColumnType("int");

                    b.Property<int?>("InterpreterLocation")
                        .HasColumnType("int");

                    b.Property<bool>("IsTerminalRequest")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastAcceptAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LatestAnswerTimeForCustomer")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("QuarantineId")
                        .HasColumnType("int");

                    b.Property<int>("RankingId")
                        .HasColumnType("int");

                    b.Property<int?>("ReceivedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("RecievedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ReplacingRequestId")
                        .HasColumnType("int");

                    b.Property<int>("RequestAnswerRuleType")
                        .HasColumnType("int");

                    b.Property<int?>("RequestGroupId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("RequestId");

                    b.HasIndex("AcceptedBy");

                    b.HasIndex("AnswerProcessedBy");

                    b.HasIndex("AnsweredBy");

                    b.HasIndex("CancelledBy");

                    b.HasIndex("ImpersonatingAcceptedBy");

                    b.HasIndex("ImpersonatingAnswerProcessedBy");

                    b.HasIndex("ImpersonatingAnsweredBy");

                    b.HasIndex("ImpersonatingCanceller");

                    b.HasIndex("ImpersonatingReceivedBy");

                    b.HasIndex("InterpreterBrokerId");

                    b.HasIndex("OrderId");

                    b.HasIndex("QuarantineId");

                    b.HasIndex("RankingId");

                    b.HasIndex("ReceivedBy");

                    b.HasIndex("ReplacingRequestId")
                        .IsUnique()
                        .HasFilter("[ReplacingRequestId] IS NOT NULL");

                    b.HasIndex("RequestGroupId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.RequestAttachment", b =>
                {
                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<int>("AttachmentId")
                        .HasColumnType("int");

                    b.HasKey("RequestId", "AttachmentId");

                    b.HasIndex("AttachmentId");

                    b.ToTable("RequestAttachments");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.RequestGroup", b =>
                {
                    b.Property<int>("RequestGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestGroupId"), 1L, 1);

                    b.Property<DateTimeOffset?>("AcceptedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("AcceptedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("AnswerDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("AnswerProcessedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("AnswerProcessedBy")
                        .HasColumnType("int");

                    b.Property<int?>("AnsweredBy")
                        .HasColumnType("int");

                    b.Property<string>("BrokerMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("BrokerReferenceNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CancelMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTimeOffset?>("CancelledAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CancelledBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DenyMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTimeOffset?>("ExpiresAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ImpersonatingAcceptedBy")
                        .HasColumnType("int");

                    b.Property<int?>("ImpersonatingAnswerProcessedBy")
                        .HasColumnType("int");

                    b.Property<int?>("ImpersonatingAnsweredBy")
                        .HasColumnType("int");

                    b.Property<int?>("ImpersonatingCanceller")
                        .HasColumnType("int");

                    b.Property<int?>("ImpersonatingReceivedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsTerminalRequest")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastAcceptAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LatestAnswerTimeForCustomer")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("OrderGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("QuarantineId")
                        .HasColumnType("int");

                    b.Property<int>("RankingId")
                        .HasColumnType("int");

                    b.Property<int?>("ReceivedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("RecievedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ReplacingRequestGroupId")
                        .HasColumnType("int");

                    b.Property<int>("RequestAnswerRuleType")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("RequestGroupId");

                    b.HasIndex("AcceptedBy");

                    b.HasIndex("AnswerProcessedBy");

                    b.HasIndex("AnsweredBy");

                    b.HasIndex("CancelledBy");

                    b.HasIndex("ImpersonatingAcceptedBy");

                    b.HasIndex("ImpersonatingAnswerProcessedBy");

                    b.HasIndex("ImpersonatingAnsweredBy");

                    b.HasIndex("ImpersonatingCanceller");

                    b.HasIndex("ImpersonatingReceivedBy");

                    b.HasIndex("OrderGroupId");

                    b.HasIndex("QuarantineId");

                    b.HasIndex("RankingId");

                    b.HasIndex("ReceivedBy");

                    b.HasIndex("ReplacingRequestGroupId")
                        .IsUnique()
                        .HasFilter("[ReplacingRequestGroupId] IS NOT NULL");

                    b.ToTable("RequestGroups");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.RequestGroupAttachment", b =>
                {
                    b.Property<int>("RequestGroupId")
                        .HasColumnType("int");

                    b.Property<int>("AttachmentId")
                        .HasColumnType("int");

                    b.HasKey("RequestGroupId", "AttachmentId");

                    b.HasIndex("AttachmentId");

                    b.ToTable("RequestGroupAttachments");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.RequestGroupStatusConfirmation", b =>
                {
                    b.Property<int>("RequestGroupStatusConfirmationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestGroupStatusConfirmationId"), 1L, 1);

                    b.Property<DateTimeOffset>("ConfirmedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ConfirmedBy")
                        .HasColumnType("int");

                    b.Property<int?>("ImpersonatingConfirmedBy")
                        .HasColumnType("int");

                    b.Property<int>("RequestGroupId")
                        .HasColumnType("int");

                    b.Property<int>("RequestStatus")
                        .HasColumnType("int");

                    b.HasKey("RequestGroupStatusConfirmationId");

                    b.HasIndex("ConfirmedBy");

                    b.HasIndex("ImpersonatingConfirmedBy");

                    b.HasIndex("RequestGroupId");

                    b.ToTable("RequestGroupStatusConfirmations");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.RequestGroupUpdateLatestAnswerTime", b =>
                {
                    b.Property<int>("RequestGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("ImpersonatorUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("RequestGroupId");

                    b.HasIndex("ImpersonatorUpdatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("RequestGroupUpdateLatestAnswerTime");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.RequestGroupView", b =>
                {
                    b.Property<int>("RequestGroupViewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestGroupViewId"), 1L, 1);

                    b.Property<int?>("ImpersonatingViewedBy")
                        .HasColumnType("int");

                    b.Property<int>("RequestGroupId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("ViewedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ViewedBy")
                        .HasColumnType("int");

                    b.HasKey("RequestGroupViewId");

                    b.HasIndex("ImpersonatingViewedBy");

                    b.HasIndex("RequestGroupId");

                    b.HasIndex("ViewedBy");

                    b.ToTable("RequestGroupViews");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.RequestListRow", b =>
                {
                    b.Property<int?>("AnsweredBy")
                        .HasColumnType("int");

                    b.Property<int?>("BrokerId")
                        .HasColumnType("int");

                    b.Property<string>("BrokerReferenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerOrganisationId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerReferenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("EndAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityParentNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ExpiresAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("LanguageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<string>("RegionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RowType")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("StartAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.ToView("RequestListRows");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.RequestPriceRow", b =>
                {
                    b.Property<int>("RequestPriceRowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestPriceRowId"), 1L, 1);

                    b.Property<DateTimeOffset>("EndAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("PriceCalculationChargeId")
                        .HasColumnType("int");

                    b.Property<int?>("PriceListRowId")
                        .HasColumnType("int");

                    b.Property<int>("PriceRowType")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("StartAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("RequestPriceRowId");

                    b.HasIndex("PriceCalculationChargeId");

                    b.HasIndex("PriceListRowId");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestPriceRows");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.RequestStatusConfirmation", b =>
                {
                    b.Property<int>("RequestStatusConfirmationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestStatusConfirmationId"), 1L, 1);

                    b.Property<DateTimeOffset>("ConfirmedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ConfirmedBy")
                        .HasColumnType("int");

                    b.Property<int?>("ImpersonatingConfirmedBy")
                        .HasColumnType("int");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<int>("RequestStatus")
                        .HasColumnType("int");

                    b.HasKey("RequestStatusConfirmationId");

                    b.HasIndex("ConfirmedBy");

                    b.HasIndex("ImpersonatingConfirmedBy");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestStatusConfirmation");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.RequestUpdateLatestAnswerTime", b =>
                {
                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<int?>("ImpersonatorUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("RequestId");

                    b.HasIndex("ImpersonatorUpdatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("RequestUpdateLatestAnswerTime");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.RequestView", b =>
                {
                    b.Property<int>("RequestViewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestViewId"), 1L, 1);

                    b.Property<int?>("ImpersonatingViewedBy")
                        .HasColumnType("int");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("ViewedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ViewedBy")
                        .HasColumnType("int");

                    b.HasKey("RequestViewId");

                    b.HasIndex("ImpersonatingViewedBy");

                    b.HasIndex("RequestId");

                    b.HasIndex("ViewedBy");

                    b.ToTable("RequestViews");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.Requisition", b =>
                {
                    b.Property<int>("RequisitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequisitionId"), 1L, 1);

                    b.Property<int?>("CarCompensation")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CustomerComment")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("ImpersonatingCreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("ImpersonatingProcessedBy")
                        .HasColumnType("int");

                    b.Property<int?>("InterpretersTaxCard")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("PerDiem")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTimeOffset?>("ProcessedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ProcessedBy")
                        .HasColumnType("int");

                    b.Property<int?>("ReplacedByRequisitionId")
                        .HasColumnType("int");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<bool>("RequestOrReplacingOrderPeriodUsed")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("SessionEndedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("SessionStartedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TimeWasteIWHTime")
                        .HasColumnType("int");

                    b.Property<int?>("TimeWasteNormalTime")
                        .HasColumnType("int");

                    b.HasKey("RequisitionId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ImpersonatingCreatedBy");

                    b.HasIndex("ImpersonatingProcessedBy");

                    b.HasIndex("ProcessedBy");

                    b.HasIndex("ReplacedByRequisitionId");

                    b.HasIndex("RequestId");

                    b.ToTable("Requisitions");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.RequisitionAttachment", b =>
                {
                    b.Property<int>("RequisitionId")
                        .HasColumnType("int");

                    b.Property<int>("AttachmentId")
                        .HasColumnType("int");

                    b.HasKey("RequisitionId", "AttachmentId");

                    b.HasIndex("AttachmentId");

                    b.ToTable("RequisitionAttachments");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.RequisitionPriceRow", b =>
                {
                    b.Property<int>("RequisitionPriceRowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequisitionPriceRowId"), 1L, 1);

                    b.Property<DateTimeOffset>("EndAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("PriceCalculationChargeId")
                        .HasColumnType("int");

                    b.Property<int?>("PriceListRowId")
                        .HasColumnType("int");

                    b.Property<int>("PriceRowType")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("RequisitionId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("StartAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("RequisitionPriceRowId");

                    b.HasIndex("PriceCalculationChargeId");

                    b.HasIndex("PriceListRowId");

                    b.HasIndex("RequisitionId");

                    b.ToTable("RequisitionPriceRows");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.RequisitionStatusConfirmation", b =>
                {
                    b.Property<int>("RequisitionStatusConfirmationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequisitionStatusConfirmationId"), 1L, 1);

                    b.Property<DateTimeOffset>("ConfirmedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ConfirmedBy")
                        .HasColumnType("int");

                    b.Property<int?>("ImpersonatingConfirmedBy")
                        .HasColumnType("int");

                    b.Property<int>("RequisitionId")
                        .HasColumnType("int");

                    b.Property<int>("RequisitionStatus")
                        .HasColumnType("int");

                    b.HasKey("RequisitionStatusConfirmationId");

                    b.HasIndex("ConfirmedBy");

                    b.HasIndex("ImpersonatingConfirmedBy");

                    b.HasIndex("RequisitionId");

                    b.ToTable("RequisitionStatusConfirmations");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.SystemMessage", b =>
                {
                    b.Property<int>("SystemMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SystemMessageId"), 1L, 1);

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("ImpersonatingCreator")
                        .HasColumnType("int");

                    b.Property<int?>("ImpersonatingLastUpdated")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("LastUpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<string>("SystemMessageHeader")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SystemMessageText")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("SystemMessageType")
                        .HasColumnType("int");

                    b.Property<int>("SystemMessageUserTypeGroup")
                        .HasColumnType("int");

                    b.HasKey("SystemMessageId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ImpersonatingCreator");

                    b.HasIndex("ImpersonatingLastUpdated");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("SystemMessages");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.TemporaryAttachmentGroup", b =>
                {
                    b.Property<Guid>("TemporaryAttachmentGroupKey")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("TemporaryAttachmentGroupKey", "AttachmentId");

                    b.HasIndex("AttachmentId")
                        .IsUnique();

                    b.ToTable("TemporaryAttachmentGroups");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.TemporaryChangedEmailEntry", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ExpirationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ImpersonatingUpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("ImpersonatingUpdatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("TemporaryChangedEmailStoreEntries");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.UserAuditLogEntry", b =>
                {
                    b.Property<int>("UserAuditLogEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserAuditLogEntryId"), 1L, 1);

                    b.Property<DateTimeOffset>("LoggedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("UpdatedByImpersonatorId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("UserChangeType")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserAuditLogEntryId");

                    b.HasIndex("UpdatedByImpersonatorId");

                    b.HasIndex("UpdatedByUserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAuditLogEntries");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.UserDefaultSetting", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("DefaultSettingType")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "DefaultSettingType");

                    b.ToTable("UserDefaultSettings");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.UserDefaultSettingHistoryEntry", b =>
                {
                    b.Property<int>("UserDefaultSettingHistoryEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserDefaultSettingHistoryEntryId"), 1L, 1);

                    b.Property<int>("DefaultSettingType")
                        .HasColumnType("int");

                    b.Property<int>("UserAuditLogEntryId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserDefaultSettingHistoryEntryId");

                    b.HasIndex("UserAuditLogEntryId");

                    b.ToTable("UserDefaultSettingHistoryEntries");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.UserDefaultSettingOrderRequirement", b =>
                {
                    b.Property<int>("UserDefaultSettingOrderRequirementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserDefaultSettingOrderRequirementId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<int>("RequirementType")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserDefaultSettingOrderRequirementId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDefaultSettingOrderRequirements");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.UserDefaultSettingsOrderRequirementHistoryEntry", b =>
                {
                    b.Property<int>("UserDefaultSettingsOrderRequirementHistoryEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserDefaultSettingsOrderRequirementHistoryEntryId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<int>("RequirementType")
                        .HasColumnType("int");

                    b.Property<int>("UserAuditLogEntryId")
                        .HasColumnType("int");

                    b.HasKey("UserDefaultSettingsOrderRequirementHistoryEntryId");

                    b.HasIndex("UserAuditLogEntryId");

                    b.ToTable("UserDefaultSettingsOrderRequirementHistoryEntries");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.UserLoginLogEntry", b =>
                {
                    b.Property<int>("UserLoginLogEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserLoginLogEntryId"), 1L, 1);

                    b.Property<DateTimeOffset>("LoggedInAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserLoginLogEntryId");

                    b.HasIndex("UserId");

                    b.ToTable("UserLoginLogEntries");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.UserNotificationSetting", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("NotificationChannel")
                        .HasColumnType("int");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int");

                    b.Property<string>("ConnectionInformation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "NotificationChannel", "NotificationType");

                    b.ToTable("UserNotificationSettings");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.UserNotificationSettingHistoryEntry", b =>
                {
                    b.Property<int>("UserNotificationSettingHistoryEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserNotificationSettingHistoryEntryId"), 1L, 1);

                    b.Property<string>("ConnectionInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NotificationChannel")
                        .HasColumnType("int");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int");

                    b.Property<int>("UserAuditLogEntryId")
                        .HasColumnType("int");

                    b.HasKey("UserNotificationSettingHistoryEntryId");

                    b.HasIndex("UserAuditLogEntryId");

                    b.ToTable("UserNotificationSettingHistoryEntries");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", null)
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.AspNetUser", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.Broker", "Broker")
                        .WithMany("Users")
                        .HasForeignKey("BrokerId");

                    b.HasOne("Tolk.BusinessLogic.Entities.CustomerOrganisation", "CustomerOrganisation")
                        .WithMany("Users")
                        .HasForeignKey("CustomerOrganisationId");

                    b.HasOne("Tolk.BusinessLogic.Entities.Interpreter", "Interpreter")
                        .WithOne("User")
                        .HasForeignKey("Tolk.BusinessLogic.Entities.AspNetUser", "InterpreterId");

                    b.Navigation("Broker");

                    b.Navigation("CustomerOrganisation");

                    b.Navigation("Interpreter");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.AspNetUserClaimHistoryEntry", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.UserAuditLogEntry", "UserAuditLogEntry")
                        .WithMany("ClaimsHistory")
                        .HasForeignKey("UserAuditLogEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAuditLogEntry");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.AspNetUserHistoryEntry", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.UserAuditLogEntry", "UserAuditLogEntry")
                        .WithOne("UserHistory")
                        .HasForeignKey("Tolk.BusinessLogic.Entities.AspNetUserHistoryEntry", "UserAuditLogEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAuditLogEntry");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.AspNetUserRoleHistoryEntry", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tolk.BusinessLogic.Entities.UserAuditLogEntry", "UserAuditLogEntry")
                        .WithMany("RolesHistory")
                        .HasForeignKey("UserAuditLogEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UserAuditLogEntry");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.Attachment", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "CreatedByImpersonator")
                        .WithMany()
                        .HasForeignKey("ImpersonatingCreator")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByImpersonator");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.BrokerFeeByServiceTypePriceListRow", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.RegionGroup", "RegionGroup")
                        .WithMany("BrokerFeeByServiceTypePriceListRows")
                        .HasForeignKey("RegionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegionGroup");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.Complaint", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "AnswerDisputingUser")
                        .WithMany()
                        .HasForeignKey("AnswerDisputedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "AnsweringUser")
                        .WithMany()
                        .HasForeignKey("AnsweredBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "AnswerDisputedByImpersonator")
                        .WithMany()
                        .HasForeignKey("ImpersonatingAnswerDisputedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "AnsweredByImpersonator")
                        .WithMany()
                        .HasForeignKey("ImpersonatingAnsweredBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "CreatedByImpersonator")
                        .WithMany()
                        .HasForeignKey("ImpersonatingCreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "TerminatedByImpersonator")
                        .WithMany()
                        .HasForeignKey("ImpersonatingTerminatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.Request", "Request")
                        .WithMany("Complaints")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "TerminatingUser")
                        .WithMany()
                        .HasForeignKey("TerminatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AnswerDisputedByImpersonator");

                    b.Navigation("AnswerDisputingUser");

                    b.Navigation("AnsweredByImpersonator");

                    b.Navigation("AnsweringUser");

                    b.Navigation("CreatedByImpersonator");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Request");

                    b.Navigation("TerminatedByImpersonator");

                    b.Navigation("TerminatingUser");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.CustomerChangeLogEntry", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.CustomerOrganisation", "CustomerOrganisation")
                        .WithMany("CustomerChangeLogEntries")
                        .HasForeignKey("CustomerOrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerOrganisation");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.CustomerOrganisation", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.CustomerOrganisation", "ParentCustomerOrganisation")
                        .WithMany("SubCustomerOrganisations")
                        .HasForeignKey("ParentCustomerOrganisationId");

                    b.Navigation("ParentCustomerOrganisation");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.CustomerOrganisationHistoryEntry", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.CustomerChangeLogEntry", "CustomerChangeLogEntry")
                        .WithOne("CustomerOrganisationHistoryEntry")
                        .HasForeignKey("Tolk.BusinessLogic.Entities.CustomerOrganisationHistoryEntry", "CustomerChangeLogEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerChangeLogEntry");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.CustomerSetting", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.CustomerOrganisation", "CustomerOrganisation")
                        .WithMany("CustomerSettings")
                        .HasForeignKey("CustomerOrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerOrganisation");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.CustomerSettingHistoryEntry", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.CustomerChangeLogEntry", "CustomerChangeLogEntry")
                        .WithMany("CustomerSettingHistories")
                        .HasForeignKey("CustomerChangeLogEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerChangeLogEntry");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.CustomerUnit", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tolk.BusinessLogic.Entities.CustomerOrganisation", "CustomerOrganisation")
                        .WithMany()
                        .HasForeignKey("CustomerOrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "CreatedByImpersonator")
                        .WithMany()
                        .HasForeignKey("ImpersonatingCreator")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "InactivatedByImpersonator")
                        .WithMany()
                        .HasForeignKey("ImpersonatingInactivatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "InactivatedByUser")
                        .WithMany()
                        .HasForeignKey("InactivatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByImpersonator");

                    b.Navigation("CreatedByUser");

                    b.Navigation("CustomerOrganisation");

                    b.Navigation("InactivatedByImpersonator");

                    b.Navigation("InactivatedByUser");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.CustomerUnitUser", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.CustomerUnit", "CustomerUnit")
                        .WithMany("CustomerUnitUsers")
                        .HasForeignKey("CustomerUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "User")
                        .WithMany("CustomerUnits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerUnit");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.CustomerUnitUserHistoryEntry", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.UserAuditLogEntry", "UserAuditLogEntry")
                        .WithMany("CustomerUnitUsersHistory")
                        .HasForeignKey("UserAuditLogEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAuditLogEntry");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.FailedPeppolMessage", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.OutboundPeppolMessage", "OutboundPeppolMessage")
                        .WithMany("FailedCalls")
                        .HasForeignKey("OutboundPeppolMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OutboundPeppolMessage");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.FailedWebHookCall", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.OutboundWebHookCall", "OutboundWebHookCall")
                        .WithMany("FailedCalls")
                        .HasForeignKey("OutboundWebHookCallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OutboundWebHookCall");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.Faq", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastUpdatedByUser");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.FaqDisplayUserRole", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.Faq", "Faq")
                        .WithMany("FaqDisplayUserRoles")
                        .HasForeignKey("FaqId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faq");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.InterpreterBroker", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.Broker", "Broker")
                        .WithMany()
                        .HasForeignKey("BrokerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "InactivatedByImpersonator")
                        .WithMany()
                        .HasForeignKey("ImpersonatingInactivatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "InactivatedByUser")
                        .WithMany()
                        .HasForeignKey("InactivatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.Interpreter", "Interpreter")
                        .WithMany("Brokers")
                        .HasForeignKey("InterpreterId");

                    b.Navigation("Broker");

                    b.Navigation("InactivatedByImpersonator");

                    b.Navigation("InactivatedByUser");

                    b.Navigation("Interpreter");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.MealBreak", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.Requisition", "Requisition")
                        .WithMany("MealBreaks")
                        .HasForeignKey("RequisitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Requisition");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.Order", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "ContactPersonUser")
                        .WithMany()
                        .HasForeignKey("ContactPersonId");

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tolk.BusinessLogic.Entities.CustomerOrganisation", "CustomerOrganisation")
                        .WithMany()
                        .HasForeignKey("CustomerOrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tolk.BusinessLogic.Entities.CustomerUnit", "CustomerUnit")
                        .WithMany()
                        .HasForeignKey("CustomerUnitId");

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "CreatedByImpersonator")
                        .WithMany()
                        .HasForeignKey("ImpersonatingCreator")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.Order", "IsExtraInterpreterForOrder")
                        .WithOne("ExtraInterpreterOrder")
                        .HasForeignKey("Tolk.BusinessLogic.Entities.Order", "IsExtraInterpreterForOrderId");

                    b.HasOne("Tolk.BusinessLogic.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("Tolk.BusinessLogic.Entities.OrderGroup", "Group")
                        .WithMany("Orders")
                        .HasForeignKey("OrderGroupId");

                    b.HasOne("Tolk.BusinessLogic.Entities.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tolk.BusinessLogic.Entities.Order", "ReplacingOrder")
                        .WithOne("ReplacedByOrder")
                        .HasForeignKey("Tolk.BusinessLogic.Entities.Order", "ReplacingOrderId");

                    b.Navigation("ContactPersonUser");

                    b.Navigation("CreatedByImpersonator");

                    b.Navigation("CreatedByUser");

                    b.Navigation("CustomerOrganisation");

                    b.Navigation("CustomerUnit");

                    b.Navigation("Group");

                    b.Navigation("IsExtraInterpreterForOrder");

                    b.Navigation("Language");

                    b.Navigation("Region");

                    b.Navigation("ReplacingOrder");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderAgreementPayload", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "CreatedByImpersonator")
                        .WithMany()
                        .HasForeignKey("ImpersonatingCreatedBy");

                    b.HasOne("Tolk.BusinessLogic.Entities.OutboundPeppolMessage", "OutboundPeppolMessage")
                        .WithOne("OrderAgreementPayload")
                        .HasForeignKey("Tolk.BusinessLogic.Entities.OrderAgreementPayload", "OutboundPeppolMessageId");

                    b.HasOne("Tolk.BusinessLogic.Entities.OrderAgreementPayload", "ReplacedByPayload")
                        .WithOne("ReplacingPayload")
                        .HasForeignKey("Tolk.BusinessLogic.Entities.OrderAgreementPayload", "ReplacedById");

                    b.HasOne("Tolk.BusinessLogic.Entities.Request", "Request")
                        .WithMany("OrderAgreementPayloads")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tolk.BusinessLogic.Entities.Requisition", "BasedOnRequisition")
                        .WithOne("OrderAgreementPayload")
                        .HasForeignKey("Tolk.BusinessLogic.Entities.OrderAgreementPayload", "RequisitionId");

                    b.Navigation("BasedOnRequisition");

                    b.Navigation("CreatedByImpersonator");

                    b.Navigation("CreatedByUser");

                    b.Navigation("OutboundPeppolMessage");

                    b.Navigation("ReplacedByPayload");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderAttachment", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.Attachment", "Attachment")
                        .WithMany("Orders")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tolk.BusinessLogic.Entities.Order", "Order")
                        .WithMany("Attachments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderAttachmentHistoryEntry", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.Attachment", "Attachment")
                        .WithMany("OrderAttachmentHistoryEntries")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tolk.BusinessLogic.Entities.OrderChangeLogEntry", "OrderChangeLogEntry")
                        .WithMany("OrderAttachmentHistoryEntries")
                        .HasForeignKey("OrderChangeLogEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("OrderChangeLogEntry");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderChangeConfirmation", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "ConfirmedByUser")
                        .WithMany()
                        .HasForeignKey("ConfirmedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "ImpersonatingConfirmedByUser")
                        .WithMany()
                        .HasForeignKey("ImpersonatingConfirmedBy");

                    b.HasOne("Tolk.BusinessLogic.Entities.OrderChangeLogEntry", "OrderChangeLogEntry")
                        .WithOne("OrderChangeConfirmation")
                        .HasForeignKey("Tolk.BusinessLogic.Entities.OrderChangeConfirmation", "OrderChangeLogEntryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ConfirmedByUser");

                    b.Navigation("ImpersonatingConfirmedByUser");

                    b.Navigation("OrderChangeLogEntry");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderChangeLogEntry", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.Broker", "Broker")
                        .WithMany()
                        .HasForeignKey("BrokerId");

                    b.HasOne("Tolk.BusinessLogic.Entities.Order", "Order")
                        .WithMany("OrderChangeLogEntries")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "UpdatedByImpersonatorUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByImpersonatorId");

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Broker");

                    b.Navigation("Order");

                    b.Navigation("UpdatedByImpersonatorUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderCompetenceRequirement", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.Order", "Order")
                        .WithMany("CompetenceRequirements")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderContactPersonHistory", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.OrderChangeLogEntry", "OrderChangeLogEntry")
                        .WithOne("OrderContactPersonHistory")
                        .HasForeignKey("Tolk.BusinessLogic.Entities.OrderContactPersonHistory", "OrderChangeLogEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "PreviousContactPersonUser")
                        .WithMany()
                        .HasForeignKey("PreviousContactPersonId");

                    b.Navigation("OrderChangeLogEntry");

                    b.Navigation("PreviousContactPersonUser");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderGroup", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tolk.BusinessLogic.Entities.CustomerOrganisation", "CustomerOrganisation")
                        .WithMany()
                        .HasForeignKey("CustomerOrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tolk.BusinessLogic.Entities.CustomerUnit", "CustomerUnit")
                        .WithMany()
                        .HasForeignKey("CustomerUnitId");

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "CreatedByImpersonator")
                        .WithMany()
                        .HasForeignKey("ImpersonatingCreator");

                    b.HasOne("Tolk.BusinessLogic.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("Tolk.BusinessLogic.Entities.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByImpersonator");

                    b.Navigation("CreatedByUser");

                    b.Navigation("CustomerOrganisation");

                    b.Navigation("CustomerUnit");

                    b.Navigation("Language");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderGroupAttachment", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.Attachment", "Attachment")
                        .WithMany("OrderGroups")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tolk.BusinessLogic.Entities.OrderGroup", "OrderGroup")
                        .WithMany("Attachments")
                        .HasForeignKey("OrderGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("OrderGroup");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderGroupCompetenceRequirement", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.OrderGroup", "OrderGroup")
                        .WithMany("CompetenceRequirements")
                        .HasForeignKey("OrderGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderGroup");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderGroupInterpreterLocation", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.OrderGroup", "OrderGroup")
                        .WithMany("InterpreterLocations")
                        .HasForeignKey("OrderGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderGroup");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderGroupRequirement", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.OrderGroup", "OrderGroup")
                        .WithMany("Requirements")
                        .HasForeignKey("OrderGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderGroup");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderGroupStatusConfirmation", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "ConfirmedByUser")
                        .WithMany()
                        .HasForeignKey("ConfirmedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "ImpersonatingConfirmedByUser")
                        .WithMany()
                        .HasForeignKey("ImpersonatingConfirmedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.OrderGroup", "OrderGroup")
                        .WithMany("StatusConfirmations")
                        .HasForeignKey("OrderGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConfirmedByUser");

                    b.Navigation("ImpersonatingConfirmedByUser");

                    b.Navigation("OrderGroup");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderHistoryEntry", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.OrderChangeLogEntry", "OrderChangeLogEntry")
                        .WithMany("OrderHistories")
                        .HasForeignKey("OrderChangeLogEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderChangeLogEntry");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderInterpreterLocation", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.Order", "Order")
                        .WithMany("InterpreterLocations")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderPriceRow", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.Order", "Order")
                        .WithMany("PriceRows")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tolk.BusinessLogic.Entities.PriceCalculationCharge", "PriceCalculationCharge")
                        .WithMany()
                        .HasForeignKey("PriceCalculationChargeId");

                    b.HasOne("Tolk.BusinessLogic.Entities.PriceListRow", "PriceListRow")
                        .WithMany()
                        .HasForeignKey("PriceListRowId");

                    b.Navigation("Order");

                    b.Navigation("PriceCalculationCharge");

                    b.Navigation("PriceListRow");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderRequirement", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.OrderGroupRequirement", "OrderGroupRequirement")
                        .WithMany()
                        .HasForeignKey("OrderGroupRequirementId");

                    b.HasOne("Tolk.BusinessLogic.Entities.Order", "Order")
                        .WithMany("Requirements")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("OrderGroupRequirement");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderRequirementRequestAnswer", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.OrderRequirement", "OrderRequirement")
                        .WithMany("RequirementAnswers")
                        .HasForeignKey("OrderRequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tolk.BusinessLogic.Entities.Request", "Request")
                        .WithMany("RequirementAnswers")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrderRequirement");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderStatusConfirmation", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "ConfirmedByUser")
                        .WithMany()
                        .HasForeignKey("ConfirmedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "ImpersonatingConfirmedByUser")
                        .WithMany()
                        .HasForeignKey("ImpersonatingConfirmedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.Order", "Order")
                        .WithMany("OrderStatusConfirmations")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConfirmedByUser");

                    b.Navigation("ImpersonatingConfirmedByUser");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OutboundEmail", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.OutboundEmail", "ReplacingEmail")
                        .WithOne("ReplacedByEmail")
                        .HasForeignKey("Tolk.BusinessLogic.Entities.OutboundEmail", "ReplacingEmailId");

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "ResentByUser")
                        .WithMany()
                        .HasForeignKey("ResentByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ReplacingEmail");

                    b.Navigation("ResentByUser");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OutboundPeppolMessage", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.OutboundPeppolMessage", "ReplacingMessage")
                        .WithOne("ReplacedByMessage")
                        .HasForeignKey("Tolk.BusinessLogic.Entities.OutboundPeppolMessage", "ReplacingPeppolMessageId");

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "ResentByUser")
                        .WithMany()
                        .HasForeignKey("ResentByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "ResentImpersonatorUser")
                        .WithMany()
                        .HasForeignKey("ResentImpersonatorUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ReplacingMessage");

                    b.Navigation("ResentByUser");

                    b.Navigation("ResentImpersonatorUser");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OutboundWebHookCall", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "RecipientUser")
                        .WithMany()
                        .HasForeignKey("RecipientUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tolk.BusinessLogic.Entities.OutboundWebHookCall", "ResentHook")
                        .WithOne("ReplacingWebHook")
                        .HasForeignKey("Tolk.BusinessLogic.Entities.OutboundWebHookCall", "ResentHookId");

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "ResentImpersonatorUser")
                        .WithMany()
                        .HasForeignKey("ResentImpersonatorUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "ResentUser")
                        .WithMany()
                        .HasForeignKey("ResentUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("RecipientUser");

                    b.Navigation("ResentHook");

                    b.Navigation("ResentImpersonatorUser");

                    b.Navigation("ResentUser");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.Quarantine", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tolk.BusinessLogic.Entities.CustomerOrganisation", "CustomerOrganisation")
                        .WithMany()
                        .HasForeignKey("CustomerOrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tolk.BusinessLogic.Entities.Ranking", "Ranking")
                        .WithMany("Quarantines")
                        .HasForeignKey("RankingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("CreatedByUser");

                    b.Navigation("CustomerOrganisation");

                    b.Navigation("Ranking");

                    b.Navigation("UpdatedUser");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.QuarantineHistoryEntry", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.Quarantine", "Quarantine")
                        .WithMany()
                        .HasForeignKey("QuarantineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("Quarantine");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.Ranking", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.Broker", "Broker")
                        .WithMany("Rankings")
                        .HasForeignKey("BrokerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tolk.BusinessLogic.Entities.FrameworkAgreement", "FrameworkAgreement")
                        .WithMany("Rankings")
                        .HasForeignKey("FrameworkAgreementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tolk.BusinessLogic.Entities.Region", "Region")
                        .WithMany("Rankings")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Broker");

                    b.Navigation("FrameworkAgreement");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.Region", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.RegionGroup", "RegionGroup")
                        .WithMany("Regions")
                        .HasForeignKey("RegionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegionGroup");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.Request", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "AcceptingUser")
                        .WithMany()
                        .HasForeignKey("AcceptedBy");

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "ProcessingUser")
                        .WithMany()
                        .HasForeignKey("AnswerProcessedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "AnsweringUser")
                        .WithMany()
                        .HasForeignKey("AnsweredBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "CancelledByUser")
                        .WithMany()
                        .HasForeignKey("CancelledBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "ImpersonatingAcceptingUser")
                        .WithMany()
                        .HasForeignKey("ImpersonatingAcceptedBy");

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "AnswerProcessedByImpersonator")
                        .WithMany()
                        .HasForeignKey("ImpersonatingAnswerProcessedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "AnsweredByImpersonator")
                        .WithMany()
                        .HasForeignKey("ImpersonatingAnsweredBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "CancelledByImpersonator")
                        .WithMany()
                        .HasForeignKey("ImpersonatingCanceller")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "ReceivedByImpersonator")
                        .WithMany()
                        .HasForeignKey("ImpersonatingReceivedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.InterpreterBroker", "Interpreter")
                        .WithMany("Requests")
                        .HasForeignKey("InterpreterBrokerId");

                    b.HasOne("Tolk.BusinessLogic.Entities.Order", "Order")
                        .WithMany("Requests")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tolk.BusinessLogic.Entities.Quarantine", "Quarantine")
                        .WithMany("QuarantinedRequests")
                        .HasForeignKey("QuarantineId");

                    b.HasOne("Tolk.BusinessLogic.Entities.Ranking", "Ranking")
                        .WithMany("Requests")
                        .HasForeignKey("RankingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "ReceivedByUser")
                        .WithMany()
                        .HasForeignKey("ReceivedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.Request", "ReplacingRequest")
                        .WithOne("ReplacedByRequest")
                        .HasForeignKey("Tolk.BusinessLogic.Entities.Request", "ReplacingRequestId");

                    b.HasOne("Tolk.BusinessLogic.Entities.RequestGroup", "RequestGroup")
                        .WithMany("Requests")
                        .HasForeignKey("RequestGroupId");

                    b.Navigation("AcceptingUser");

                    b.Navigation("AnswerProcessedByImpersonator");

                    b.Navigation("AnsweredByImpersonator");

                    b.Navigation("AnsweringUser");

                    b.Navigation("CancelledByImpersonator");

                    b.Navigation("CancelledByUser");

                    b.Navigation("ImpersonatingAcceptingUser");

                    b.Navigation("Interpreter");

                    b.Navigation("Order");

                    b.Navigation("ProcessingUser");

                    b.Navigation("Quarantine");

                    b.Navigation("Ranking");

                    b.Navigation("ReceivedByImpersonator");

                    b.Navigation("ReceivedByUser");

                    b.Navigation("ReplacingRequest");

                    b.Navigation("RequestGroup");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.RequestAttachment", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.Attachment", "Attachment")
                        .WithMany("Requests")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tolk.BusinessLogic.Entities.Request", "Request")
                        .WithMany("Attachments")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.RequestGroup", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "AcceptingUser")
                        .WithMany()
                        .HasForeignKey("AcceptedBy");

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "ProcessingUser")
                        .WithMany()
                        .HasForeignKey("AnswerProcessedBy");

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "AnsweringUser")
                        .WithMany()
                        .HasForeignKey("AnsweredBy");

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "CancelledByUser")
                        .WithMany()
                        .HasForeignKey("CancelledBy");

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "ImpersonatingAcceptingUser")
                        .WithMany()
                        .HasForeignKey("ImpersonatingAcceptedBy");

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "AnswerProcessedByImpersonator")
                        .WithMany()
                        .HasForeignKey("ImpersonatingAnswerProcessedBy");

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "AnsweredByImpersonator")
                        .WithMany()
                        .HasForeignKey("ImpersonatingAnsweredBy");

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "CancelledByImpersonator")
                        .WithMany()
                        .HasForeignKey("ImpersonatingCanceller");

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "ReceivedByImpersonator")
                        .WithMany()
                        .HasForeignKey("ImpersonatingReceivedBy");

                    b.HasOne("Tolk.BusinessLogic.Entities.OrderGroup", "OrderGroup")
                        .WithMany("RequestGroups")
                        .HasForeignKey("OrderGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tolk.BusinessLogic.Entities.Quarantine", "Quarantine")
                        .WithMany()
                        .HasForeignKey("QuarantineId");

                    b.HasOne("Tolk.BusinessLogic.Entities.Ranking", "Ranking")
                        .WithMany()
                        .HasForeignKey("RankingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "ReceivedByUser")
                        .WithMany()
                        .HasForeignKey("ReceivedBy");

                    b.HasOne("Tolk.BusinessLogic.Entities.RequestGroup", "ReplacedByRequestGroup")
                        .WithOne("ReplacingRequestGroup")
                        .HasForeignKey("Tolk.BusinessLogic.Entities.RequestGroup", "ReplacingRequestGroupId");

                    b.Navigation("AcceptingUser");

                    b.Navigation("AnswerProcessedByImpersonator");

                    b.Navigation("AnsweredByImpersonator");

                    b.Navigation("AnsweringUser");

                    b.Navigation("CancelledByImpersonator");

                    b.Navigation("CancelledByUser");

                    b.Navigation("ImpersonatingAcceptingUser");

                    b.Navigation("OrderGroup");

                    b.Navigation("ProcessingUser");

                    b.Navigation("Quarantine");

                    b.Navigation("Ranking");

                    b.Navigation("ReceivedByImpersonator");

                    b.Navigation("ReceivedByUser");

                    b.Navigation("ReplacedByRequestGroup");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.RequestGroupAttachment", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.Attachment", "Attachment")
                        .WithMany("RequestGroups")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tolk.BusinessLogic.Entities.RequestGroup", "RequestGroup")
                        .WithMany("Attachments")
                        .HasForeignKey("RequestGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("RequestGroup");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.RequestGroupStatusConfirmation", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "ConfirmedByUser")
                        .WithMany()
                        .HasForeignKey("ConfirmedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "ImpersonatingConfirmedByUser")
                        .WithMany()
                        .HasForeignKey("ImpersonatingConfirmedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.RequestGroup", "RequestGroup")
                        .WithMany("StatusConfirmations")
                        .HasForeignKey("RequestGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConfirmedByUser");

                    b.Navigation("ImpersonatingConfirmedByUser");

                    b.Navigation("RequestGroup");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.RequestGroupUpdateLatestAnswerTime", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "UpdatedByImpersonator")
                        .WithMany()
                        .HasForeignKey("ImpersonatorUpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.RequestGroup", "RequestGroup")
                        .WithOne("RequestGroupUpdateLatestAnswerTime")
                        .HasForeignKey("Tolk.BusinessLogic.Entities.RequestGroupUpdateLatestAnswerTime", "RequestGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RequestGroup");

                    b.Navigation("UpdatedByImpersonator");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.RequestGroupView", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "ViewedByImpersonator")
                        .WithMany()
                        .HasForeignKey("ImpersonatingViewedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.RequestGroup", "RequestGroup")
                        .WithMany("Views")
                        .HasForeignKey("RequestGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "ViewedByUser")
                        .WithMany()
                        .HasForeignKey("ViewedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RequestGroup");

                    b.Navigation("ViewedByImpersonator");

                    b.Navigation("ViewedByUser");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.RequestPriceRow", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.PriceCalculationCharge", "PriceCalculationCharge")
                        .WithMany()
                        .HasForeignKey("PriceCalculationChargeId");

                    b.HasOne("Tolk.BusinessLogic.Entities.PriceListRow", "PriceListRow")
                        .WithMany()
                        .HasForeignKey("PriceListRowId");

                    b.HasOne("Tolk.BusinessLogic.Entities.Request", "Request")
                        .WithMany("PriceRows")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PriceCalculationCharge");

                    b.Navigation("PriceListRow");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.RequestStatusConfirmation", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "ConfirmedByUser")
                        .WithMany()
                        .HasForeignKey("ConfirmedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "ImpersonatingConfirmedByUser")
                        .WithMany()
                        .HasForeignKey("ImpersonatingConfirmedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.Request", "Request")
                        .WithMany("RequestStatusConfirmations")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConfirmedByUser");

                    b.Navigation("ImpersonatingConfirmedByUser");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.RequestUpdateLatestAnswerTime", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "UpdatedByImpersonator")
                        .WithMany()
                        .HasForeignKey("ImpersonatorUpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.Request", "Request")
                        .WithOne("RequestUpdateLatestAnswerTime")
                        .HasForeignKey("Tolk.BusinessLogic.Entities.RequestUpdateLatestAnswerTime", "RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Request");

                    b.Navigation("UpdatedByImpersonator");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.RequestView", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "ViewedByImpersonator")
                        .WithMany()
                        .HasForeignKey("ImpersonatingViewedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.Request", "Request")
                        .WithMany("RequestViews")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "ViewedByUser")
                        .WithMany()
                        .HasForeignKey("ViewedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Request");

                    b.Navigation("ViewedByImpersonator");

                    b.Navigation("ViewedByUser");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.Requisition", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "CreatedByImpersonator")
                        .WithMany()
                        .HasForeignKey("ImpersonatingCreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "ProcessedByImpersonator")
                        .WithMany()
                        .HasForeignKey("ImpersonatingProcessedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "ProcessedUser")
                        .WithMany()
                        .HasForeignKey("ProcessedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.Requisition", "ReplacedByRequisition")
                        .WithMany()
                        .HasForeignKey("ReplacedByRequisitionId");

                    b.HasOne("Tolk.BusinessLogic.Entities.Request", "Request")
                        .WithMany("Requisitions")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByImpersonator");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ProcessedByImpersonator");

                    b.Navigation("ProcessedUser");

                    b.Navigation("ReplacedByRequisition");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.RequisitionAttachment", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.Attachment", "Attachment")
                        .WithMany("Requisitions")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tolk.BusinessLogic.Entities.Requisition", "Requisition")
                        .WithMany("Attachments")
                        .HasForeignKey("RequisitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("Requisition");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.RequisitionPriceRow", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.PriceCalculationCharge", "PriceCalculationCharge")
                        .WithMany()
                        .HasForeignKey("PriceCalculationChargeId");

                    b.HasOne("Tolk.BusinessLogic.Entities.PriceListRow", "PriceListRow")
                        .WithMany()
                        .HasForeignKey("PriceListRowId");

                    b.HasOne("Tolk.BusinessLogic.Entities.Requisition", "Requisition")
                        .WithMany("PriceRows")
                        .HasForeignKey("RequisitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PriceCalculationCharge");

                    b.Navigation("PriceListRow");

                    b.Navigation("Requisition");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.RequisitionStatusConfirmation", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "ConfirmedByUser")
                        .WithMany()
                        .HasForeignKey("ConfirmedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "ImpersonatingConfirmedByUser")
                        .WithMany()
                        .HasForeignKey("ImpersonatingConfirmedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.Requisition", "Requisition")
                        .WithMany("RequisitionStatusConfirmations")
                        .HasForeignKey("RequisitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConfirmedByUser");

                    b.Navigation("ImpersonatingConfirmedByUser");

                    b.Navigation("Requisition");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.SystemMessage", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "CreatedByImpersonator")
                        .WithMany()
                        .HasForeignKey("ImpersonatingCreator")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "LastUpdatedImpersonator")
                        .WithMany()
                        .HasForeignKey("ImpersonatingLastUpdated")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByImpersonator");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastUpdatedByUser");

                    b.Navigation("LastUpdatedImpersonator");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.TemporaryAttachmentGroup", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.Attachment", "Attachment")
                        .WithOne("TemporaryAttachmentGroup")
                        .HasForeignKey("Tolk.BusinessLogic.Entities.TemporaryAttachmentGroup", "AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.TemporaryChangedEmailEntry", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "ImpersonatingUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("ImpersonatingUpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "User")
                        .WithOne("TemporaryChangedEmailEntry")
                        .HasForeignKey("Tolk.BusinessLogic.Entities.TemporaryChangedEmailEntry", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ImpersonatingUpdatedByUser");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.UserAuditLogEntry", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "UpdatedByImpersonatorUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByImpersonatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "User")
                        .WithMany("AuditLogEntries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UpdatedByImpersonatorUser");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.UserDefaultSetting", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "User")
                        .WithMany("DefaultSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.UserDefaultSettingHistoryEntry", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.UserAuditLogEntry", "UserAuditLogEntry")
                        .WithMany("DefaultsHistory")
                        .HasForeignKey("UserAuditLogEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAuditLogEntry");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.UserDefaultSettingOrderRequirement", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "User")
                        .WithMany("DefaultSettingOrderRequirements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.UserDefaultSettingsOrderRequirementHistoryEntry", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.UserAuditLogEntry", "UserAuditLogEntry")
                        .WithMany("DefaultOrderRequirementsHistory")
                        .HasForeignKey("UserAuditLogEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAuditLogEntry");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.UserLoginLogEntry", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "User")
                        .WithMany("LoginLogEntries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.UserNotificationSetting", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.UserNotificationSettingHistoryEntry", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.UserAuditLogEntry", "UserAuditLogEntry")
                        .WithMany("NotificationsHistory")
                        .HasForeignKey("UserAuditLogEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAuditLogEntry");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.AspNetUser", b =>
                {
                    b.Navigation("AuditLogEntries");

                    b.Navigation("Claims");

                    b.Navigation("CustomerUnits");

                    b.Navigation("DefaultSettingOrderRequirements");

                    b.Navigation("DefaultSettings");

                    b.Navigation("LoginLogEntries");

                    b.Navigation("NotificationSettings");

                    b.Navigation("Roles");

                    b.Navigation("TemporaryChangedEmailEntry");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.Attachment", b =>
                {
                    b.Navigation("OrderAttachmentHistoryEntries");

                    b.Navigation("OrderGroups");

                    b.Navigation("Orders");

                    b.Navigation("RequestGroups");

                    b.Navigation("Requests");

                    b.Navigation("Requisitions");

                    b.Navigation("TemporaryAttachmentGroup");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.Broker", b =>
                {
                    b.Navigation("Rankings");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.CustomerChangeLogEntry", b =>
                {
                    b.Navigation("CustomerOrganisationHistoryEntry");

                    b.Navigation("CustomerSettingHistories");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.CustomerOrganisation", b =>
                {
                    b.Navigation("CustomerChangeLogEntries");

                    b.Navigation("CustomerSettings");

                    b.Navigation("SubCustomerOrganisations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.CustomerUnit", b =>
                {
                    b.Navigation("CustomerUnitUsers");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.Faq", b =>
                {
                    b.Navigation("FaqDisplayUserRoles");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.FrameworkAgreement", b =>
                {
                    b.Navigation("Rankings");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.Interpreter", b =>
                {
                    b.Navigation("Brokers");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.InterpreterBroker", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.Order", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("CompetenceRequirements");

                    b.Navigation("ExtraInterpreterOrder");

                    b.Navigation("InterpreterLocations");

                    b.Navigation("OrderChangeLogEntries");

                    b.Navigation("OrderStatusConfirmations");

                    b.Navigation("PriceRows");

                    b.Navigation("ReplacedByOrder");

                    b.Navigation("Requests");

                    b.Navigation("Requirements");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderAgreementPayload", b =>
                {
                    b.Navigation("ReplacingPayload");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderChangeLogEntry", b =>
                {
                    b.Navigation("OrderAttachmentHistoryEntries");

                    b.Navigation("OrderChangeConfirmation");

                    b.Navigation("OrderContactPersonHistory");

                    b.Navigation("OrderHistories");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderGroup", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("CompetenceRequirements");

                    b.Navigation("InterpreterLocations");

                    b.Navigation("Orders");

                    b.Navigation("RequestGroups");

                    b.Navigation("Requirements");

                    b.Navigation("StatusConfirmations");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderRequirement", b =>
                {
                    b.Navigation("RequirementAnswers");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OutboundEmail", b =>
                {
                    b.Navigation("ReplacedByEmail");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OutboundPeppolMessage", b =>
                {
                    b.Navigation("FailedCalls");

                    b.Navigation("OrderAgreementPayload");

                    b.Navigation("ReplacedByMessage");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OutboundWebHookCall", b =>
                {
                    b.Navigation("FailedCalls");

                    b.Navigation("ReplacingWebHook");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.Quarantine", b =>
                {
                    b.Navigation("QuarantinedRequests");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.Ranking", b =>
                {
                    b.Navigation("Quarantines");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.Region", b =>
                {
                    b.Navigation("Rankings");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.RegionGroup", b =>
                {
                    b.Navigation("BrokerFeeByServiceTypePriceListRows");

                    b.Navigation("Regions");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.Request", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Complaints");

                    b.Navigation("OrderAgreementPayloads");

                    b.Navigation("PriceRows");

                    b.Navigation("ReplacedByRequest");

                    b.Navigation("RequestStatusConfirmations");

                    b.Navigation("RequestUpdateLatestAnswerTime");

                    b.Navigation("RequestViews");

                    b.Navigation("RequirementAnswers");

                    b.Navigation("Requisitions");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.RequestGroup", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("ReplacingRequestGroup");

                    b.Navigation("RequestGroupUpdateLatestAnswerTime");

                    b.Navigation("Requests");

                    b.Navigation("StatusConfirmations");

                    b.Navigation("Views");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.Requisition", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("MealBreaks");

                    b.Navigation("OrderAgreementPayload");

                    b.Navigation("PriceRows");

                    b.Navigation("RequisitionStatusConfirmations");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.UserAuditLogEntry", b =>
                {
                    b.Navigation("ClaimsHistory");

                    b.Navigation("CustomerUnitUsersHistory");

                    b.Navigation("DefaultOrderRequirementsHistory");

                    b.Navigation("DefaultsHistory");

                    b.Navigation("NotificationsHistory");

                    b.Navigation("RolesHistory");

                    b.Navigation("UserHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
