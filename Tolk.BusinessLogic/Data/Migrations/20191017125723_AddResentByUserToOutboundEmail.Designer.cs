// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tolk.BusinessLogic.Data;

namespace Tolk.BusinessLogic.Data.Migrations
{
    [DbContext(typeof(TolkDbContext))]
    [Migration("20191017125723_AddResentByUserToOutboundEmail")]
    partial class AddResentByUserToOutboundEmail
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.AspNetUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<int?>("BrokerId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<int?>("CustomerOrganisationId");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<int?>("InterpreterId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsApiUser");

                    b.Property<DateTimeOffset?>("LastLoginAt");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NameFamily")
                        .HasMaxLength(255);

                    b.Property<string>("NameFirst")
                        .HasMaxLength(255);

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("PhoneNumberCellphone")
                        .HasMaxLength(32);

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("BrokerId");

                    b.HasIndex("CustomerOrganisationId");

                    b.HasIndex("InterpreterId")
                        .IsUnique()
                        .HasFilter("[InterpreterId] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.AspNetUserClaimHistoryEntry", b =>
                {
                    b.Property<int>("AspNetUserClaimHistoryEntryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserAuditLogEntryId");

                    b.HasKey("AspNetUserClaimHistoryEntryId");

                    b.HasIndex("UserAuditLogEntryId");

                    b.ToTable("AspNetUserClaimHistoryEntries");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.AspNetUserHistoryEntry", b =>
                {
                    b.Property<int>("AspNetUserHistoryEntryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasMaxLength(255);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsApiUser");

                    b.Property<string>("NameFamily")
                        .HasMaxLength(255);

                    b.Property<string>("NameFirst")
                        .HasMaxLength(255);

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("PhoneNumberCellphone")
                        .HasMaxLength(32);

                    b.Property<int>("UserAuditLogEntryId");

                    b.HasKey("AspNetUserHistoryEntryId");

                    b.HasIndex("UserAuditLogEntryId")
                        .IsUnique();

                    b.ToTable("AspNetUserHistoryEntries");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.AspNetUserRoleHistoryEntry", b =>
                {
                    b.Property<int>("AspNetUserRoleHistoryEntryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RoleId");

                    b.Property<int>("UserAuditLogEntryId");

                    b.HasKey("AspNetUserRoleHistoryEntryId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserAuditLogEntryId");

                    b.ToTable("AspNetUserRoleHistoryEntries");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.Attachment", b =>
                {
                    b.Property<int>("AttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Blob")
                        .IsRequired();

                    b.Property<int>("CreatedBy");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int?>("ImpersonatingCreator");

                    b.HasKey("AttachmentId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ImpersonatingCreator");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.Broker", b =>
                {
                    b.Property<int>("BrokerId");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(255);

                    b.Property<string>("EmailDomain")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("OrganizationNumber")
                        .HasMaxLength(32);

                    b.Property<string>("OrganizationPrefix")
                        .HasMaxLength(8);

                    b.HasKey("BrokerId");

                    b.ToTable("Brokers");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.Complaint", b =>
                {
                    b.Property<int>("ComplaintId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AnswerDisputedAt");

                    b.Property<int?>("AnswerDisputedBy");

                    b.Property<string>("AnswerDisputedMessage")
                        .HasMaxLength(1000);

                    b.Property<string>("AnswerMessage")
                        .HasMaxLength(1000);

                    b.Property<DateTimeOffset?>("AnsweredAt");

                    b.Property<int?>("AnsweredBy");

                    b.Property<string>("ComplaintMessage")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<int>("ComplaintType");

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<int>("CreatedBy");

                    b.Property<int?>("ImpersonatingAnswerDisputedBy");

                    b.Property<int?>("ImpersonatingAnsweredBy");

                    b.Property<int?>("ImpersonatingCreatedBy");

                    b.Property<int?>("ImpersonatingTerminatedBy");

                    b.Property<int>("RequestId");

                    b.Property<int>("Status");

                    b.Property<DateTimeOffset?>("TerminatedAt");

                    b.Property<int?>("TerminatedBy");

                    b.Property<string>("TerminationMessage")
                        .HasMaxLength(1000);

                    b.HasKey("ComplaintId");

                    b.HasIndex("AnswerDisputedBy");

                    b.HasIndex("AnsweredBy");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ImpersonatingAnswerDisputedBy");

                    b.HasIndex("ImpersonatingAnsweredBy");

                    b.HasIndex("ImpersonatingCreatedBy");

                    b.HasIndex("ImpersonatingTerminatedBy");

                    b.HasIndex("RequestId");

                    b.HasIndex("TerminatedBy");

                    b.ToTable("Complaints");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.CustomerOrganisation", b =>
                {
                    b.Property<int>("CustomerOrganisationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmailDomain")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("OrganisationNumber")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("OrganisationPrefix")
                        .HasMaxLength(8);

                    b.Property<int?>("ParentCustomerOrganisationId");

                    b.Property<int>("PriceListType");

                    b.HasKey("CustomerOrganisationId");

                    b.HasIndex("ParentCustomerOrganisationId");

                    b.ToTable("CustomerOrganisations");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.CustomerUnit", b =>
                {
                    b.Property<int>("CustomerUnitId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<int>("CreatedBy");

                    b.Property<int>("CustomerOrganisationId");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int?>("ImpersonatingCreator");

                    b.Property<int?>("ImpersonatingInactivatedBy");

                    b.Property<DateTimeOffset?>("InactivatedAt");

                    b.Property<int?>("InactivatedBy");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("CustomerUnitId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomerOrganisationId");

                    b.HasIndex("ImpersonatingCreator");

                    b.HasIndex("ImpersonatingInactivatedBy");

                    b.HasIndex("InactivatedBy");

                    b.ToTable("CustomerUnits");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.CustomerUnitUser", b =>
                {
                    b.Property<int>("CustomerUnitId");

                    b.Property<int>("UserId");

                    b.Property<bool>("IsLocalAdmin");

                    b.HasKey("CustomerUnitId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("CustomerUnitUsers");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.CustomerUnitUserHistoryEntry", b =>
                {
                    b.Property<int>("CustomerUnitUserHistoryEntryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerUnitId");

                    b.Property<bool>("IsLocalAdmin");

                    b.Property<int>("UserAuditLogEntryId");

                    b.HasKey("CustomerUnitUserHistoryEntryId");

                    b.HasIndex("UserAuditLogEntryId");

                    b.ToTable("CustomerUnitUserHistoryEntries");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.FailedWebHookCall", b =>
                {
                    b.Property<int>("FailedWebHookCallId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ErrorMessage");

                    b.Property<DateTimeOffset>("FailedAt");

                    b.Property<int>("OutboundWebHookCallId");

                    b.HasKey("FailedWebHookCallId");

                    b.HasIndex("OutboundWebHookCallId");

                    b.ToTable("FailedWebHookCalls");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.Faq", b =>
                {
                    b.Property<int>("FaqId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .HasMaxLength(2000);

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<int>("CreatedBy");

                    b.Property<bool>("IsDisplayed");

                    b.Property<DateTimeOffset?>("LastUpdatedAt");

                    b.Property<int?>("LastUpdatedBy");

                    b.Property<string>("Question")
                        .HasMaxLength(255);

                    b.HasKey("FaqId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("Faq");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.FaqDisplayUserRole", b =>
                {
                    b.Property<int>("FaqId");

                    b.Property<int>("DisplayUserRole");

                    b.HasKey("FaqId", "DisplayUserRole");

                    b.ToTable("FaqDisplayUserRole");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.Holiday", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int>("DateType");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Date", "DateType");

                    b.ToTable("Holidays");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.Interpreter", b =>
                {
                    b.Property<int>("InterpreterId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("InterpreterId");

                    b.ToTable("Interpreters");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.InterpreterBroker", b =>
                {
                    b.Property<int>("InterpreterBrokerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrokerId");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int?>("ImpersonatingInactivatedBy");

                    b.Property<DateTimeOffset?>("InactivatedAt");

                    b.Property<int?>("InactivatedBy");

                    b.Property<int?>("InterpreterId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("OfficialInterpreterId");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("InterpreterBrokerId");

                    b.HasIndex("BrokerId");

                    b.HasIndex("ImpersonatingInactivatedBy");

                    b.HasIndex("InactivatedBy");

                    b.HasIndex("InterpreterId");

                    b.ToTable("InterpreterBrokers");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<bool>("HasAuthorized");

                    b.Property<bool>("HasEducated");

                    b.Property<bool>("HasHealthcare");

                    b.Property<bool>("HasLegal");

                    b.Property<string>("ISO_639_Code")
                        .HasMaxLength(3);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("TellusName")
                        .HasMaxLength(100);

                    b.HasKey("LanguageId");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.MealBreak", b =>
                {
                    b.Property<int>("MealBreakId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("EndAt");

                    b.Property<int>("RequisitionId");

                    b.Property<DateTimeOffset>("StartAt");

                    b.HasKey("MealBreakId");

                    b.HasIndex("RequisitionId");

                    b.ToTable("MealBreaks");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AllowExceedingTravelCost");

                    b.Property<int>("AssignentType");

                    b.Property<int?>("ContactPersonId");

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<int>("CreatedBy");

                    b.Property<int>("CustomerOrganisationId");

                    b.Property<string>("CustomerReferenceNumber")
                        .HasMaxLength(100);

                    b.Property<int?>("CustomerUnitId");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<DateTimeOffset>("EndAt");

                    b.Property<int?>("ImpersonatingCreator");

                    b.Property<string>("InvoiceReference")
                        .HasMaxLength(100);

                    b.Property<int?>("IsExtraInterpreterForOrderId");

                    b.Property<bool>("LanguageHasAuthorizedInterpreter");

                    b.Property<int?>("LanguageId");

                    b.Property<int?>("OrderGroupId");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("CAST(YEAR([CreatedAt]) AS NVARCHAR(MAX)) + '-' + CAST(([OrderId]+(100000)) AS NVARCHAR(MAX))");

                    b.Property<string>("OtherLanguage")
                        .HasMaxLength(255);

                    b.Property<int>("RegionId");

                    b.Property<int?>("ReplacingOrderId");

                    b.Property<bool>("SpecificCompetenceLevelRequired");

                    b.Property<DateTimeOffset>("StartAt");

                    b.Property<int>("Status");

                    b.Property<string>("UnitName")
                        .HasMaxLength(100);

                    b.HasKey("OrderId");

                    b.HasIndex("ContactPersonId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomerOrganisationId");

                    b.HasIndex("CustomerUnitId");

                    b.HasIndex("ImpersonatingCreator");

                    b.HasIndex("IsExtraInterpreterForOrderId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("OrderGroupId");

                    b.HasIndex("RegionId");

                    b.HasIndex("ReplacingOrderId")
                        .IsUnique()
                        .HasFilter("[ReplacingOrderId] IS NOT NULL");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderAttachment", b =>
                {
                    b.Property<int>("OrderId");

                    b.Property<int>("AttachmentId");

                    b.HasKey("OrderId", "AttachmentId");

                    b.HasIndex("AttachmentId");

                    b.ToTable("OrderAttachments");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderCompetenceRequirement", b =>
                {
                    b.Property<int>("OrderCompetenceRequirementId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompetenceLevel");

                    b.Property<int>("OrderId");

                    b.Property<int?>("Rank");

                    b.HasKey("OrderCompetenceRequirementId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderCompetenceRequirements");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderContactPersonHistory", b =>
                {
                    b.Property<int>("OrderContactPersonHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("ChangedAt");

                    b.Property<int>("ChangedBy");

                    b.Property<int?>("ImpersonatingChangeUserId");

                    b.Property<int>("OrderId");

                    b.Property<int?>("PreviousContactPersonId");

                    b.HasKey("OrderContactPersonHistoryId");

                    b.HasIndex("ChangedBy");

                    b.HasIndex("ImpersonatingChangeUserId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PreviousContactPersonId");

                    b.ToTable("OrderContactPersonHistory");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderGroup", b =>
                {
                    b.Property<int>("OrderGroupId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<int>("CreatedBy");

                    b.Property<int?>("ImpersonatingCreator");

                    b.Property<string>("OrderGroupNumber")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("'G-' + CAST(YEAR([CreatedAt]) AS NVARCHAR(100)) + '-' + CAST(([OrderGroupId]+(100000)) AS NVARCHAR(100))")
                        .HasMaxLength(255);

                    b.Property<bool>("RequireSameInterpreter");

                    b.HasKey("OrderGroupId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ImpersonatingCreator");

                    b.ToTable("OrderGroups");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderInterpreterLocation", b =>
                {
                    b.Property<int>("OrderId");

                    b.Property<int>("InterpreterLocation");

                    b.Property<string>("City")
                        .HasMaxLength(100);

                    b.Property<string>("OffSiteContactInformation")
                        .HasMaxLength(255);

                    b.Property<int>("Rank");

                    b.Property<string>("Street")
                        .HasMaxLength(100);

                    b.HasKey("OrderId", "InterpreterLocation");

                    b.ToTable("OrderInterpreterLocation");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderPriceRow", b =>
                {
                    b.Property<int>("OrderPriceRowId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("EndAt");

                    b.Property<int>("OrderId");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("PriceCalculationChargeId");

                    b.Property<int?>("PriceListRowId");

                    b.Property<int>("PriceRowType");

                    b.Property<int>("Quantity");

                    b.Property<DateTimeOffset>("StartAt");

                    b.HasKey("OrderPriceRowId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PriceCalculationChargeId");

                    b.HasIndex("PriceListRowId");

                    b.ToTable("OrderPriceRows");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderRequirement", b =>
                {
                    b.Property<int>("OrderRequirementId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<bool>("IsRequired");

                    b.Property<int>("OrderId");

                    b.Property<int>("RequirementType");

                    b.HasKey("OrderRequirementId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderRequirements");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderRequirementRequestAnswer", b =>
                {
                    b.Property<int>("RequestId");

                    b.Property<int>("OrderRequirementId");

                    b.Property<string>("Answer")
                        .HasMaxLength(1000);

                    b.Property<bool>("CanSatisfyRequirement");

                    b.HasKey("RequestId", "OrderRequirementId");

                    b.HasIndex("OrderRequirementId");

                    b.ToTable("OrderRequirementRequestAnswer");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderStatusConfirmation", b =>
                {
                    b.Property<int>("OrderStatusConfirmationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("ConfirmedAt");

                    b.Property<int?>("ConfirmedBy");

                    b.Property<int?>("ImpersonatingConfirmedBy");

                    b.Property<int>("OrderId");

                    b.Property<int>("OrderStatus");

                    b.HasKey("OrderStatusConfirmationId");

                    b.HasIndex("ConfirmedBy");

                    b.HasIndex("ImpersonatingConfirmedBy");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderStatusConfirmation");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OutboundEmail", b =>
                {
                    b.Property<int>("OutboundEmailId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<DateTimeOffset?>("DeliveredAt");

                    b.Property<string>("HtmlBody")
                        .IsRequired();

                    b.Property<string>("PlainBody")
                        .IsRequired();

                    b.Property<string>("Recipient")
                        .IsRequired();

                    b.Property<int?>("ReplacingEmailId");

                    b.Property<int?>("ResentByUserId");

                    b.Property<string>("Subject")
                        .IsRequired();

                    b.HasKey("OutboundEmailId");

                    b.HasIndex("ReplacingEmailId")
                        .IsUnique()
                        .HasFilter("[ReplacingEmailId] IS NOT NULL");

                    b.HasIndex("ResentByUserId");

                    b.ToTable("OutboundEmails");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OutboundWebHookCall", b =>
                {
                    b.Property<int>("OutboundWebHookCallId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<DateTimeOffset?>("DeliveredAt");

                    b.Property<int>("FailedTries");

                    b.Property<int>("NotificationType");

                    b.Property<string>("Payload")
                        .IsRequired();

                    b.Property<string>("RecipientUrl")
                        .IsRequired();

                    b.Property<int>("RecipientUserId");

                    b.Property<int?>("ResentHookId");

                    b.HasKey("OutboundWebHookCallId");

                    b.HasIndex("RecipientUserId");

                    b.HasIndex("ResentHookId")
                        .IsUnique()
                        .HasFilter("[ResentHookId] IS NOT NULL");

                    b.ToTable("OutboundWebHookCalls");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.PriceCalculationCharge", b =>
                {
                    b.Property<int>("PriceCalculationChargeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("ChargePercentage")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("ChargeTypeId");

                    b.Property<DateTime>("EndDate");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("PriceCalculationChargeId");

                    b.ToTable("PriceCalculationCharges");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.PriceListRow", b =>
                {
                    b.Property<int?>("PriceListRowId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompetenceLevel");

                    b.Property<DateTime>("EndDate");

                    b.Property<int>("MaxMinutes");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("PriceListRowType");

                    b.Property<int>("PriceListType");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("PriceListRowId");

                    b.ToTable("PriceListRows");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.Quarantine", b =>
                {
                    b.Property<int>("QuarantineId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("ActiveFrom");

                    b.Property<DateTimeOffset>("ActiveTo");

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<int>("CreatedBy");

                    b.Property<int>("CustomerOrganisationId");

                    b.Property<string>("Motivation")
                        .HasMaxLength(1024);

                    b.Property<int>("RankingId");

                    b.Property<DateTimeOffset?>("UpdatedAt");

                    b.Property<int?>("UpdatedBy");

                    b.HasKey("QuarantineId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomerOrganisationId");

                    b.HasIndex("RankingId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Quarantines");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.QuarantineHistoryEntry", b =>
                {
                    b.Property<int>("QuarantineHistoryEntryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("ActiveFrom");

                    b.Property<DateTimeOffset>("ActiveTo");

                    b.Property<DateTimeOffset>("LoggedAt");

                    b.Property<string>("Motivation")
                        .HasMaxLength(1024);

                    b.Property<int>("QuarantineId");

                    b.Property<int?>("UpdatedById");

                    b.HasKey("QuarantineHistoryEntryId");

                    b.HasIndex("QuarantineId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("QuarantineHistoryEntries");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.Ranking", b =>
                {
                    b.Property<int>("RankingId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("BrokerFee")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<int>("BrokerId");

                    b.Property<DateTime>("FirstValidDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("LastValidDate")
                        .HasColumnType("date");

                    b.Property<int>("Rank");

                    b.Property<int>("RegionId");

                    b.HasKey("RankingId");

                    b.HasIndex("BrokerId");

                    b.HasIndex("RegionId");

                    b.ToTable("Rankings");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.Region", b =>
                {
                    b.Property<int>("RegionId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("RegionId");

                    b.ToTable("Regions");

                    b.HasData(
                        new
                        {
                            RegionId = 1,
                            Name = "Stockholm"
                        },
                        new
                        {
                            RegionId = 2,
                            Name = "Uppsala"
                        },
                        new
                        {
                            RegionId = 3,
                            Name = "Södermanland"
                        },
                        new
                        {
                            RegionId = 4,
                            Name = "Östergötland"
                        },
                        new
                        {
                            RegionId = 5,
                            Name = "Jönköping"
                        },
                        new
                        {
                            RegionId = 6,
                            Name = "Kronoberg"
                        },
                        new
                        {
                            RegionId = 7,
                            Name = "Kalmar"
                        },
                        new
                        {
                            RegionId = 80,
                            Name = "Gotland"
                        },
                        new
                        {
                            RegionId = 8,
                            Name = "Blekinge "
                        },
                        new
                        {
                            RegionId = 25,
                            Name = "Skåne"
                        },
                        new
                        {
                            RegionId = 11,
                            Name = "Halland"
                        },
                        new
                        {
                            RegionId = 13,
                            Name = "Västra Götaland"
                        },
                        new
                        {
                            RegionId = 15,
                            Name = "Värmland"
                        },
                        new
                        {
                            RegionId = 16,
                            Name = "Örebro"
                        },
                        new
                        {
                            RegionId = 17,
                            Name = "Västmanland"
                        },
                        new
                        {
                            RegionId = 18,
                            Name = "Dalarna"
                        },
                        new
                        {
                            RegionId = 19,
                            Name = "Gävleborg"
                        },
                        new
                        {
                            RegionId = 20,
                            Name = "Västernorrland"
                        },
                        new
                        {
                            RegionId = 21,
                            Name = "Jämtland"
                        },
                        new
                        {
                            RegionId = 22,
                            Name = "Västerbotten"
                        },
                        new
                        {
                            RegionId = 23,
                            Name = "Norrbotten"
                        });
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.Request", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AnswerDate");

                    b.Property<DateTimeOffset?>("AnswerProcessedAt");

                    b.Property<int?>("AnswerProcessedBy");

                    b.Property<int?>("AnsweredBy");

                    b.Property<string>("BrokerMessage")
                        .HasMaxLength(1000);

                    b.Property<string>("CancelMessage")
                        .HasMaxLength(1000);

                    b.Property<DateTimeOffset?>("CancelledAt");

                    b.Property<int?>("CancelledBy");

                    b.Property<int?>("CompetenceLevel");

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<string>("DenyMessage")
                        .HasMaxLength(1000);

                    b.Property<string>("ExpectedTravelCostInfo")
                        .HasMaxLength(1000);

                    b.Property<DateTimeOffset?>("ExpiresAt");

                    b.Property<int?>("ImpersonatingAnswerProcessedBy");

                    b.Property<int?>("ImpersonatingAnsweredBy");

                    b.Property<int?>("ImpersonatingCanceller");

                    b.Property<int?>("ImpersonatingReceivedBy");

                    b.Property<int?>("InterpreterBrokerId");

                    b.Property<int?>("InterpreterCompetenceVerificationResultOnAssign");

                    b.Property<int?>("InterpreterCompetenceVerificationResultOnStart");

                    b.Property<int?>("InterpreterLocation");

                    b.Property<bool>("IsTerminalRequest");

                    b.Property<int>("OrderId");

                    b.Property<int?>("QuarantineId");

                    b.Property<int>("RankingId");

                    b.Property<int?>("ReceivedBy");

                    b.Property<DateTimeOffset?>("RecievedAt");

                    b.Property<int?>("ReplacingRequestId");

                    b.Property<int?>("RequestGroupId");

                    b.Property<int>("Status");

                    b.HasKey("RequestId");

                    b.HasIndex("AnswerProcessedBy");

                    b.HasIndex("AnsweredBy");

                    b.HasIndex("CancelledBy");

                    b.HasIndex("ImpersonatingAnswerProcessedBy");

                    b.HasIndex("ImpersonatingAnsweredBy");

                    b.HasIndex("ImpersonatingCanceller");

                    b.HasIndex("ImpersonatingReceivedBy");

                    b.HasIndex("InterpreterBrokerId");

                    b.HasIndex("OrderId");

                    b.HasIndex("QuarantineId");

                    b.HasIndex("RankingId");

                    b.HasIndex("ReceivedBy");

                    b.HasIndex("ReplacingRequestId")
                        .IsUnique()
                        .HasFilter("[ReplacingRequestId] IS NOT NULL");

                    b.HasIndex("RequestGroupId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.RequestAttachment", b =>
                {
                    b.Property<int>("RequestId");

                    b.Property<int>("AttachmentId");

                    b.HasKey("RequestId", "AttachmentId");

                    b.HasIndex("AttachmentId");

                    b.ToTable("RequestAttachments");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.RequestGroup", b =>
                {
                    b.Property<int>("RequestGroupId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AnswerDate");

                    b.Property<DateTimeOffset?>("AnswerProcessedAt");

                    b.Property<int?>("AnswerProcessedBy");

                    b.Property<int?>("AnsweredBy");

                    b.Property<string>("BrokerMessage")
                        .HasMaxLength(1000);

                    b.Property<string>("CancelMessage")
                        .HasMaxLength(1000);

                    b.Property<DateTimeOffset?>("CancelledAt");

                    b.Property<int?>("CancelledBy");

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<string>("DenyMessage")
                        .HasMaxLength(1000);

                    b.Property<DateTimeOffset?>("ExpiresAt");

                    b.Property<int?>("ImpersonatingAnswerProcessedBy");

                    b.Property<int?>("ImpersonatingAnsweredBy");

                    b.Property<int?>("ImpersonatingCanceller");

                    b.Property<int?>("ImpersonatingReceivedBy");

                    b.Property<bool>("IsTerminalRequest");

                    b.Property<int>("OrderGroupId");

                    b.Property<int>("RankingId");

                    b.Property<int?>("ReceivedBy");

                    b.Property<DateTimeOffset?>("RecievedAt");

                    b.Property<int>("Status");

                    b.HasKey("RequestGroupId");

                    b.HasIndex("AnswerProcessedBy");

                    b.HasIndex("AnsweredBy");

                    b.HasIndex("CancelledBy");

                    b.HasIndex("ImpersonatingAnswerProcessedBy");

                    b.HasIndex("ImpersonatingAnsweredBy");

                    b.HasIndex("ImpersonatingCanceller");

                    b.HasIndex("ImpersonatingReceivedBy");

                    b.HasIndex("OrderGroupId");

                    b.HasIndex("RankingId");

                    b.HasIndex("ReceivedBy");

                    b.ToTable("RequestGroups");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.RequestPriceRow", b =>
                {
                    b.Property<int>("RequestPriceRowId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("EndAt");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("PriceCalculationChargeId");

                    b.Property<int?>("PriceListRowId");

                    b.Property<int>("PriceRowType");

                    b.Property<int>("Quantity");

                    b.Property<int>("RequestId");

                    b.Property<DateTimeOffset>("StartAt");

                    b.HasKey("RequestPriceRowId");

                    b.HasIndex("PriceCalculationChargeId");

                    b.HasIndex("PriceListRowId");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestPriceRows");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.RequestStatusConfirmation", b =>
                {
                    b.Property<int>("RequestStatusConfirmationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("ConfirmedAt");

                    b.Property<int?>("ConfirmedBy");

                    b.Property<int?>("ImpersonatingConfirmedBy");

                    b.Property<int>("RequestId");

                    b.Property<int>("RequestStatus");

                    b.HasKey("RequestStatusConfirmationId");

                    b.HasIndex("ConfirmedBy");

                    b.HasIndex("ImpersonatingConfirmedBy");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestStatusConfirmation");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.RequestView", b =>
                {
                    b.Property<int>("RequestViewId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ImpersonatingViewedBy");

                    b.Property<int>("RequestId");

                    b.Property<DateTimeOffset>("ViewedAt");

                    b.Property<int>("ViewedBy");

                    b.HasKey("RequestViewId");

                    b.HasIndex("ImpersonatingViewedBy");

                    b.HasIndex("RequestId");

                    b.HasIndex("ViewedBy");

                    b.ToTable("RequestViews");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.Requisition", b =>
                {
                    b.Property<int>("RequisitionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CarCompensation");

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<int>("CreatedBy");

                    b.Property<string>("CustomerComment")
                        .HasMaxLength(255);

                    b.Property<int?>("ImpersonatingCreatedBy");

                    b.Property<int?>("ImpersonatingProcessedBy");

                    b.Property<int?>("InterpretersTaxCard");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<string>("PerDiem")
                        .HasMaxLength(1000);

                    b.Property<DateTimeOffset?>("ProcessedAt");

                    b.Property<int?>("ProcessedBy");

                    b.Property<int?>("ReplacedByRequisitionId");

                    b.Property<int>("RequestId");

                    b.Property<bool>("RequestOrReplacingOrderPeriodUsed");

                    b.Property<DateTimeOffset>("SessionEndedAt");

                    b.Property<DateTimeOffset>("SessionStartedAt");

                    b.Property<int>("Status");

                    b.Property<int?>("TimeWasteIWHTime");

                    b.Property<int?>("TimeWasteNormalTime");

                    b.HasKey("RequisitionId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ImpersonatingCreatedBy");

                    b.HasIndex("ImpersonatingProcessedBy");

                    b.HasIndex("ProcessedBy");

                    b.HasIndex("ReplacedByRequisitionId");

                    b.HasIndex("RequestId");

                    b.ToTable("Requisitions");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.RequisitionAttachment", b =>
                {
                    b.Property<int>("RequisitionId");

                    b.Property<int>("AttachmentId");

                    b.HasKey("RequisitionId", "AttachmentId");

                    b.HasIndex("AttachmentId");

                    b.ToTable("RequisitionAttachments");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.RequisitionPriceRow", b =>
                {
                    b.Property<int>("RequisitionPriceRowId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("EndAt");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("PriceCalculationChargeId");

                    b.Property<int?>("PriceListRowId");

                    b.Property<int>("PriceRowType");

                    b.Property<int>("Quantity");

                    b.Property<int>("RequisitionId");

                    b.Property<DateTimeOffset>("StartAt");

                    b.HasKey("RequisitionPriceRowId");

                    b.HasIndex("PriceCalculationChargeId");

                    b.HasIndex("PriceListRowId");

                    b.HasIndex("RequisitionId");

                    b.ToTable("RequisitionPriceRows");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.SystemMessage", b =>
                {
                    b.Property<int>("SystemMessageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("ActiveFrom");

                    b.Property<DateTimeOffset>("ActiveTo");

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<int>("CreatedBy");

                    b.Property<int?>("ImpersonatingCreator");

                    b.Property<int?>("ImpersonatingLastUpdated");

                    b.Property<DateTimeOffset?>("LastUpdatedAt");

                    b.Property<int?>("LastUpdatedBy");

                    b.Property<string>("SystemMessageHeader")
                        .HasMaxLength(255);

                    b.Property<string>("SystemMessageText")
                        .HasMaxLength(2000);

                    b.Property<int>("SystemMessageType");

                    b.Property<int>("SystemMessageUserTypeGroup");

                    b.HasKey("SystemMessageId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ImpersonatingCreator");

                    b.HasIndex("ImpersonatingLastUpdated");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("SystemMessages");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.TemporaryAttachmentGroup", b =>
                {
                    b.Property<Guid>("TemporaryAttachmentGroupKey");

                    b.Property<int>("AttachmentId");

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.HasKey("TemporaryAttachmentGroupKey", "AttachmentId");

                    b.HasIndex("AttachmentId")
                        .IsUnique();

                    b.ToTable("TemporaryAttachmentGroups");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.TemporaryChangedEmailEntry", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("EmailAddress")
                        .IsRequired();

                    b.Property<DateTimeOffset>("ExpirationDate");

                    b.HasKey("UserId");

                    b.ToTable("TemporaryChangedEmailStoreEntries");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.UserAuditLogEntry", b =>
                {
                    b.Property<int>("UserAuditLogEntryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("LoggedAt");

                    b.Property<int?>("UpdatedByImpersonatorId");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<int>("UserChangeType");

                    b.Property<int>("UserId");

                    b.HasKey("UserAuditLogEntryId");

                    b.HasIndex("UpdatedByImpersonatorId");

                    b.HasIndex("UpdatedByUserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAuditLogEntries");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.UserDefaultSetting", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("DefaultSettingType");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "DefaultSettingType");

                    b.ToTable("UserDefaultSettings");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.UserDefaultSettingHistoryEntry", b =>
                {
                    b.Property<int>("UserDefaultSettingHistoryEntryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DefaultSettingType");

                    b.Property<int>("UserAuditLogEntryId");

                    b.Property<string>("Value");

                    b.HasKey("UserDefaultSettingHistoryEntryId");

                    b.HasIndex("UserAuditLogEntryId");

                    b.ToTable("UserDefaultSettingHistoryEntries");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.UserLoginLogEntry", b =>
                {
                    b.Property<int>("UserLoginLogEntryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("LoggedInAt");

                    b.Property<int>("UserId");

                    b.HasKey("UserLoginLogEntryId");

                    b.HasIndex("UserId");

                    b.ToTable("UserLoginLogEntries");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.UserNotificationSetting", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("NotificationChannel");

                    b.Property<int>("NotificationType");

                    b.Property<string>("ConnectionInformation");

                    b.HasKey("UserId", "NotificationChannel", "NotificationType");

                    b.ToTable("UserNotificationSettings");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.UserNotificationSettingHistoryEntry", b =>
                {
                    b.Property<int>("UserNotificationSettingHistoryEntryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConnectionInformation");

                    b.Property<int>("NotificationChannel");

                    b.Property<int>("NotificationType");

                    b.Property<int>("UserAuditLogEntryId");

                    b.HasKey("UserNotificationSettingHistoryEntryId");

                    b.HasIndex("UserAuditLogEntryId");

                    b.ToTable("UserNotificationSettingHistoryEntries");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.AspNetUser", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.Broker", "Broker")
                        .WithMany("Users")
                        .HasForeignKey("BrokerId");

                    b.HasOne("Tolk.BusinessLogic.Entities.CustomerOrganisation", "CustomerOrganisation")
                        .WithMany("Users")
                        .HasForeignKey("CustomerOrganisationId");

                    b.HasOne("Tolk.BusinessLogic.Entities.Interpreter", "Interpreter")
                        .WithOne("User")
                        .HasForeignKey("Tolk.BusinessLogic.Entities.AspNetUser", "InterpreterId");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.AspNetUserClaimHistoryEntry", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.UserAuditLogEntry", "UserAuditLogEntry")
                        .WithMany("ClaimsHistory")
                        .HasForeignKey("UserAuditLogEntryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.AspNetUserHistoryEntry", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.UserAuditLogEntry", "UserAuditLogEntry")
                        .WithOne("UserHistory")
                        .HasForeignKey("Tolk.BusinessLogic.Entities.AspNetUserHistoryEntry", "UserAuditLogEntryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.AspNetUserRoleHistoryEntry", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tolk.BusinessLogic.Entities.UserAuditLogEntry", "UserAuditLogEntry")
                        .WithMany("RolesHistory")
                        .HasForeignKey("UserAuditLogEntryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.Attachment", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "CreatedByImpersonator")
                        .WithMany()
                        .HasForeignKey("ImpersonatingCreator")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.Complaint", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "AnswerDisputingUser")
                        .WithMany()
                        .HasForeignKey("AnswerDisputedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "AnsweringUser")
                        .WithMany()
                        .HasForeignKey("AnsweredBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "AnswerDisputedByImpersonator")
                        .WithMany()
                        .HasForeignKey("ImpersonatingAnswerDisputedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "AnsweredByImpersonator")
                        .WithMany()
                        .HasForeignKey("ImpersonatingAnsweredBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "CreatedByImpersonator")
                        .WithMany()
                        .HasForeignKey("ImpersonatingCreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "TerminatedByImpersonator")
                        .WithMany()
                        .HasForeignKey("ImpersonatingTerminatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.Request", "Request")
                        .WithMany("Complaints")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "TerminatingUser")
                        .WithMany()
                        .HasForeignKey("TerminatedBy")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.CustomerOrganisation", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.CustomerOrganisation", "ParentCustomerOrganisation")
                        .WithMany("SubCustomerOrganisations")
                        .HasForeignKey("ParentCustomerOrganisationId");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.CustomerUnit", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.CustomerOrganisation", "CustomerOrganisation")
                        .WithMany()
                        .HasForeignKey("CustomerOrganisationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "CreatedByImpersonator")
                        .WithMany()
                        .HasForeignKey("ImpersonatingCreator")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "InactivatedByImpersonator")
                        .WithMany()
                        .HasForeignKey("ImpersonatingInactivatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "InactivatedByUser")
                        .WithMany()
                        .HasForeignKey("InactivatedBy")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.CustomerUnitUser", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.CustomerUnit", "CustomerUnit")
                        .WithMany("CustomerUnitUsers")
                        .HasForeignKey("CustomerUnitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "User")
                        .WithMany("CustomerUnits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.CustomerUnitUserHistoryEntry", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.UserAuditLogEntry", "UserAuditLogEntry")
                        .WithMany("CustomerUnitUsersHistory")
                        .HasForeignKey("UserAuditLogEntryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.FailedWebHookCall", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.OutboundWebHookCall", "OutboundWebHookCall")
                        .WithMany("FailedCalls")
                        .HasForeignKey("OutboundWebHookCallId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.Faq", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.FaqDisplayUserRole", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.Faq", "Faq")
                        .WithMany("FaqDisplayUserRoles")
                        .HasForeignKey("FaqId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.InterpreterBroker", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.Broker", "Broker")
                        .WithMany()
                        .HasForeignKey("BrokerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "InactivatedByImpersonator")
                        .WithMany()
                        .HasForeignKey("ImpersonatingInactivatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "InactivatedByUser")
                        .WithMany()
                        .HasForeignKey("InactivatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.Interpreter", "Interpreter")
                        .WithMany("Brokers")
                        .HasForeignKey("InterpreterId");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.MealBreak", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.Requisition", "Requisition")
                        .WithMany("MealBreaks")
                        .HasForeignKey("RequisitionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.Order", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "ContactPersonUser")
                        .WithMany()
                        .HasForeignKey("ContactPersonId");

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.CustomerOrganisation", "CustomerOrganisation")
                        .WithMany()
                        .HasForeignKey("CustomerOrganisationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tolk.BusinessLogic.Entities.CustomerUnit", "CustomerUnit")
                        .WithMany()
                        .HasForeignKey("CustomerUnitId");

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "CreatedByImpersonator")
                        .WithMany()
                        .HasForeignKey("ImpersonatingCreator")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.Order", "IsExtraInterpreterForOrder")
                        .WithMany()
                        .HasForeignKey("IsExtraInterpreterForOrderId");

                    b.HasOne("Tolk.BusinessLogic.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("Tolk.BusinessLogic.Entities.OrderGroup", "Group")
                        .WithMany("Orders")
                        .HasForeignKey("OrderGroupId");

                    b.HasOne("Tolk.BusinessLogic.Entities.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tolk.BusinessLogic.Entities.Order", "ReplacingOrder")
                        .WithOne("ReplacedByOrder")
                        .HasForeignKey("Tolk.BusinessLogic.Entities.Order", "ReplacingOrderId");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderAttachment", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.Attachment", "Attachment")
                        .WithMany("Orders")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tolk.BusinessLogic.Entities.Order", "Order")
                        .WithMany("Attachments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderCompetenceRequirement", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.Order", "Order")
                        .WithMany("CompetenceRequirements")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderContactPersonHistory", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "ChangedByUser")
                        .WithMany()
                        .HasForeignKey("ChangedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "ChangedByImpersonator")
                        .WithMany()
                        .HasForeignKey("ImpersonatingChangeUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.Order", "Order")
                        .WithMany("OrderContactPersonHistory")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "PreviousContactPersonUser")
                        .WithMany()
                        .HasForeignKey("PreviousContactPersonId");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderGroup", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "CreatedByImpersonator")
                        .WithMany()
                        .HasForeignKey("ImpersonatingCreator");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderInterpreterLocation", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.Order", "Order")
                        .WithMany("InterpreterLocations")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderPriceRow", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.Order", "Order")
                        .WithMany("PriceRows")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tolk.BusinessLogic.Entities.PriceCalculationCharge", "PriceCalculationCharge")
                        .WithMany()
                        .HasForeignKey("PriceCalculationChargeId");

                    b.HasOne("Tolk.BusinessLogic.Entities.PriceListRow", "PriceListRow")
                        .WithMany()
                        .HasForeignKey("PriceListRowId");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderRequirement", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.Order", "Order")
                        .WithMany("Requirements")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderRequirementRequestAnswer", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.OrderRequirement", "OrderRequirement")
                        .WithMany("RequirementAnswers")
                        .HasForeignKey("OrderRequirementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tolk.BusinessLogic.Entities.Request", "Request")
                        .WithMany("RequirementAnswers")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OrderStatusConfirmation", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "ConfirmedByUser")
                        .WithMany()
                        .HasForeignKey("ConfirmedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "ImpersonatingConfirmedByUser")
                        .WithMany()
                        .HasForeignKey("ImpersonatingConfirmedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.Order", "Order")
                        .WithMany("OrderStatusConfirmations")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OutboundEmail", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.OutboundEmail", "ReplacingEmail")
                        .WithOne("ReplacedByEmail")
                        .HasForeignKey("Tolk.BusinessLogic.Entities.OutboundEmail", "ReplacingEmailId");

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "ResentByUser")
                        .WithMany()
                        .HasForeignKey("ResentByUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.OutboundWebHookCall", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "RecipientUser")
                        .WithMany()
                        .HasForeignKey("RecipientUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.OutboundWebHookCall", "ResentHook")
                        .WithOne("ReplacingWebHook")
                        .HasForeignKey("Tolk.BusinessLogic.Entities.OutboundWebHookCall", "ResentHookId");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.Quarantine", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tolk.BusinessLogic.Entities.CustomerOrganisation", "CustomerOrganisation")
                        .WithMany()
                        .HasForeignKey("CustomerOrganisationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tolk.BusinessLogic.Entities.Ranking", "Ranking")
                        .WithMany("Quarantines")
                        .HasForeignKey("RankingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.QuarantineHistoryEntry", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.Quarantine", "Quarantine")
                        .WithMany()
                        .HasForeignKey("QuarantineId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.Ranking", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.Broker", "Broker")
                        .WithMany("Rankings")
                        .HasForeignKey("BrokerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tolk.BusinessLogic.Entities.Region", "Region")
                        .WithMany("Rankings")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.Request", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "ProcessingUser")
                        .WithMany()
                        .HasForeignKey("AnswerProcessedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "AnsweringUser")
                        .WithMany()
                        .HasForeignKey("AnsweredBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "CancelledByUser")
                        .WithMany()
                        .HasForeignKey("CancelledBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "AnswerProcessedByImpersonator")
                        .WithMany()
                        .HasForeignKey("ImpersonatingAnswerProcessedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "AnsweredByImpersonator")
                        .WithMany()
                        .HasForeignKey("ImpersonatingAnsweredBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "CancelledByImpersonator")
                        .WithMany()
                        .HasForeignKey("ImpersonatingCanceller")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "ReceivedByImpersonator")
                        .WithMany()
                        .HasForeignKey("ImpersonatingReceivedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.InterpreterBroker", "Interpreter")
                        .WithMany("Requests")
                        .HasForeignKey("InterpreterBrokerId");

                    b.HasOne("Tolk.BusinessLogic.Entities.Order", "Order")
                        .WithMany("Requests")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tolk.BusinessLogic.Entities.Quarantine", "Quarantine")
                        .WithMany("QuarantinedRequests")
                        .HasForeignKey("QuarantineId");

                    b.HasOne("Tolk.BusinessLogic.Entities.Ranking", "Ranking")
                        .WithMany("Requests")
                        .HasForeignKey("RankingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "ReceivedByUser")
                        .WithMany()
                        .HasForeignKey("ReceivedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.Request", "ReplacingRequest")
                        .WithOne("ReplacedByRequest")
                        .HasForeignKey("Tolk.BusinessLogic.Entities.Request", "ReplacingRequestId");

                    b.HasOne("Tolk.BusinessLogic.Entities.RequestGroup", "RequestGroup")
                        .WithMany("Requests")
                        .HasForeignKey("RequestGroupId");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.RequestAttachment", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.Attachment", "Attachment")
                        .WithMany("Requests")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tolk.BusinessLogic.Entities.Request", "Request")
                        .WithMany("Attachments")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.RequestGroup", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "ProcessingUser")
                        .WithMany()
                        .HasForeignKey("AnswerProcessedBy");

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "AnsweringUser")
                        .WithMany()
                        .HasForeignKey("AnsweredBy");

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "CancelledByUser")
                        .WithMany()
                        .HasForeignKey("CancelledBy");

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "AnswerProcessedByImpersonator")
                        .WithMany()
                        .HasForeignKey("ImpersonatingAnswerProcessedBy");

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "AnsweredByImpersonator")
                        .WithMany()
                        .HasForeignKey("ImpersonatingAnsweredBy");

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "CancelledByImpersonator")
                        .WithMany()
                        .HasForeignKey("ImpersonatingCanceller");

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "ReceivedByImpersonator")
                        .WithMany()
                        .HasForeignKey("ImpersonatingReceivedBy");

                    b.HasOne("Tolk.BusinessLogic.Entities.OrderGroup", "OrderGroup")
                        .WithMany("RequestGroups")
                        .HasForeignKey("OrderGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tolk.BusinessLogic.Entities.Ranking", "Ranking")
                        .WithMany()
                        .HasForeignKey("RankingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "ReceivedByUser")
                        .WithMany()
                        .HasForeignKey("ReceivedBy");
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.RequestPriceRow", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.PriceCalculationCharge", "PriceCalculationCharge")
                        .WithMany()
                        .HasForeignKey("PriceCalculationChargeId");

                    b.HasOne("Tolk.BusinessLogic.Entities.PriceListRow", "PriceListRow")
                        .WithMany()
                        .HasForeignKey("PriceListRowId");

                    b.HasOne("Tolk.BusinessLogic.Entities.Request", "Request")
                        .WithMany("PriceRows")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.RequestStatusConfirmation", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "ConfirmedByUser")
                        .WithMany()
                        .HasForeignKey("ConfirmedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "ImpersonatingConfirmedByUser")
                        .WithMany()
                        .HasForeignKey("ImpersonatingConfirmedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.Request", "Request")
                        .WithMany("RequestStatusConfirmations")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.RequestView", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "ViewedByImpersonator")
                        .WithMany()
                        .HasForeignKey("ImpersonatingViewedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.Request", "Request")
                        .WithMany("RequestViews")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "ViewedByUser")
                        .WithMany()
                        .HasForeignKey("ViewedBy")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.Requisition", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "CreatedByImpersonator")
                        .WithMany()
                        .HasForeignKey("ImpersonatingCreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "ProcessedByImpersonator")
                        .WithMany()
                        .HasForeignKey("ImpersonatingProcessedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "ProcessedUser")
                        .WithMany()
                        .HasForeignKey("ProcessedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.Requisition", "ReplacedByRequisition")
                        .WithMany()
                        .HasForeignKey("ReplacedByRequisitionId");

                    b.HasOne("Tolk.BusinessLogic.Entities.Request", "Request")
                        .WithMany("Requisitions")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.RequisitionAttachment", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.Attachment", "Attachment")
                        .WithMany("Requisitions")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tolk.BusinessLogic.Entities.Requisition", "Requisition")
                        .WithMany("Attachments")
                        .HasForeignKey("RequisitionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.RequisitionPriceRow", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.PriceCalculationCharge", "PriceCalculationCharge")
                        .WithMany()
                        .HasForeignKey("PriceCalculationChargeId");

                    b.HasOne("Tolk.BusinessLogic.Entities.PriceListRow", "PriceListRow")
                        .WithMany()
                        .HasForeignKey("PriceListRowId");

                    b.HasOne("Tolk.BusinessLogic.Entities.Requisition", "Requisition")
                        .WithMany("PriceRows")
                        .HasForeignKey("RequisitionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.SystemMessage", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "CreatedByImpersonator")
                        .WithMany()
                        .HasForeignKey("ImpersonatingCreator")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "LastUpdatedImpersonator")
                        .WithMany()
                        .HasForeignKey("ImpersonatingLastUpdated")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.TemporaryAttachmentGroup", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.Attachment", "Attachment")
                        .WithOne("TemporaryAttachmentGroup")
                        .HasForeignKey("Tolk.BusinessLogic.Entities.TemporaryAttachmentGroup", "AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.TemporaryChangedEmailEntry", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "User")
                        .WithOne("TemporaryChangedEmailEntry")
                        .HasForeignKey("Tolk.BusinessLogic.Entities.TemporaryChangedEmailEntry", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.UserAuditLogEntry", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "UpdatedByImpersonatorUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByImpersonatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "User")
                        .WithMany("AuditLogEntries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.UserDefaultSetting", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "User")
                        .WithMany("DefaultSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.UserDefaultSettingHistoryEntry", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.UserAuditLogEntry", "UserAuditLogEntry")
                        .WithMany("DefaultsHistory")
                        .HasForeignKey("UserAuditLogEntryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.UserLoginLogEntry", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "User")
                        .WithMany("LoginLogEntries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.UserNotificationSetting", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.AspNetUser", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tolk.BusinessLogic.Entities.UserNotificationSettingHistoryEntry", b =>
                {
                    b.HasOne("Tolk.BusinessLogic.Entities.UserAuditLogEntry", "UserAuditLogEntry")
                        .WithMany("NotificationsHistory")
                        .HasForeignKey("UserAuditLogEntryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
