@model RequestModel
@using Tolk.BusinessLogic.Enums
@using Tolk.BusinessLogic.Utilities
@{
    string header = (string)ViewData["header"] ?? "Bokningsförfrågan";
    bool showHeader = (bool?)ViewData["showHeader"] ?? true;
    bool isBroker = (bool?)ViewData["isBroker"] ?? false;
    bool requestIsAnswered = (Model.Status != RequestStatus.InterpreterReplaced
         && Model.Status != RequestStatus.Created
         && Model.Status != RequestStatus.Received) && Model.RequestId > 0;
    bool requestIsDeclinedByBroker = (Model.Status == RequestStatus.DeclinedByBroker
        || Model.Status == RequestStatus.DeniedByTimeLimit);
    bool isReplacedRequest = Model.Status == RequestStatus.Received && Model.ReplacingOrderRequestId > 0;

    bool isCollapsible = (bool?)ViewData["isCollapsible"] ?? false;
    var divClass = isCollapsible ? "collapse" : "";
    var divId = (string)ViewData["id"] ?? "RequestSummary";
}
<section aria-label="@header">
    @if (showHeader)
    {
    @if (isCollapsible)
    {
    <a class="collapsible-section" data-toggle="collapse" data-target="#@divId">
        <h2><span class="glyphicon glyphicon-triangle-right" style="font-size:15px;margin-right:10px;"></span> @header</h2>
    </a>
    }
    else
    {
    <h1 class="normal-weight">@header</h1>
    }
    <hr />
    }
    <div id="@divId" class="@divClass">
        <div class="row">
            @if (Model.OrderModel.Status == OrderStatus.CancelledByCreator || Model.OrderModel.Status == OrderStatus.CancelledByBroker)
            {
            @if (!string.IsNullOrEmpty(Model.CancelMessage))
            {
            <div class="col-sm-4">
                <display-entry asp-for="CancelMessage" />
            </div>
            }
            }
            @if (Model.Status == RequestStatus.DeclinedByBroker || Model.Status == RequestStatus.DeniedByCreator)
            {
            @if (!string.IsNullOrEmpty(Model.DenyMessage))
            {
            <div class="col-sm-4">
                <display-entry asp-for="DenyMessage" />
            </div>
            }
            }
        </div>
        <div class="row">
            @if (!requestIsAnswered && !isBroker)
            {
            <div class="col-sm-4">
                <label>Tolk ej tillsatt</label>
            </div>
            }
            else
            {
            <div class="col-sm-4">
                <display-entry asp-for="Interpreter" asp-empty="Tolk ej tillsatt" />
                @if (Model.IsInterpreterVerified.HasValue)
                {
                if (Model.IsInterpreterVerified.Value)
                {
                <div class="system-action-info">
                    <span class="glyphicon glyphicon-ok"></span>
                    <span class="info-message">
                        @Model.InterpreterVerificationMessage
                    </span>
                </div>
                }
                else
                {
                <div class="warning-info-home">
                    <span class="glyphicon glyphicon-exclamation-sign"></span>
                    <span class="info-message">
                        @Model.InterpreterVerificationMessage
                    </span>
                    <span title="" class="form-entry-information glyphicon glyphicon-info-sign"
                          data-original-title="Efter kontroll mot Kammarkollegiets publicerade tolkregister att tilldelad tolk uppfyller kravställd kompetensnivå har ingen verifiering kunnat ske. Det kan bero på att tolkens auktorisation inte längre är giltig eller ännu inte publicerats. Det kan också bero på att tolken valt att inte synas i det officiellt publicerade tolkregistret."></span>
                </div>
                }
                }
            </div>
            }
            <div class="col-sm-8">
                <div class="row">
                    <div class="col-sm-6">
                        <display-entry asp-for="OrderModel.LanguageAndDialect" />
                    </div>
                    <div class="col-sm-6">
                        <display-entry asp-for="OrderModel.TimeRange" />
                    </div>
                </div>
                @if ((requestIsAnswered && !requestIsDeclinedByBroker) || isReplacedRequest)
                {
                <div class="row">
                    <div class="col-sm-6">
                        <display-entry asp-for="InterpreterCompetenceLevel" />
                    </div>
                    <div class="col-sm-6">
                        <display-entry asp-for="InterpreterLocation" label-override="Inställelsesätt enligt svar" />
                    </div>
                </div>
                }
            </div>
        </div>
        @if ((requestIsAnswered && !requestIsDeclinedByBroker) || isReplacedRequest)
        {
        <div class="row">
            @if (Model.RequirementAnswers.Any(r => r.IsRequired))
            {
            <div class="col-sm-4">
                <label>Tillkommande krav</label>
                <ul>
                    @foreach (var req in Model.RequirementAnswers.Where(r => r.IsRequired))
                    {
                    <li class="detail-text">
                        @EnumHelper.GetDescription(req.RequirementType): @req.Description
                        @if (!string.IsNullOrEmpty(req.Answer))
                        {
                        <br />
                        <span class="requirement-answer">- Svar: @req.Answer</span>
                        }
                    </li>
                    }
                </ul>
            </div>
            }
            @if (Model.RequirementAnswers.Any(r => !r.IsRequired))
            {
            @if (Model.RequirementAnswers.Any(r => !r.IsRequired && r.CanMeetRequirement))
            {
            <div class="col-sm-4">
                <label>Uppfyllda tillkommande önskemål</label>
                <ul>
                    @foreach (var req in Model.RequirementAnswers.Where(r => !r.IsRequired && r.CanMeetRequirement))
                    {
                    <li class="detail-text">
                        @EnumHelper.GetDescription(req.RequirementType): @req.Description
                        @if (!string.IsNullOrEmpty(req.Answer))
                        {
                        <br />
                        <span class="requirement-answer">- Svar: @req.Answer</span>
                        }
                    </li>
                    }
                </ul>
            </div>
            }
            @if (Model.RequirementAnswers.Any(r => !r.IsRequired && !r.CanMeetRequirement))
            {
            <div class="col-sm-4">
                <label>Ej uppfyllda tillkommande önskemål</label>
                <ul>
                    @foreach (var req in Model.RequirementAnswers.Where(r => !r.IsRequired && !r.CanMeetRequirement))
                    {
                    <li class="detail-text">
                        @EnumHelper.GetDescription(req.RequirementType): @req.Description
                        @if (!string.IsNullOrEmpty(req.Answer))
                        {
                        <br />
                        <span class="requirement-answer">- Svar: @req.Answer</span>
                        }
                    </li>
                    }
                </ul>
            </div>
            }
            }
        </div>
        }

        @if (Model.OrderModel.DisplayExpectedTravelcost && ((requestIsAnswered && !requestIsDeclinedByBroker) || isReplacedRequest))
        {
        <div class="row">
            <div class="col-sm-4">
                <display-entry asp-for="ExpectedTravelCosts" />
            </div>
            <div class="col-sm-4">
                <display-entry asp-for="ExpectedTravelCostInfo" />
            </div>
        </div>
        }
        <div class="row">
            @if (requestIsAnswered)
            {
            <div class="col-sm-4">
                <display-entry asp-for="AnsweredBy" />
            </div>
            }
            else if (!requestIsAnswered && !isBroker)
            {
            <div class="col-sm-4">
                <display-entry asp-for="ExpiresAt" label-override="Senaste svarstid" />
            </div>
            }
            <div class="col-sm-4">
                <display-entry asp-for="BrokerName" />
            </div>
            <div class="col-sm-4">
                <display-entry asp-for="BrokerOrganizationNumber" />
            </div>
        </div>
        @if (Model.AttachmentListModel?.DisplayFiles?.Count > 0)
        {
        <div class="row">
            <div class="col-sm-4">
                @await Html.PartialAsync("_FileList", Model.AttachmentListModel)
            </div>
        </div>
        }
    </div>
</section>