@model RequestModel
@using Tolk.BusinessLogic.Enums
@using Tolk.BusinessLogic.Utilities

@{
    string header = (string)ViewData["header"] ?? "Bokningsförfrågan";
    bool showHeader = (bool?)ViewData["showHeader"] ?? true;
    bool showRequestStatus = (bool?)ViewData["showRequestStatus"] ?? true;
    bool showLinks = (bool?)ViewData["showLinks"] ?? false;
    bool requestIsAnswered = (Model.Status != RequestStatus.InterpreterReplaced
         && Model.Status != RequestStatus.ToBeProcessedByBroker
         && Model.Status != RequestStatus.Received) && Model.RequestId > 0;
    bool requestIsDeclinedByBroker = (Model.Status == RequestStatus.DeclinedByBroker
        || Model.Status == RequestStatus.DeniedByTimeLimit);
    bool isReplacedRequest = Model.Status == RequestStatus.Received && Model.ReplacingOrderRequestId > 0;

    bool isCollapsible = (bool?)ViewData["isCollapsible"] ?? false;
    var divClass = isCollapsible ? "collapse" : "";
    var divId = (string)ViewData["id"] ?? "RequestSummary";
}

@if (showHeader)
{
    @if (isCollapsible)
    {
        <a class="collapsible-section" data-toggle="collapse" data-target="#@divId">
            <h3><span class="glyphicon glyphicon-triangle-right" style="font-size:15px;margin-right:10px;"></span> @header</h3>
        </a>
    }
    else
    {
        <h2 class="normal-weight">@header</h2>
    }
    <hr />
}
<div id="@divId" class="@divClass">
    <div class="row">
        <div class="row">
            <div class="col-sm-12">
                @if (showLinks)
                {
                    @if (Model.RequisitionId.HasValue)
                    {
                        <div class="col-sm-4">
                            <a href="@Url.Action("View", "Requisition", new { id = Model.RequisitionId })">Visa rekvisition</a>
                        </div>
                    }
                    @if (Model.ComplaintId.HasValue)
                    {
                        <div class="col-sm-4">
                            <a href="@Url.Action("View", "Complaint", new { id = Model.ComplaintId })">Visa reklamation</a>
                        </div>
                    }
                }
            </div>
        </div>
        @if (Model.OrderModel.Status == OrderStatus.CancelledByCreator || Model.OrderModel.Status == OrderStatus.CancelledByBroker)
        {
            @if (!string.IsNullOrEmpty(Model.CancelMessage))
            {
                <div class="col-sm-4">
                    <display-entry asp-for="CancelMessage" />
                </div>
            }
        }
        else if (Model.Status == RequestStatus.DeclinedByBroker || Model.Status == RequestStatus.DeniedByCreator)
        {
            @if (!string.IsNullOrEmpty(Model.DenyMessage))
            {
                <div class="col-sm-4">
                    <display-entry asp-for="DenyMessage" />
                </div>
            }
        }
    </div>
    <div class="row">
        <div class="col-sm-4">
            <display-entry asp-for="Interpreter" asp-empty="Tolk ej tillsatt" />
        </div>
        <div class="col-sm-8">
            <div class="row">
                <div class="col-sm-6">
                    <display-entry asp-for="OrderModel.LanguageAndDialect" />
                </div>
                <div class="col-sm-6">
                    <display-entry asp-for="OrderModel.TimeRange" />
                </div>
            </div>
            @if ((requestIsAnswered && !requestIsDeclinedByBroker) || isReplacedRequest)
            {
                <div class="row">
                    <div class="col-sm-6">
                        <display-entry asp-for="InterpreterCompetenceLevel" />
                    </div>
                    <div class="col-sm-6">
                        <display-entry asp-for="InterpreterLocation" label-override="Inställelsesätt enligt svar" />
                    </div>
                </div>
            }
        </div>
    </div>
    @if ((requestIsAnswered && !requestIsDeclinedByBroker) || isReplacedRequest)
    {
        <div class="row">
            @if (Model.RequirementAnswers.Any(r => r.IsRequired))
            {
                <div class="col-sm-4">
                    <label>Tillkommande krav</label>
                    <ul>
                        @foreach (var req in Model.RequirementAnswers.Where(r => r.IsRequired))
                        {
                            <li class="detail-text">
                                @EnumHelper.GetDescription(req.RequirementType): @req.Description
                                @if (!string.IsNullOrEmpty(req.Answer))
                                {
                                    <br />
                                    <span class="requirement-answer">- Svar: @req.Answer</span>
                                }
                            </li>
                        }
                    </ul>
                </div>
            }
            @if (Model.RequirementAnswers.Any(r => !r.IsRequired))
            {
                @if (Model.RequirementAnswers.Any(r => !r.IsRequired && r.CanMeetRequirement))
                {
                    <div class="col-sm-4">
                        <label>Uppfyllda tillkommande önskemål</label>
                        <ul>
                            @foreach (var req in Model.RequirementAnswers.Where(r => !r.IsRequired && r.CanMeetRequirement))
                            {
                                <li class="detail-text">
                                    @EnumHelper.GetDescription(req.RequirementType): @req.Description
                                    @if (!string.IsNullOrEmpty(req.Answer))
                                    {
                                        <br />
                                        <span class="requirement-answer">- Svar: @req.Answer</span>
                                    }
                                </li>
                            }
                        </ul>
                    </div>
                }
                @if (Model.RequirementAnswers.Any(r => !r.IsRequired && !r.CanMeetRequirement))
                {
                    <div class="col-sm-4">
                        <label>Ej uppfyllda tillkommande önskemål</label>
                        <ul>
                            @foreach (var req in Model.RequirementAnswers.Where(r => !r.IsRequired && !r.CanMeetRequirement))
                            {
                                <li class="detail-text">
                                    @EnumHelper.GetDescription(req.RequirementType): @req.Description
                                    @if (!string.IsNullOrEmpty(req.Answer))
                                    {
                                        <br />
                                        <span class="requirement-answer">- Svar: @req.Answer</span>
                                    }
                                </li>
                            }
                        </ul>
                    </div>
                }
            }
        </div>
    }
    @if (EnumHelper.Parse<TrueFalse>(Model.OrderModel.AllowMoreThanTwoHoursTravelTime.SelectedItem.Value) == TrueFalse.Yes 
        && ((requestIsAnswered && !requestIsDeclinedByBroker) || isReplacedRequest))
    {
        <div class="row">
            <div class="col-sm-8">
                <display-entry asp-for="ExpectedTravelCosts" />
            </div>
        </div>
    }
    <div class="row">
        @if (requestIsAnswered)
        {
            <div class="col-sm-4">
                <display-entry asp-for="AnsweredBy" />
            </div>
        }
        <div class="col-sm-4">
            <display-entry asp-for="BrokerName" />
        </div>
        <div class="col-sm-4">
            <display-entry asp-for="BrokerOrganizationNumber" />
        </div>
    </div>
    @if (Model.AttachmentListModel?.DisplayFiles?.Count > 0)
    {
        <div class="row">
            <div class="col-sm-4">
                @await Html.PartialAsync("_FileList", Model.AttachmentListModel)
            </div>
        </div>
    }
</div>