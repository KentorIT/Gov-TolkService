@model RequestModel
@using Tolk.BusinessLogic.Enums
@using Tolk.BusinessLogic.Utilities

@{
    bool requestIsAnswered = (Model.Status != RequestStatus.DeclinedByBroker
         && Model.Status != RequestStatus.InterpreterReplaced
         && Model.Status != RequestStatus.ToBeProcessedByBroker
         && Model.Status != RequestStatus.Received);
}

@if (Model.OrderModel.Status == OrderStatus.CancelledByCreator
  || Model.OrderModel.Status == OrderStatus.CancelledByCreatorConfirmed)
{
    <div class="row">
        <div class="col-sm-12">
            <span>@EnumHelper.GetDescription(typeof(OrderStatus), OrderStatus.CancelledByCreator)</span>
        </div>
        @if (!string.IsNullOrEmpty(Model.CancelMessage))
        {
            <div class="col-sm-12">
                <display-entry asp-for="CancelMessage" />
            </div>
        }
        @if (!string.IsNullOrEmpty(Model.DenyMessage))
        {
            <div class="col-sm-12">
                <display-entry asp-for="CancelMessage" />
            </div>
        }
    </div>
}
else if (Model.OrderModel.Status == OrderStatus.CancelledByBroker
    || Model.OrderModel.Status == OrderStatus.CancelledByBrokerConfirmed)
{
    <div class="row">
        <div class="col-sm-12">
            <span>@EnumHelper.GetDescription(typeof(OrderStatus), OrderStatus.CancelledByBroker)</span>
        </div>
        @if (!string.IsNullOrEmpty(Model.CancelMessage))
        {
            <div class="col-sm-12">
                <display-entry asp-for="CancelMessage" />
            </div>
        }
    </div>
}
<div class="row">
    <div class="col-sm-4">
        <display-entry asp-for="Interpreter" asp-empty="Tolk ej tillsatt" />
    </div>
    <div class="col-sm-8">
        <div class="row">
            <div class="col-sm-6">
                <display-entry asp-for="OrderModel.LanguageAndDialect" />
            </div>
            <div class="col-sm-6">
                <display-entry asp-for="OrderModel.TimeRange" />
            </div>
        </div>
        @if (requestIsAnswered)
        {
            <div class="row">
                <div class="col-sm-6">
                    <display-entry asp-for="InterpreterCompetenceLevel" />
                </div>
                <div class="col-sm-6">
                    <display-entry asp-for="InterpreterLocation" label-override="Inställelsesätt enligt svar" />
                </div>
            </div>
        }
    </div>
</div>
<div class="row">
    @if (Model.RequirementAnswers.Any(r => r.IsRequired))
    {
        <div class="col-sm-4">
            <label>Tillkommande krav</label>
            <ul>
                @foreach (var req in Model.RequirementAnswers.Where(r => r.IsRequired))
                {
                    <li class="detail-text">
                        @EnumHelper.GetDescription(req.RequirementType): @req.Description
                        @if (!string.IsNullOrEmpty(req.Answer))
                        {
                            <br />
                            <span class="requirement-answer">- Svar: @req.Answer</span>
                        }
                    </li>
                }
            </ul>
        </div>
    }
    @if (Model.RequirementAnswers.Any(r => !r.IsRequired))
    {
        @if (Model.RequirementAnswers.Any(r => !r.IsRequired && r.CanMeetRequirement))
        {
            <div class="col-sm-4">
                <label>Uppfyllda tillkommande önskemål</label>
                <ul>
                    @foreach (var req in Model.RequirementAnswers.Where(r => !r.IsRequired && r.CanMeetRequirement))
                    {
                        <li class="detail-text">
                            @EnumHelper.GetDescription(req.RequirementType): @req.Description
                            @if (!string.IsNullOrEmpty(req.Answer))
                            {
                                <br />
                                <span class="requirement-answer">- Svar: @req.Answer</span>
                            }
                        </li>
                    }
                </ul>
            </div>
        }
        @if (Model.RequirementAnswers.Any(r => !r.IsRequired && !r.CanMeetRequirement))
        {
            <div class="col-sm-4">
                <label>Ej uppfyllda tillkommande önskemål</label>
                <ul>
                    @foreach (var req in Model.RequirementAnswers.Where(r => !r.IsRequired && !r.CanMeetRequirement))
                    {
                        <li class="detail-text">
                            @EnumHelper.GetDescription(req.RequirementType): @req.Description
                            @if (!string.IsNullOrEmpty(req.Answer))
                            {
                                <br />
                                <span class="requirement-answer">- Svar: @req.Answer</span>
                            }
                        </li>
                    }
                </ul>
            </div>
        }
    }

</div>
@if (Model.OrderModel.AllowMoreThanTwoHoursTravelTime && requestIsAnswered)
{
    <div class="row">
        <div class="col-sm-4">
            <display-entry asp-for="ExpectedTravelCosts" />
        </div>
    </div>
}
<div class="row">
    @if (requestIsAnswered)
    {
        <div class="col-sm-4">
            <display-entry asp-for="AnsweredBy" />
        </div>
    }
    <div class="col-sm-4">
        <display-entry asp-for="BrokerName" />
    </div>
    <div class="col-sm-4">
        <display-entry asp-for="BrokerOrganizationNumber" />
    </div>
</div>
@if (Model.AttachmentListModel?.DisplayFiles?.Count > 0)
{
    <div class="row">
        <div class="col-sm-4">
            @await Html.PartialAsync("_FileList", Model.AttachmentListModel)
        </div>
    </div>
}
