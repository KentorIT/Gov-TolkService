@model OrderViewModel
@inject SelectListService SelectListService
@inject HelpLinkService HelpLinkService
@using Tolk.Web.Services
@using Tolk.BusinessLogic.Enums
@using Tolk.BusinessLogic.Utilities

@{
    // ViewData keys
    const string ShowCalculatedPriceKey = "OrderSummary_ShowCalculatedPrice";

    // ViewData values
    string header = (string)ViewData["header"] ?? "Bokningssammanfattning";
    bool ShowCalculatedPrice = ViewData.ContainsKey(ShowCalculatedPriceKey) ? (bool)ViewData[ShowCalculatedPriceKey] : false;

    // Collapsible values
    bool isCollapsible = (bool?)ViewData["isCollapsible"] ?? true;
    bool displayGeneralOrderInfo = (bool?)ViewData["displayGeneralOrderInfo"] ?? true;
    var divClass = isCollapsible ? "collapse" : "";
    var divId = (string)ViewData["id"] ?? "OrderSummary";
    var competenceInfo = Model.SpecificCompetenceLevelRequired ? "Krav på kompetensnivå tolk" : "Önskemål om kompetensnivå tolk";

    HelpLinkService.PageName = (string)ViewData["helplink"];
}
<section aria-label="Bokningsuppgifter">
    @if (isCollapsible)
    {
        <a class="collapsible-section" data-toggle="collapse" data-target="#@divId">
            <h2><span class="glyphicon glyphicon-triangle-right" style="font-size:15px;margin-right:10px;"></span> @header</h2>
        </a>
    }
    else
    {
        <h1 class="normal-weight">
            @header
            @if (!string.IsNullOrWhiteSpace(HelpLinkService.PageName))
            {
                @HelpLinkService.HeaderAnchor()
            }
        </h1>
    }

    <hr />
    <div id="@divId" class="@divClass">
        @if (displayGeneralOrderInfo)
        {
            <div class="row">
                <div class="col-sm-4">
                    <display-entry asp-for="LanguageAndDialect" />
                </div>
                <div class="col-sm-4">
                    <display-entry asp-for="RegionName" />
                </div>
                <div class="col-sm-4">
                    @if (Model.FlexibleTimeRange != null)
                    {
                        <display-entry asp-for="FlexibleTimeRange" />
                    }
                    else
                    {
                        <display-entry asp-for="TimeRange" />
                    }
                    @if (!string.IsNullOrEmpty(Model.DisplayMealBreakIncludedText))
                    {
                        <div class="detail-text mealbreak-info">
                            @Model.DisplayMealBreakIncludedText
                        </div>
                    }
                    @if (Model.LatestAnswerBy != null)
                    {
                        <display-entry asp-for="LatestAnswerBy" id="LatestAnswerBy" />
                    }
                </div>
            </div>
        }
        <div class="row">
            <div class="col-sm-4">
                @if (Model.RankedInterpreterLocationFirstAddressModel != null)
                {
                    <display-entry asp-for="RankedInterpreterLocationFirstAddressModel.InterpreterLocation" label-override="Inställelsesätt i första hand" />
                    @if (!string.IsNullOrEmpty(Model.RankedInterpreterLocationFirstAddressModel.OffSiteContactInformation))
                    {
                        <display-entry asp-for="RankedInterpreterLocationFirstAddressModel.OffSiteContactInformation" />
                    }
                    else
                    {
                        <display-entry asp-for="RankedInterpreterLocationFirstAddressModel.Address" />
                    }
                }
                else
                {
                    <label>Inställelsesätt i första hand</label>
                    <div class="no-value-info">Ej angivet</div>
                }
            </div>
            <div class="col-sm-4">
                @if (Model.RankedInterpreterLocationSecondAddressModel != null)
                {
                    <display-entry asp-for="RankedInterpreterLocationSecondAddressModel.InterpreterLocation" label-override="Inställelsesätt i andra hand" />
                    @if (!string.IsNullOrEmpty(Model.RankedInterpreterLocationSecondAddressModel.OffSiteContactInformation))
                    {
                        <display-entry asp-for="RankedInterpreterLocationSecondAddressModel.OffSiteContactInformation" />
                    }
                    else
                    {
                        <display-entry asp-for="RankedInterpreterLocationSecondAddressModel.Address" />
                    }
                }
                else
                {
                    <label>Inställelsesätt i andra hand</label>
                    <div class="no-value-info">Ej angivet</div>
                }
            </div>
            <div class="col-sm-4">
                @if (Model.RankedInterpreterLocationThirdAddressModel != null)
                {
                    <display-entry asp-for="RankedInterpreterLocationThirdAddressModel.InterpreterLocation" label-override="Inställelsesätt i tredje hand" />
                    @if (!string.IsNullOrEmpty(Model.RankedInterpreterLocationThirdAddressModel.OffSiteContactInformation))
                    {
                        <display-entry asp-for="RankedInterpreterLocationThirdAddressModel.OffSiteContactInformation" />
                    }
                    else
                    {
                        <display-entry asp-for="RankedInterpreterLocationThirdAddressModel.Address" />
                    }
                }
                else
                {
                    <label>Inställelsesätt i tredje hand</label>
                    <div class="no-value-info">Ej angivet</div>
                }
            </div>
        </div>     
        @if (Model.IsOnSiteOrOffSiteDesignatedLocationSelected && Model.AllowExceedingTravelCost != null && Model.AllowExceedingTravelCost.SelectedItem != null)
        {
            <div class="row">
                <div class="col-sm-12">
                    <display-entry asp-for="AllowExceedingTravelCost" />
                </div>
            </div>
        }
        <div class="row">
            <div class="col-sm-4">
                @if (Model.LanguageHasAuthorizedInterpreter.HasValue && !Model.LanguageHasAuthorizedInterpreter.Value)
                {
                    <label>Tolkens kompetensnivå</label>
                    <div class="no-value-info">
                        Det valda språket saknar auktoriserade och utbildade tolkar i Kammarkollegiets tolkregister. Det preliminära priset är beräknat för arvodesnivå Övrig tolk.
                    </div>
                }
                else if (Model.RequestedCompetenceLevels.Any())
                {

                    @if (Model.RequestedCompetenceLevelFirst.HasValue)
                    {
                        <display-entry asp-for="RequestedCompetenceLevelFirst" asp-value-prefix="1. " label-override="@competenceInfo" />
                    }
                    @if (Model.RequestedCompetenceLevelSecond.HasValue)
                    {
                        <display-entry asp-for="RequestedCompetenceLevelSecond" asp-value-prefix="2. " />
                    }
                }
                else
                {
                    <label>Tolkens kompetensnivå</label>
                    <div class="no-value-info">
                        Inget krav eller önskemål om specifik kompetensnivå har angetts i bokningsförfrågan.
                        Det preliminära priset är beräknat för arvodesnivå Auktoriserad tolk.
                        Slutlig arvodesnivå beror på tillsatt tolk enligt principen för kompetensprioritering.
                    </div>
                }
            </div>
            <div class="col-sm-4">
                <label>Tillkommande krav</label>
                @if (Model.OrderRequirements.Any(r => r.RequirementIsRequired && r.RequirementType != RequirementType.Dialect))
                {
                    <ul class="order-requirement-view-list">
                        @foreach (var req in Model.OrderRequirements.Where(r => r.RequirementIsRequired && r.RequirementType != RequirementType.Dialect))
                        {
                            <li class="detail-text">
                                @EnumHelper.GetDescription(req.RequirementType): @req.RequirementDescription
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <div class="no-value-info">Inga tillkommande krav är angivna</div>
                }
            </div>
            <div class="col-sm-4">
                <label>Tillkommande önskemål</label>
                @if (Model.OrderRequirements.Any(r => !r.RequirementIsRequired && r.RequirementType != RequirementType.Dialect))
                {
                    <ul class="order-requirement-view-list">
                        @foreach (var req in Model.OrderRequirements.Where(r => !r.RequirementIsRequired && r.RequirementType != RequirementType.Dialect))
                        {
                            <li class="detail-text">
                                @EnumHelper.GetDescription(req.RequirementType): @req.RequirementDescription
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <div class="no-value-info">Inga tillkommande önskemål är angivna</div>
                }
            </div>     
        </div>     
        <div class="row">
            <div class="col-sm-4">
                @if (Model.IsCreatorInterpreterUser != null)
                {
                    <display-entry asp-for="IsCreatorInterpreterUser" />
                }
                else
                {
                    <label>Är tolkanvändare samma person som bokar</label>
                    <div class="no-value-info">Ej angivet</div>
                }
            </div>
            <div class="col-sm-4">
                <display-entry asp-for="Description" />
            </div>
            <div class="col-sm-4">
                @if (Model.UseAttachments)
                {
                    @if (Model.AttachmentListModel?.DisplayFiles?.Count > 0)
                    {
                        @await Html.PartialAsync("_FileList", Model.AttachmentListModel)
                    }
                    else
                    {
                        <label>Bifogade filer</label>
                        <div class="no-value-info">Inga filer har bifogats</div>
                    }
                }
            </div>
        </div>
        @if (ShowCalculatedPrice && Model.OrderCalculatedPriceInformationModel != null)
        {
            <div class="row">
                <div class="col-sm-4">
                    @await Html.PartialAsync("_PriceInformationDisplay", Model.OrderCalculatedPriceInformationModel)
                </div>
            </div>
        }      
    </div>

</section>
