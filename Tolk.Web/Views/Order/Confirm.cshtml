@model OrderViewModel
@inject HelpLinkService HelpLinkService
@inject Tolk.BusinessLogic.Services.CacheService CacheService
@using Tolk.BusinessLogic.Enums
@using Tolk.BusinessLogic.Utilities
@using Tolk.Web.Services
@{
    ViewData["Title"] = $"Sammanfattning av bokning uppdragstyp - {Model.AssignmentType.GetDescription()}";
    ViewData["OrderSummary_ShowCalculatedPrice"] = true;
}

<div class="row">
    <div class="col-sm-12 text-center">
        <img class="progressbar" src="~/images/Step2_Order.PNG" alt="Ny bokning, steg 2 av 3, sammanfattning av bokning" />
    </div>
    <div class="col-sm-12">
        @if (Model.SeveralOccasions)
        {
            @await Html.PartialAsync("_GroupOrderSummary", Model, new ViewDataDictionary(ViewData) { { "isCollapsible", false }, { "header", ViewData["title"] }, { "helplink", "myndighet-sammanfattning-av-bokning/" } })
        }
        else
        {
            @await Html.PartialAsync("_OrderSummary", Model, new ViewDataDictionary(ViewData) { { "isCollapsible", false }, { "header", ViewData["title"] }, { "helplink", "myndighet-sammanfattning-av-bokning/" } })
        }
        @await Html.PartialAsync("_CustomerOrganizationInfo", Model, new ViewDataDictionary(ViewData) { { "isCollapsible", false }, { "IsOrderDetailView", true } })
        <div class="row">
            <div class="col-sm-4"></div>
            <div class="col-sm-8 important-info">
                Tidsramar efter mottagande av bokningsförfrågan:             
                @switch (CacheService.CurrentOrLatestFrameworkAgreement.FrameworkAgreementResponseRuleset)
                {
                    case FrameworkAgreementResponseRuleset.VersionOne:
                        @await Html.PartialAsync("_AgreementVersionOneTimeRules")
                        break;
                    case FrameworkAgreementResponseRuleset.VersionTwo:
                        @await Html.PartialAsync("_AgreementVersionTwoTimeRules")
                        break;
                    default:
                        break;
                }
            </div>
        </div>
        @if (!string.IsNullOrEmpty(Model.WarningOrderTimeInfo))
        {
            <div class="row warning-info-home">
                @if (Model.SeveralOccasions)
                {
                    <div role="alert" class="col-sm-12"><span class="glyphicon glyphicon-exclamation-sign"></span> @Model.WarningOrderTimeInfo</div>
                }
                else
                {
                    <div role="alert" class="col-sm-8"><span class="glyphicon glyphicon-exclamation-sign"></span> @Model.WarningOrderTimeInfo</div>
                    <div class="col-sm-4">
                        @if (Model.FlexibleTimeRange != null)
                        {
                            <display-entry asp-for="FlexibleTimeRange" />
                        }
                        else
                        {
                            <display-entry asp-for="TimeRange" />
                        }
                    </div>
                }
            </div>
            <br />
        }
        @if (!string.IsNullOrEmpty(Model.WarningOrderGroupCloseInTime))
        {
            <div class="row warning-info-home">
                <div role="alert" class="col-sm-12"><span class="glyphicon glyphicon-exclamation-sign"></span> @Model.WarningOrderGroupCloseInTime</div>
            </div>
            <br />
        }
        @if (!string.IsNullOrEmpty(Model.WarningOrderRequiredCompetenceInfo))
        {
            <div class="row warning-info-home">
                <div role="alert" class="col-sm-12"><span class="glyphicon glyphicon-exclamation-sign"></span> @Model.WarningOrderRequiredCompetenceInfo</div>
            </div>
        }
    </div>
</div>



