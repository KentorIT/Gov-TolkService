@model Tolk.Web.Models.OrderModel
@inject SelectListService SelectListService
@using Tolk.Web.Services
@using Tolk.BusinessLogic.Utilities
@using Tolk.BusinessLogic.Enums
@{
    ViewData["Title"] = "Avropsdetaljer";
    string editContactpersonButtonText = (Model.ChangeContactPersonId == null) ? "Lägg till kontaktperson" : "Ändra kontaktperson";
}

<div class="row">
    <div class="col-md-8">
        <h2>@ViewData["Title"]</h2>
        <display-entry asp-for="OrderNumber" />
        @if (Model.ReplacingOrderId.HasValue)
        {
            <span>
                (Ersätter <a href="@Url.Action("View",new { id = Model.ReplacingOrderId })">@Model.ReplacingOrderNumber</a>)
            </span>
        }
        @if (Model.ReplacedByOrderId.HasValue)
        {
            <span>
                (Ersatt av <a href="@Url.Action("View",new { id = Model.ReplacedByOrderId })">@Model.ReplacedByOrderNumber</a>)
            </span>
        }
        <display-entry asp-for="CreatedAt" />
        <display-entry asp-for="CreatedBy" />
        @if (!string.IsNullOrWhiteSpace(Model.ContactPerson))
        {
            <display-entry asp-for="ContactPerson" />
        }
        <button type="button" data-toggle="modal" data-target="#EditContactPerson" class="btn btn-warning">@editContactpersonButtonText</button>
        <br /><br />
        <display-entry asp-for="CustomerName" />
        <display-entry asp-for="UnitName" />
        <display-entry asp-for="CustomerReferenceNumber" />
        <display-entry asp-for="Status" />
        @if (!string.IsNullOrEmpty(Model.CancelMessage))
        {
            <display-entry asp-for="CancelMessage" />
        }
        <display-entry asp-for="RegionName" />
        <display-entry asp-for="LanguageName" />
        <display-entry asp-for="AssignmentType" />

        <label>Inställelsesätt</label>
        <display-entry asp-for="RankedInterpreterLocationFirstAddressModel.CompactInformation" />
        @if (Model.RankedInterpreterLocationSecondAddressModel != null)
        {
            <display-entry asp-for="RankedInterpreterLocationSecondAddressModel.CompactInformation" />
        }
        @if (Model.RankedInterpreterLocationThirdAddressModel != null)
        {
            <display-entry asp-for="RankedInterpreterLocationThirdAddressModel.CompactInformation" />
        }

        <display-entry asp-for="SpecificCompetenceLevelRequired" />
        @if (Model.RequestedCompetenceLevels.Count != 0)
        {
            @if (Model.SpecificCompetenceLevelRequired)
            {
                @if (Model.RequiredCompetenceLevelFirst.HasValue)
                {
                    <display-entry asp-for="RequiredCompetenceLevelFirst" />
                }
                @if (Model.RequiredCompetenceLevelSecond.HasValue)
                {
                    <display-entry asp-for="RequiredCompetenceLevelSecond" />
                }
            }
            else
            {
                @if (Model.RequestedCompetenceLevelFirst.HasValue)
                {
                    <display-entry asp-for="RequestedCompetenceLevelFirst" />
                }
                @if (Model.RequestedCompetenceLevelSecond.HasValue)
                {
                    <display-entry asp-for="RequestedCompetenceLevelSecond" />
                }
                @if (Model.RequestedCompetenceLevelThird.HasValue)
                {
                    <display-entry asp-for="RequestedCompetenceLevelThird" />
                }
            }
        }
        else
        {
            <span>Inga önskemål kring kompetensnivå</span> <br /><br />
        }
        <display-entry asp-for="TimeRange" />
        @if (Model.AttachmentListModel?.Files?.Count > 0)
        {
            @await Html.PartialAsync("_FileList", Model.AttachmentListModel)
        }
        <display-entry asp-for="Description" />
        <display-entry asp-for="BrokerName" />
        <display-entry asp-for="BrokerOrganizationNumber" />
        @if (Model.AllowMoreThanTwoHoursTravelTime && Model.ActiveRequestIsAnswered)
        {
            <display-entry asp-for="ExpectedTravelCosts" />
        }

        @if (Model.ActiveRequestPriceInformationModel != null)
        {
            Html.RenderPartial("_PriceInformationDisplay", Model.ActiveRequestPriceInformationModel);
        }
        @if (Model.OrderCalculatedPriceInformationModel != null)
        {
            Html.RenderPartial("_PriceInformationDisplay", Model.OrderCalculatedPriceInformationModel);
        }
        @if (Model.OrderRequirements.Any(r => r.RequirementIsRequired))
        {
            <label>@Html.DisplayNameFor(m => m.OrderRequirements) (krav)</label>
            <ul>
                @foreach (var req in Model.OrderRequirements.Where(r => r.RequirementIsRequired))
                {
                    <li>
                        @req.RequirementDescription (@EnumHelper.GetDescription(req.RequirementType))
                        @if (req.CanSatisfyRequirement.HasValue)
                        {
                            <br />
                            <span class="requirement-answer">Svar: @req.Answer (@(req.CanSatisfyRequirement.Value ? "uppfyller" : "uppfyller inte"))</span>
                        }
                    </li>
                }
            </ul>
        }
        @if (Model.OrderRequirements.Any(r => !r.RequirementIsRequired))
        {
            <label>@Html.DisplayNameFor(m => m.OrderRequirements) (önskemål)</label>
            <ul>
                @foreach (var req in Model.OrderRequirements.Where(r => !r.RequirementIsRequired))
                {
                    <li>
                        @req.RequirementDescription (@EnumHelper.GetDescription(req.RequirementType))
                        @if (req.CanSatisfyRequirement.HasValue)
                        {
                            <br />
                            <span class="requirement-answer">Svar: @req.Answer (@(req.CanSatisfyRequirement.Value ? "uppfyller" : "uppfyller inte"))</span>
                        }
                    </li>
                }
            </ul>
        }
        @if (Model.PreviousRequests.Any())
        {
            <label>Tidigare förmedlingars svar</label>
            <ul>
                @foreach (var request in Model.PreviousRequests)
                {
                    <li>
                        @request.BrokerName (@EnumHelper.GetDescription(request.Status))
                        @if (!string.IsNullOrWhiteSpace(request.DenyMessage))
                        {
                            <span> Orsak: @request.DenyMessage</span>
                        }
                    </li>
                }
            </ul>
        }
        @if (Model.ActiveRequestIsAnswered)
        {
            <display-entry asp-for="AnsweredBy" />
            <display-entry asp-for="InterpreterName" />
            <display-entry asp-for="InterpreterCompetenceLevel" />

            @if (!Model.RequestedCompetenceLevels.Contains(Model.InterpreterCompetenceLevel.Value))
            {
                <span class="italic">
                    Observera att tolkens kompetensnivå skiljer sig från önskad kompetensnivå<br /><br />
                </span>
            }
            <display-entry asp-for="InterpreterLocationAnswer" />
            @if (Model.RequestAttachmentListModel?.Files?.Count > 0)
            {
                @await Html.PartialAsync("_FileList", Model.RequestAttachmentListModel)
            }
            @if (Model.RequestStatus == RequestStatus.Accepted || Model.RequestStatus == RequestStatus.AcceptedNewInterpreterAppointed)
            {
                <form method="post" asp-action="Approve">
                    <input asp-for="OrderId" type="hidden" />
                    <input asp-for="RequestId" type="hidden" />
                    <button class="btn btn-default btn-success">Godkänn tillsättning</button>
                </form>
                if (Model.AllowDenial)
                {
                    <form method="post" class="deny-form" asp-action="Deny">
                        <input asp-for="OrderId" type="hidden" />
                        <input asp-for="RequestId" type="hidden" />
                        <input name="DenyMessage" type="hidden" />

                        <button class="btn deny-button btn-danger pull-right">Underkänn tillsättning</button>
                    </form>
                }
            }
        }
    </div>
</div>
@if (Model.AllowOrderCancellation)
{
    <div class="row">
        <div class="col-md-8">
            <form method="post" class="cancel-form" asp-action="Cancel">
                <input asp-for="OrderId" type="hidden" />
                <input name="CancelMessage" type="hidden" />
                <input name="AddReplacementOrder" type="hidden" value="false" />
                <button class="btn cancel-button btn-warning pull-right">Avboka uppdrag</button>
            </form>
        </div>
    </div>
}
@if (Model.AllowComplaintCreation)
{
    <a href="@Url.Action("Create", "Complaint", new { id = Model.RequestId })">Registrera reklamation</a>
}
@if (Model.ComplaintId.HasValue)
{
    <display-entry asp-for="ComplaintStatus" />
    <display-entry asp-for="ComplaintType" />
    <display-entry asp-for="ComplaintMessage" />
    <a href="@Url.Action("View", "Complaint", new { id = Model.ComplaintId })">Visa reklamation</a>
}
@if (Model.Status == OrderStatus.CancelledByBroker)
{
    @if (!string.IsNullOrWhiteSpace(Model.CancelMessage))
    {
        <display-entry asp-for="CancelMessage" />
    }
    <form method="post" asp-action="ConfirmCancellation">
        <input asp-for="RequestId" type="hidden" />
        <button class="btn btn-danger">Bekräfta avbokning</button>
    </form>
}

@await Html.PartialAsync("_EventLog", Model.EventLog)

<div id="cancelMessageDialog" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Meddelande vid avbokning</h4>
            </div>
            <div class="modal-body">
                <form class="do-not-check-dirty">
                    <form-entry asp-for="CancelMessage" />
                    @if (Model.ReplacingOrderId.HasValue)
                    {
                        <div>Det går inte att skapa ett ersättningsuppdrag för ett ersättningsuppdrag</div>
                    }
                    @if (Model.AllowReplacementOnCancel)
                    {
                        <form-entry asp-for="AddReplacementOrder" />
                    }
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default do-not-check-dirty pull-right" data-dismiss="modal">Avbryt</button>
                <button type="button" class="btn btn-warning send-message pull-left">Avboka</button>
            </div>
        </div>
    </div>
</div>

<div id="denyMessageDialog" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Meddelande vid underkännande</h4>
            </div>
            <div class="modal-body">
                <form class="do-not-check-dirty">
                    <form-entry asp-for="DenyMessage" />
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn do-not-check-dirty" data-dismiss="modal">Avbryt</button>
                <button type="button" class="btn btn-default send-message">Skicka</button>
            </div>
        </div>

    </div>
</div>

<div id="EditContactPerson" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">@editContactpersonButtonText</h4>
            </div>
            <div class="modal-body">
                <form class="do-not-check-dirty" method="post" asp-action="ChangeContactPerson">
                    @if (Model.ChangeContactPersonId != null)
                    {
                        <span class="italic">
                            För att ta bort kontaktperson så lämna valet --Välj-- och klicka på Ändra kontaktperson <br /><br />
                        </span>
                    }
                    <input asp-for="OrderId" type="hidden" />
                    <form-entry asp-for="ContactPersonId" type="select" asp-items="SelectListService.OtherContactPersons.Where(sl => sl.Value != Model.CreatedById.ToString() && sl.Value != Model.ChangeContactPersonId?.ToString()).ToList()" class="allow-clear" />
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-warning pull-left">@editContactpersonButtonText</button>
                        <button type="button" class="btn btn-default do-not-check-dirty pull-right" data-dismiss="modal">Avbryt</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <environment include="Development">
        <script src="~/js/Order/Process.js" asp-append-version="true"></script>
        <script src="~/js/Files.js" asp-append-version="true"></script>
    </environment>
    <environment exclude="Development">
        <script src="~/js/Order/Process.min.js" asp-append-version="true"></script>
        <script src="~/js/Files.min.js" asp-append-version="true"></script>
    </environment>
    @await Html.PartialAsync("_ValidationScriptsPartial")
}