@model Tolk.Web.Models.OrderModel
@inject SelectListService SelectListService
@using Tolk.Web.Services
@using Tolk.BusinessLogic.Utilities
@using Tolk.BusinessLogic.Entities
@{
    ViewData["Title"] = "Avropsdetaljer";
}

<div class="row">
    <div class="col-md-8">
        <h2>@ViewData["Title"]</h2>
        <display-entry asp-for="OrderNumber" />
        <display-entry asp-for="CreatedDate" />
        <display-entry asp-for="CreatedBy" />
        <display-entry asp-for="Status" />
        <display-entry asp-for="RegionName" />
        <display-entry asp-for="LanguageName" />
        <display-entry asp-for="CustomerReferenceNumber" />
        <display-entry asp-for="AssignmentType" />
        <display-entry asp-for="RequiredCompetenceLevel" />
        <display-entry asp-for="StartDateTime" />
        <display-entry asp-for="EndDateTime" />
        <display-entry asp-for="Description" />
        <display-entry asp-for="UnitName" />
        <display-entry asp-for="LocationStreet" />
        <display-entry asp-for="LocationZipCode" />
        <display-entry asp-for="LocationCity" />
        <display-entry asp-for="AllowMoreThanTwoHoursTravelTime" />
        <display-entry asp-for="BrokerName" />
        <display-entry asp-for="CalculatedPrice" />
        @if (Model.OrderRequirements.Any(r => r.RequirementIsRequired))
        {
            <label>@Html.DisplayNameFor(m => m.OrderRequirements) (krav)</label>
            <ul>
                @foreach (var req in Model.OrderRequirements.Where(r => r.RequirementIsRequired))
                {
                    <li>
                        @req.RequirementDescription (@EnumHelper.GetDescription(req.RequirementType))
                        @if (req.CanSatisfyRequirement.HasValue)
                        {
                            <br />
                            <span class="requirement-answer">Svar: @req.Answer (@(req.CanSatisfyRequirement.Value ? "uppfyller" : "uppfyller inte"))</span>
                        }
                    </li>
                }
            </ul>
        }
        @if (Model.OrderRequirements.Any(r => !r.RequirementIsRequired))
        {
            <label>@Html.DisplayNameFor(m => m.OrderRequirements) (önskemål)</label>
            <ul>
                @foreach (var req in Model.OrderRequirements.Where(r => !r.RequirementIsRequired))
                {
                    <li>
                        @req.RequirementDescription (@EnumHelper.GetDescription(req.RequirementType))
                        @if (req.CanSatisfyRequirement.HasValue)
                        {
                            <br />
                            <span class="requirement-answer">Svar: @req.Answer (@(req.CanSatisfyRequirement.Value ? "uppfyller" : "uppfyller inte"))</span>
                        }
                    </li>
                }
            </ul>
        }
        @if (Model.RequestStatus == RequestStatus.Accepted || Model.RequestStatus == RequestStatus.Approved)
        {
            <display-entry asp-for="InterpreterName" />
            <display-entry asp-for="ExpectedTravelCosts" />
            @if (Model.RequestStatus == RequestStatus.Accepted)
            {
                <form method="post" asp-action="Approve">
                    <input asp-for="OrderId" type="hidden" />
                    <input asp-for="RequestId" type="hidden" />
                    <button class="btn btn-default">Godkänn tillsättning</button>
                </form>
            }
        }
    </div>
</div>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")
}