@model Tolk.Web.Models.OrderModel
@inject SelectListService SelectListService
@using Tolk.Web.Services
@using Tolk.BusinessLogic.Utilities
@using Tolk.BusinessLogic.Enums
@{
    ViewData["Title"] = "Avropsdetaljer";
    ViewData["OrderSummary_UseFolds"] = true;
    ViewData["OrderSummary_IsDetailView"] = true;
    string editContactpersonButtonText = (Model.ChangeContactPersonId == null) ? "Lägg till kontaktperson" : "Ändra kontaktperson";
}

<div class="row">
    <div class="col-sm-12">
        @if (!string.IsNullOrEmpty(Model.CancelMessage))
        {
            <display-entry asp-for="CancelMessage" />
        }

        @if (Model.AllowMoreThanTwoHoursTravelTime && Model.ActiveRequestIsAnswered)
        {
            <display-entry asp-for="ExpectedTravelCosts" />
        }
        <div class="row">
            <div class="col-sm-3">
                <display-entry asp-for="AssignmentType" />
            </div>
            <div class="col-sm-3">
                <display-entry asp-for="Status" />
            </div>
            <div class="col-sm-3">
                <display-entry asp-for="OrderNumber" />
                @if (Model.ReplacingOrderId.HasValue)
                {
                    <span>
                        (Ersätter <a href="@Url.Action("View",new { id = Model.ReplacingOrderId })">@Model.ReplacingOrderNumber</a>)
                    </span>
                }
                @if (Model.ReplacedByOrderId.HasValue)
                {
                    <span>
                        (Ersatt av <a href="@Url.Action("View",new { id = Model.ReplacedByOrderId })">@Model.ReplacedByOrderNumber</a>)
                    </span>
                }
            </div>
            <div class="col-sm-3">
                <display-entry asp-for="CreatedAt" />
            </div>
        </div>
        <h2>Bokningsdetaljer</h2>
        <hr />
        @if (Model.Status != OrderStatus.NoBrokerAcceptedOrder)
        {
            @if (Model.ActiveRequestIsAnswered)
            {
                <div class="row">
                    <div class="col-sm-4">
                        <display-entry asp-for="AnsweredBy" />
                    </div>
                </div>
            }
            <div class="row">
                <div class="col-sm-4">
                    <display-entry asp-for="InterpreterName" asp-empty="Väntar tillsättning" />
                </div>
                @if (Model.ActiveRequestIsAnswered)
                {
                    <div class="col-sm-8">
                        <div class="row">
                            <div class="col-sm-6">
                                <display-entry asp-for="LanguageAndDialect" />
                            </div>
                            <div class="col-sm-6">
                                <display-entry asp-for="TimeRange" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-6">
                                <display-entry asp-for="InterpreterCompetenceLevel" />
                            </div>
                            <div class="col-sm-6">
                                <display-entry asp-for="InterpreterLocationAnswer" />
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div class="row">
                @if (Model.OrderRequirements.Any(r => r.RequirementIsRequired))
                {
                    <div class="col-sm-4">
                        <label>Tillkommande krav</label>
                        <ul>
                            @foreach (var req in Model.OrderRequirements.Where(r => r.RequirementIsRequired))
                            {
                                <li>
                                    @req.RequirementDescription (@EnumHelper.GetDescription(req.RequirementType))
                                    @if (req.CanSatisfyRequirement.HasValue)
                                    {
                                        <br />
                                        <span class="requirement-answer">Svar: @req.Answer (@(req.CanSatisfyRequirement.Value ? "uppfyller" : "uppfyller inte"))</span>
                                    }
                                </li>
                            }
                        </ul>
                    </div>
                }
                @if (Model.OrderRequirements.Any(r => !r.RequirementIsRequired))
                {
                    <div class="col-sm-4">
                        <label>Tillkommande önskemål</label>
                        <ul>
                            @foreach (var req in Model.OrderRequirements.Where(r => !r.RequirementIsRequired))
                            {
                                <li>
                                    @req.RequirementDescription (@EnumHelper.GetDescription(req.RequirementType))
                                    @if (req.CanSatisfyRequirement.HasValue)
                                    {
                                        <br />
                                        <span class="requirement-answer">Svar: @req.Answer (@(req.CanSatisfyRequirement.Value ? "uppfyller" : "uppfyller inte"))</span>
                                    }
                                </li>
                            }
                        </ul>
                    </div>
                }

                @if (Model.PreviousRequests.Any())
                {
                    <div class="col-sm-4">
                        <label>Tidigare förmedlingars svar</label>
                        <ul>
                            @foreach (var request in Model.PreviousRequests)
                            {
                                <li>
                                    @request.BrokerName (@EnumHelper.GetDescription(request.Status))
                                    @if (!string.IsNullOrWhiteSpace(request.DenyMessage))
                                    {
                                        <span> Orsak: @request.DenyMessage</span>
                                    }
                                </li>
                            }
                        </ul>
                    </div>
                }
            </div>
            <div class="row">
                <div class="col-sm-4">
                    <display-entry asp-for="BrokerName" />
                </div>
                <div class="col-sm-4">
                    <display-entry asp-for="BrokerOrganizationNumber" />
                </div>
                <div class="col-sm-4">
                    @if (Model.RequestAttachmentListModel?.Files?.Count > 0)
                    {
                        @await Html.PartialAsync("_FileList", Model.RequestAttachmentListModel)
                    }
                </div>
            </div>
        }
        else
        {
            <div class="row">
                <span>Samtliga tolkförmedlingar har avböjt förfrågan</span>
            </div>
        }
        <div class="row">
            @if (Model.ActiveRequestPriceInformationModel != null)
            {
                <div class="col-sm-6">
                    @await Html.PartialAsync("_PriceInformationDisplay", Model.ActiveRequestPriceInformationModel)
                </div>
            }
            @if (Model.OrderCalculatedPriceInformationModel != null)
            {
                <div class="col-sm-6">
                    @await Html.PartialAsync("_PriceInformationDisplay", Model.OrderCalculatedPriceInformationModel)
                </div>
            }
        </div>
        @await Html.PartialAsync("_OrderSummary", Model, ViewData)
    </div>
</div>
<div class="row">
    @if (Model.ActiveRequestIsAnswered)
    {
        <div class="row">
            <div class="col-sm-12">
                <div class="col-sm-12">
                    @if (!Model.RequestedCompetenceLevels.Contains(Model.InterpreterCompetenceLevel.Value))
                    {
                        <div class="important-info">
                            Observera att tolkens kompetensnivå skiljer sig från önskad kompetensnivå
                        </div>
                    }
                </div>
            </div>
        </div>
    }
    @if (Model.AllowOrderCancellation)
    {
        <div class="col-sm-4">
            <form method="post" class="cancel-form" asp-action="Cancel">
                <input asp-for="OrderId" type="hidden" />
                <input name="CancelMessage" type="hidden" />
                <input name="AddReplacementOrder" type="hidden" value="false" />
                <button class="btn cancel-button btn-warning btn-large">Avboka uppdrag</button>
            </form>
        </div>
    }
    @if (Model.ActiveRequestIsAnswered)
    {
        @if (Model.RequestStatus == RequestStatus.Accepted || Model.RequestStatus == RequestStatus.AcceptedNewInterpreterAppointed)
        {
            <div class="col-sm-4">
                @if (Model.AllowDenial)
                {
                    <form method="post" class="deny-form text-align-center" asp-action="Deny">
                        <input asp-for="OrderId" type="hidden" />
                        <input asp-for="RequestId" type="hidden" />
                        <input name="DenyMessage" type="hidden" />

                        <button class="btn deny-button btn-danger btn-large">Underkänn tillsättning</button>
                    </form>
                }
            </div>
            <div class="col-sm-4">
                <form method="post" asp-action="Approve">
                    <input asp-for="OrderId" type="hidden" />
                    <input asp-for="RequestId" type="hidden" />
                    <button class="btn btn-default btn-success btn-large pull-right">Godkänn tillsättning</button>
                </form>
            </div>
        }
    }

    @if (Model.AllowComplaintCreation)
    {
        <div class="col-sm-4">
            <a class="btn btn-danger btn-large" href="@Url.Action("Create", "Complaint", new { id = Model.RequestId })">Registrera reklamation</a>
        </div>
    }
    @if (Model.ComplaintId.HasValue)
    {
        <div class="col-sm-12">
            <div class="row">
                <div class="col-sm-4">
                    <display-entry asp-for="ComplaintStatus" />
                </div>
                <div class="col-sm-4">
                    <display-entry asp-for="ComplaintType" />
                </div>
                <div class="col-sm-4">
                    <display-entry asp-for="ComplaintMessage" />
                </div>
            </div>
            <div class="row">
                <div class="col-sm-4">
                    <a class="btn btn-warning btn-large" href="@Url.Action("View", "Complaint", new { id = Model.ComplaintId })">Visa reklamation</a>
                </div>
            </div>
        </div>
    }
    @if (Model.Status == OrderStatus.CancelledByBroker)
    {
        @if (!string.IsNullOrWhiteSpace(Model.CancelMessage))
        {
            <display-entry asp-for="CancelMessage" />
        }
        <div class="col-sm-4 pull-right">
            <form method="post" asp-action="ConfirmCancellation">
                <input asp-for="RequestId" type="hidden" />
                <button class="btn btn-danger pull-right">Bekräfta avbokning</button>
            </form>
        </div>
    }
</div>

@await Html.PartialAsync("_EventLog", Model.EventLog)

<div id="cancelMessageDialog" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Meddelande vid avbokning</h4>
            </div>
            <div class="modal-body">
                <form class="do-not-check-dirty">
                    <form-entry asp-for="CancelMessage" />
                    @if (Model.ReplacingOrderId.HasValue)
                    {
                        <div>Det går inte att skapa ett ersättningsuppdrag för ett ersättningsuppdrag</div>
                    }
                    @if (Model.AllowReplacementOnCancel)
                    {
                        <form-entry asp-for="AddReplacementOrder" />
                    }
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-warning do-not-check-dirty pull-left" data-dismiss="modal">Avbryt</button>
                <button type="button" class="btn btn-default send-message pull-right">Avboka</button>
            </div>
        </div>
    </div>
</div>

<div id="denyMessageDialog" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Meddelande vid underkännande</h4>
            </div>
            <div class="modal-body">
                <form class="do-not-check-dirty">
                    <form-entry asp-for="DenyMessage" />
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-warning do-not-check-dirty pull-left" data-dismiss="modal">Avbryt</button>
                <button type="button" class="btn btn-default send-message pull-right">Skicka</button>
            </div>
        </div>

    </div>
</div>
@if (Model.AllowEditContactPerson)
{
    <div id="EditContactPerson" class="modal fade" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">@editContactpersonButtonText</h4>
                </div>
                <div class="modal-body">
                    <form class="do-not-check-dirty" method="post" asp-action="ChangeContactPerson">
                        @if (Model.ChangeContactPersonId != null)
                        {
                            <div class="important-info">
                                För att ta bort kontaktperson så lämna valet --Välj-- och klicka på Ändra kontaktperson
                            </div>
                        }
                        <input asp-for="OrderId" type="hidden" />
                        <form-entry asp-for="ContactPersonId" type="select" asp-items="SelectListService.OtherContactPersons.Where(sl => sl.Value != Model.CreatedById.ToString() && sl.Value != Model.ChangeContactPersonId?.ToString()).ToList()" class="allow-clear" />
                        <div class="modal-footer">
                            <button type="submit" class="btn btn-default pull-right">@editContactpersonButtonText</button>
                            <button type="button" class="btn btn-warning do-not-check-dirty pull-left" data-dismiss="modal">Avbryt</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
}
@section Scripts {
    <environment include="Development">
        <script src="~/js/Order/Process.js" asp-append-version="true"></script>
        <script src="~/js/Files.js" asp-append-version="true"></script>
    </environment>
    <environment exclude="Development">
        <script src="~/js/Order/Process.min.js" asp-append-version="true"></script>
        <script src="~/js/Files.min.js" asp-append-version="true"></script>
    </environment>
    @await Html.PartialAsync("_ValidationScriptsPartial")
}