@model Tolk.Web.Models.OrderModel
@inject SelectListService SelectListService
@using Tolk.Web.Services
@using Tolk.BusinessLogic.Utilities
@using Tolk.BusinessLogic.Enums
@{
    ViewData["Title"] = "Bokning - " + Model.OrderNumber;
    string editContactpersonButtonText = (Model.ChangeContactPersonId == null) ? "Lägg till kontaktperson" : "Ändra kontaktperson";

    string requisitionPath = "Requisition/View/" + Model.ActiveRequest.RequisitionId ?? "#";
    string complaintPath = "Complaint/View/" + Model.ActiveRequest.ComplaintId ?? "#";
}

@await Html.PartialAsync("_OrderHeader", Model, new ViewDataDictionary(ViewData) { { "IsOrderDetailView", true } })
<ul class="nav nav-tabs nav-justified">
    <li class="active"><a data-toggle="tab" href="#order">Bokning</a></li>
    <li><a data-toggle="tab" href="#requisition" onclick="changeTab('@requisitionPath', '#requisition')">Rekvisition</a></li>
    <li><a data-toggle="tab" href="#complaint" onclick="changeTab('@complaintPath', '#complaint')">Reklamation</a></li>
</ul>
<div class="tab-content">
    <div id="order" class="tab-pane fade in active">
        <div class="row">
            <div class="col-sm-12">
                @if (Model.Status == OrderStatus.NoBrokerAcceptedOrder)
                {
                    <div class="row">
                        <div class="col-sm-12">
                            <span>Samtliga tolkförmedlingar har avböjt förfrågan</span>
                        </div>
                    </div>
                }
                else
                {
                    @await Html.PartialAsync("_RequestSummary", Model.ActiveRequest)
                }
                @if (Model.PreviousRequests.Any())
                {
                    <div class="row">
                        <div class="col-sm-12">
                            <label>Tidigare förmedlingars svar</label>
                            <ul>
                                @foreach (var request in Model.PreviousRequests)
                                {
                                    <li class="detail-text">
                                        @request.BrokerName (@EnumHelper.GetDescription(request.Status))
                                        @if (!string.IsNullOrWhiteSpace(request.DenyMessage))
                                        {
                                            <span> Orsak: @request.DenyMessage</span>
                                        }
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                }
                <div class="row">
                    @if (Model.ActiveRequestPriceInformationModel != null)
                    {
                        <div class="col-sm-6">
                            @await Html.PartialAsync("_PriceInformationDisplay", Model.ActiveRequestPriceInformationModel)
                        </div>
                    }
                    @if (Model.OrderCalculatedPriceInformationModel != null)
                    {
                        <div class="col-sm-6">
                            @await Html.PartialAsync("_PriceInformationDisplay", Model.OrderCalculatedPriceInformationModel)
                        </div>
                    }
                </div>
                <div class="row">
                    <div class="col-sm-12">
                        @await Html.PartialAsync("_OrderSummary", Model, ViewData)
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-12">
                        @await Html.PartialAsync("_CustomerOrganizationInfo", Model, new ViewDataDictionary(ViewData) { { "IsOrderDetailView", true } })
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            @if (Model.ActiveRequestIsAnswered && !Model.RequestedCompetenceLevels.Contains(Model.InterpreterCompetenceLevel.Value))
            {
                <div class="row">
                    <div class="col-sm-12">
                        <div class="col-sm-12">
                            <div class="important-info">
                                Observera att tolkens kompetensnivå skiljer sig från önskad kompetensnivå
                            </div>
                        </div>
                    </div>
                </div>
            }
            @if (Model.AllowOrderCancellation)
            {
                <div class="col-sm-4">
                    <form method="post" class="cancel-form" asp-action="Cancel">
                        <input asp-for="OrderId" type="hidden" />
                        <input name="CancelMessage" type="hidden" />
                        <input name="AddReplacementOrder" type="hidden" value="false" />
                        <button class="btn cancel-button btn-warning btn-large">Avboka uppdrag</button>
                    </form>
                </div>
            }
            @if (Model.ActiveRequestIsAnswered)
            {
                @if (Model.RequestStatus == RequestStatus.Accepted || Model.RequestStatus == RequestStatus.AcceptedNewInterpreterAppointed)
                {
                    <div class="col-sm-4">
                        @if (Model.AllowDenial)
                        {
                            <form method="post" class="deny-form text-align-center" asp-action="Deny">
                                <input asp-for="OrderId" type="hidden" />
                                <input asp-for="RequestId" type="hidden" />
                                <input name="DenyMessage" type="hidden" />

                                <button class="btn deny-button btn-danger btn-large">Underkänn tillsättning</button>
                            </form>
                        }
                    </div>
                    <div class="col-sm-4">
                        <form method="post" asp-action="Approve">
                            <input asp-for="OrderId" type="hidden" />
                            <input asp-for="RequestId" type="hidden" />
                            <button class="btn btn-default btn-success btn-large pull-right">Godkänn tillsättning</button>
                        </form>
                    </div>
                }
            }

            @if (Model.AllowComplaintCreation)
            {
                <div class="col-sm-4">
                    <a class="btn btn-danger btn-large" href="@Url.Action("Create", "Complaint", new { id = Model.RequestId })">Registrera reklamation</a>
                </div>
            }
            @if (Model.ComplaintId.HasValue)
            {
                <div class="col-sm-12">
                    @await Html.PartialAsync("_ComplaintSummary", Model.ActiveRequest)
                </div>
            }
            @if (Model.Status == OrderStatus.CancelledByBroker)
            {
                @if (!string.IsNullOrWhiteSpace(Model.CancelMessage))
                {
                    <display-entry asp-for="CancelMessage" />
                }
                <div class="col-sm-4 pull-right">
                    <form method="post" asp-action="ConfirmCancellation">
                        <input asp-for="RequestId" type="hidden" />
                        <button class="btn btn-danger pull-right">Bekräfta avbokning</button>
                    </form>
                </div>
            }
        </div>
        @await Html.PartialAsync("_EventLog", Model.EventLog, new ViewDataDictionary(ViewData) { { "header", "Bokningshändelser" } })
    </div>
    <div id="requisition" class="tab-pane fade">
    </div>
    <div id="complaint" class="tab-pane fade">
    </div>
</div>

<div id="cancelMessageDialog" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Meddelande vid avbokning</h4>
            </div>
            <div class="modal-body">
                <form class="do-not-check-dirty">
                    <form-entry asp-for="CancelMessage" />
                    @if (Model.ReplacingOrderId.HasValue)
                    {
                        <div>Det går inte att skapa ett ersättningsuppdrag för ett ersättningsuppdrag</div>
                    }
                    @if (Model.AllowReplacementOnCancel)
                    {
                        <form-entry asp-for="AddReplacementOrder" />
                    }
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-warning do-not-check-dirty pull-left" data-dismiss="modal">Avbryt</button>
                <button type="button" class="btn btn-default send-message pull-right">Avboka</button>
            </div>
        </div>
    </div>
</div>

<div id="denyMessageDialog" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Meddelande vid underkännande</h4>
            </div>
            <div class="modal-body">
                <form class="do-not-check-dirty">
                    <form-entry asp-for="DenyMessage" />
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-warning do-not-check-dirty pull-left" data-dismiss="modal">Avbryt</button>
                <button type="button" class="btn btn-default send-message pull-right">Skicka</button>
            </div>
        </div>

    </div>
</div>
@if (Model.AllowEditContactPerson)
{
    <div id="EditContactPerson" class="modal fade" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">@editContactpersonButtonText</h4>
                </div>
                <div class="modal-body">
                    <form class="do-not-check-dirty" method="post" asp-action="ChangeContactPerson">
                        @if (Model.ChangeContactPersonId != null)
                        {
                            <div class="important-info">
                                För att ta bort kontaktperson så lämna valet --Välj-- och klicka på Ändra kontaktperson
                            </div>
                        }
                        <input asp-for="OrderId" type="hidden" />
                        <form-entry asp-for="ContactPersonId" type="select" asp-items="SelectListService.OtherContactPersons.Where(sl => sl.Value != Model.CreatedById.ToString() && sl.Value != Model.ChangeContactPersonId?.ToString()).ToList()" class="allow-clear" />
                        <div class="modal-footer">
                            <button type="submit" class="btn btn-default pull-right">@editContactpersonButtonText</button>
                            <button type="button" class="btn btn-warning do-not-check-dirty pull-left" data-dismiss="modal">Avbryt</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
}
@section Scripts {
    <environment include="Development">
        <script src="~/js/Order/Process.js" asp-append-version="true"></script>
        <script src="~/js/Files.js" asp-append-version="true"></script>
    </environment>
    <environment exclude="Development">
        <script src="~/js/Order/Process.min.js" asp-append-version="true"></script>
        <script src="~/js/Files.min.js" asp-append-version="true"></script>
    </environment>
    @await Html.PartialAsync("_ValidationScriptsPartial")
}
