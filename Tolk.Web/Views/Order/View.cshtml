@model Tolk.Web.Models.OrderModel
@inject SelectListService SelectListService
@using Tolk.Web.Services
@using Tolk.BusinessLogic.Utilities
@using Tolk.BusinessLogic.Entities
@using Tolk.BusinessLogic.Enums
@{
    ViewData["Title"] = "Avropsdetaljer";
}

<div class="row">
    <div class="col-md-8">
        <h2>@ViewData["Title"]</h2>
        <display-entry asp-for="OrderNumber" />
        <display-entry asp-for="CreatedAt" />
        <display-entry asp-for="CreatedBy" />
        <display-entry asp-for="ContactPerson" />
        <display-entry asp-for="UnitName" />
        <display-entry asp-for="Status" />
        <display-entry asp-for="RegionName" />
        <display-entry asp-for="LanguageName" />
        <display-entry asp-for="CustomerReferenceNumber" />
        <display-entry asp-for="AssignmentType" />
        @if (!Model.UseRankedInterpreterLocation)
        {
            <display-entry asp-for="InterpreterLocation" />
        }
        else
        {
            <label>Önskat inställelsesätt, helst överst</label>
            <ul>
                @foreach (var location in Model.InterpreterLocations.OrderBy(l => l.Rank))
                {
                    <li>
                        @EnumHelper.GetDescription(location.InterpreterLocation)
                    </li>
                }
            </ul>
        }

        @if (Model.UseAddress)
        {
            <display-entry asp-for="LocationStreet" />
            <display-entry asp-for="LocationZipCode" />
            <display-entry asp-for="LocationCity" />
            <display-entry asp-for="AllowMoreThanTwoHoursTravelTime" />
        }
        @if (Model.UseOffSiteInformation)
        {
            <display-entry asp-for="OffSiteAssignmentType" />
            <display-entry asp-for="OffSiteContactInformation" />
        }
        <display-entry asp-for="RequiredCompetenceLevel" />
        <display-entry asp-for="StartAt" />
        <display-entry asp-for="EndAt" />
        <display-entry asp-for="Description" />
        <display-entry asp-for="BrokerName" />
        <display-entry asp-for="CalculatedPrice" />
        <display-entry asp-for="ExpectedTravelCosts" />
        @if (Model.OrderRequirements.Any(r => r.RequirementIsRequired))
        {
            <label>@Html.DisplayNameFor(m => m.OrderRequirements) (krav)</label>
            <ul>
                @foreach (var req in Model.OrderRequirements.Where(r => r.RequirementIsRequired))
                {
                    <li>
                        @req.RequirementDescription (@EnumHelper.GetDescription(req.RequirementType))
                        @if (req.CanSatisfyRequirement.HasValue)
                        {
                            <br />
                            <span class="requirement-answer">Svar: @req.Answer (@(req.CanSatisfyRequirement.Value ? "uppfyller" : "uppfyller inte"))</span>
                        }
                    </li>
                }
            </ul>
        }
        @if (Model.OrderRequirements.Any(r => !r.RequirementIsRequired))
        {
            <label>@Html.DisplayNameFor(m => m.OrderRequirements) (önskemål)</label>
            <ul>
                @foreach (var req in Model.OrderRequirements.Where(r => !r.RequirementIsRequired))
                {
                    <li>
                        @req.RequirementDescription (@EnumHelper.GetDescription(req.RequirementType))
                        @if (req.CanSatisfyRequirement.HasValue)
                        {
                            <br />
                            <span class="requirement-answer">Svar: @req.Answer (@(req.CanSatisfyRequirement.Value ? "uppfyller" : "uppfyller inte"))</span>
                        }
                    </li>
                }
            </ul>
        }
        @if (Model.PreviousRequests.Any())
        {
            <label>Tidigare förmedlingars svar</label>
            <ul>
                @foreach (var request in Model.PreviousRequests)
                {
                    <li>
                        @request.BrokerName (@EnumHelper.GetDescription(request.Status))
                        @if (request.DenyMessage != null)
                        {
                        <span> Orsak: @request.DenyMessage</span>
                        }
                    </li>
                }
            </ul>
        }
        @if (Model.RequestStatus == RequestStatus.Accepted || Model.RequestStatus == RequestStatus.Approved)
        {
            <display-entry asp-for="InterpreterName" />
            <display-entry asp-for="CompetenceLevel" />
            
            @if (Model.RequiredCompetenceLevel != Model.CompetenceLevel)
            {
            <span>
                Observera att den beställda kompetensnivån är @EnumHelper.GetDescription(Model.RequiredCompetenceLevel)<br /><br />
            </span>
            }
            <display-entry asp-for="InterpreterLocationAnswer" />
            @if (Model.RequestStatus == RequestStatus.Accepted)
            {
                <form method="post" asp-action="Approve">
                    <input asp-for="OrderId" type="hidden" />
                    <input asp-for="RequestId" type="hidden" />
                    <button class="btn btn-default">Godkänn tillsättning</button>
                </form>
                if (Model.AllowDenial)
                {
                    <form method="post" class="deny-form" asp-action="Deny">
                        <input asp-for="OrderId" type="hidden" />
                        <input asp-for="RequestId" type="hidden" />
                        <input asp-for="DenyMessage" type="hidden" />

                        <button class="btn deny-button btn-warning pull-right">Neka tillsättning</button>
                    </form>
                }
            }
        }
    </div>
    </div>
    <div id="denyMessageDialog" class="modal fade" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Meddelande vid nekande</h4>
                </div>
                <div class="modal-body">
                    <form>
                        <form-entry asp-for="DenyMessage" />
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn" data-dismiss="modal">Avbryt</button>
                    <button type="button" class="btn btn-default send-message">Skicka</button>
                </div>
            </div>

        </div>
    </div>

    @section Scripts {
        <environment include="Development">
            <script src="~/js/Order/Process.js" asp-append-version="true"></script>
        </environment>
        @*<environment exclude="Development">
                <script src="~/js/Order/process.min.js" asp-append-version="true"></script>
            </environment>*@
        @await Html.PartialAsync("_ValidationScriptsPartial")
    }