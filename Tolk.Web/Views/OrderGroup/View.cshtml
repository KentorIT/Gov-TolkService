@model OrderGroupModel
@inject HelpLinkService HelpLinkService
@using Tolk.Web.Services
@using Tolk.BusinessLogic;
@using Tolk.BusinessLogic.Utilities
@using Tolk.BusinessLogic.Enums

@{
    ViewData["Title"] = "Sammanhållen bokning " + Model.OrderGroupNumber;
    var hasPossibleChanges = Model.Status == OrderStatus.DeliveryAccepted || Model.Status == OrderStatus.ResponseAccepted || Model.Status == OrderStatus.Delivered;
}
<section aria-label="@ViewData["Title"]">
    <section aria-label="Bokningshuvud">
        <div class="row">
            <div class="col-sm-12 order-header-contract-info">
                Avrop från ramavtal för tolkförmedlingstjänster @Constants.ContractNumber
                <div class="help-sign-big">
                    @HelpLinkService.HeaderAnchor()
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-3">
                <div class="@Model.ColorClassName">
                    <display-entry asp-for="Status" />
                </div>
            </div>
            <div class="col-sm-3">
                <display-entry asp-for="AssignmentType" />
            </div>
            <div class="col-sm-3">
                <display-entry asp-for="OrderGroupNumber" />
            </div>
            <div class="col-sm-3">
                <display-entry asp-for="CreatedAt" />
            </div>
            @if (!string.IsNullOrWhiteSpace(Model.CustomerInformationModel.ReferenceNumber) || !string.IsNullOrWhiteSpace(Model.ActiveRequestGroup.BrokerReferenceNumber))
            {
                <div class="col-sm-12">

                    @if (!string.IsNullOrWhiteSpace(Model.CustomerInformationModel.ReferenceNumber))
                    {
                        <div class="gray-border-left">
                            Myndighetens ärendenummer: @Model.CustomerInformationModel.ReferenceNumber
                        </div>
                    }
                    @if (!string.IsNullOrWhiteSpace(Model.ActiveRequestGroup.BrokerReferenceNumber))
                    {
                        <div class="gray-border-left">
                            Förmedlingens bokningsnummer: @Model.ActiveRequestGroup.BrokerReferenceNumber
                        </div>
                    }
                </div>
            }
        </div>
    </section>
    <section aria-label="Sammanhållen bokning">
        <div class="row">
            <div class="col-sm-12">
                <h1>@ViewData["Title"]</h1>
                @if (hasPossibleChanges)
                {
                    <div class="row warning-info-home">
                        <div role="alert" class="col-sm-12"><span class="glyphicon glyphicon-exclamation-sign"></span> Det kan ha skett ändringar för enskilda tillfällen i den sammanhållna bokningen. För aktuell information om tillsatt tolk, myndighetens uppgifter, inställelsesätt m.m., se varje enskilt tillfälle.</div>
                    </div>
                }
                @if (Model.Status == OrderStatus.ResponseNotAnsweredByCreator)
                {
                    <div class="row">
                        <br />
                        <div class="col-sm-6">
                            @if (Model.ActiveRequestGroup.LatestAnswerTimeForCustomer.HasValue)
                            {
                                <span>Obesvarad tillsättning, tid för godkännande av resekostnader gick ut, sammanhållen bokningsförfrågan avslutad</span>
                            }
                            else
                            {
                                <span>Obesvarad tillsättning, tid för första uppdragsstart har passerat, sammanhållen bokningsförfrågan avslutad</span>
                            }
                        </div>
                        @if (Model.AllowResponseNotAnsweredConfirmation)
                        {
                            <div class="col-sm-6">
                                <form method="post" action="@Url.Action("ConfirmResponseNotAnswered", new { OrderGroupId = Model.OrderGroupId })" asp-antiforgery="true">
                                    <button class="btn btn-primary btn-large pull-right">Arkivera <span class="center-glyphicon glyphicon glyphicon-ok"></span></button>
                                </form>
                                <br />
                            </div>
                        }
                    </div>
                }
                @if (Model.Status == OrderStatus.NoBrokerAcceptedOrder || Model.Status == OrderStatus.NoDeadlineFromCustomer)
                {
                    <div class="row">
                        <br />
                        <div class="col-sm-6">
                            @if (Model.Status == OrderStatus.NoBrokerAcceptedOrder)
                            {
                                <span>Bokningsförfrågan fick ingen bekräftad tolktillsättning, bokningsförfrågan avslutad</span>
                            }
                            else if (Model.Status == OrderStatus.NoDeadlineFromCustomer)
                            {
                                <span>Ingen sista svarstid satt av myndighet, bokningsförfrågan avslutad</span>
                            }
                        </div>
                        @if (Model.AllowNoAnswerConfirmation)
                        {
                            <div class="col-sm-6">
                                <form method="post" action="@Url.Action("ConfirmNoAnswer", new { OrderGroupId = Model.OrderGroupId })" asp-antiforgery="true">
                                    <button class="btn btn-primary btn-large pull-right">Arkivera <span class="center-glyphicon glyphicon glyphicon-ok"></span></button>
                                </form>
                                <br />
                            </div>
                        }
                    </div>
                }
                else
                {
                    @await Html.PartialAsync("_GroupRequestSummary", Model.ActiveRequestGroup, new ViewDataDictionary(ViewData) { { "showHeader", false }, { "isBroker", false }, { "hasPossibleChanges", hasPossibleChanges } })
                }
                @if (Model.PreviousRequestGroups.Any())
                {
                    <div class="row">
                        <div class="col-sm-12">
                            <br />
                            <label>Tidigare förmedlingars svar</label>
                            <ul>
                                @foreach (var request in Model.PreviousRequestGroups)
                                {
                                    if (request.Status != RequestStatus.AwaitingDeadlineFromCustomer
                                        && request.Status != RequestStatus.NoDeadlineFromCustomer)
                                    {
                                        <li class="detail-text">
                                            @request.BrokerName (@EnumHelper.GetDescription(request.Status))
                                            @if (!string.IsNullOrWhiteSpace(request.DenyMessage))
                                            {
                                                <span> Orsak: @request.DenyMessage</span>
                                            }
                                        </li>
                                    }
                                }
                            </ul>
                        </div>
                    </div>
                }
                @await Html.PartialAsync("_OccasionList", Model.OccasionList)
                @await Html.PartialAsync("_GroupOrderSummary", Model, new ViewDataDictionary(ViewData) { { "isCollapsible", true }, { "displayGeneralOrderInfo", (Model.Status == OrderStatus.NoBrokerAcceptedOrder || Model.Status == OrderStatus.NoDeadlineFromCustomer) }, { "helplink", "myndighet-sammanfattning-sammanhallen-bokning/" }, { "hasPossibleChanges", hasPossibleChanges } })
                <div class="padding-top-10"></div>
                @await Html.PartialAsync("_GroupCustomerInfo", Model.CustomerInformationModel, new ViewDataDictionary(ViewData) { { "hasPossibleChanges", hasPossibleChanges } })

                @if (Model.AllowProcessing)
                {
                    if (Model.ActiveRequestGroup.HasExtraInterpreter)
                    {
                        <div class="col-sm-12 to-accept-info">
                            Myndighet har accepterat överskridande av gränsvärde för resor för detta uppdrag, dvs över @Model.TravelConditionHours tim restid eller @Model.TravelConditionKilometers km reslängd. Den bedömda resekostnaden (exkl. moms) som angivits av förmedlingen och ska godkännas är för första tolk <span class="bold">@Model.ExpectedTravelCosts SEK per tillfälle </span>och för extra tolk <span class="bold">@Model.ExtraInterpreterExpectedTravelCosts SEK per tillfälle</span>. Observera att detta gäller samtliga tillfällen och att det inte är möjligt att godkänna delar av bokningen.
                        </div>
                        <div class="col-sm-12">
                            <div class="col-sm-4">
                                <display-entry asp-for="ExpectedTravelCostInfo" label-override="Kommentar till bedömd resekostnad första tolk" />
                                <br />
                            </div>
                            <div class="col-sm-4">
                                <display-entry asp-for="ExtraInterpreterExpectedTravelCostInfo" label-override="Kommentar till bedömd resekostnad extra tolk" />
                                <br />
                            </div>
                            @if (Model.ActiveRequestGroup.LatestAnswerTimeForCustomer != null)
                            {
                                <div class="col-sm-4 red-border-left">
                                    <display-entry asp-for="ActiveRequestGroup.LatestAnswerTimeForCustomer"></display-entry>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="col-sm-12 to-accept-info">
                            Myndighet har accepterat överskridande av gränsvärde för resor för detta uppdrag, dvs över @Model.TravelConditionHours tim restid eller @Model.TravelConditionKilometers km reslängd. Den bedömda resekostnaden (exkl. moms) som angivits av förmedlingen och ska godkännas är <span class="bold">@Model.ExpectedTravelCosts SEK per tillfälle</span>. Observera att detta gäller samtliga tillfällen och att det inte är möjligt att godkänna delar av bokningen.
                        </div>
                        <div class="col-sm-12">
                            <div class="col-sm-8">
                                <display-entry asp-for="ExpectedTravelCostInfo" />
                                <br />
                            </div>
                            @if (Model.ActiveRequestGroup.LatestAnswerTimeForCustomer != null)
                            {
                                <div class="col-sm-4 red-border-left">
                                    <display-entry asp-for="ActiveRequestGroup.LatestAnswerTimeForCustomer"></display-entry>
                                </div>
                            }
                        </div>
                    }
                }
                @if (Model.AllowCancellation)
                {
                    <div class="col-sm-4">
                        <form method="post" class="cancel-form" action="@Url.Action("Cancel", "OrderGroup", new { OrderGroupId = Model.OrderGroupId })" asp-antiforgery="true">
                            <input name="CancelMessage" type="hidden" />
                            <button class="btn cancel-button btn-warning btn-large">Avboka samtliga tillfällen</button>
                            @HelpLinkService.ButtonHelpIcon("myndighet-avboka-sammanhallen")
                        </form>
                    </div>
                }
                @if (Model.AllowProcessing)
                {
                    <div class="col-sm-4">
                        <form method="post" class="deny-form text-align-center" action="@Url.Action("Deny", "OrderGroup", new { RequestGroupId = Model.RequestGroupId})" asp-antiforgery="true">
                            <input name="DenyMessage" type="hidden" />
                            <button class="btn deny-button btn-danger btn-large">Underkänn tillsättning</button>
                            @HelpLinkService.ButtonHelpIcon("myndighet-underkann-tillsattning")
                        </form>
                    </div>
                    <div class="col-sm-4 pull-right">
                        <form method="post" action="@Url.Action("Approve", "OrderGroup", new { RequestGroupId = Model.RequestGroupId})" asp-antiforgery="true">
                            <button class="btn btn-default btn-success btn-large">Godkänn tillsättning <span class="center-glyphicon glyphicon glyphicon-ok"></span></button>
                            @HelpLinkService.ButtonHelpIcon("myndighet-godkann-tillsattning")
                        </form>
                    </div>
                }
                @if (Model.AllowUpdateExpiry)
                {
                    <form method="post" action="@Url.Action("UpdateExpiry", "OrderGroup", new { OrderGroupId = Model.OrderGroupId})" asp-antiforgery="true">
                        <div class="row">
                            <div class="col-sm-8">
                                <input asp-for="StartAt" type="hidden" />
                                <form-entry asp-for="LatestAnswerBy"></form-entry>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-4">
                                <button id="updateLatestAnswerBy" class="btn btn-default btn-success btn-large">Uppdatera svarstid <span class="center-glyphicon glyphicon glyphicon-triangle-right"></span></button>
                            </div>
                        </div>
                    </form>
                }

            </div>
        </div>
    </section>

    <div id="cancelMessageDialog" class="modal fade" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h2 class="modal-title">Meddelande vid avbokning</h2>
                </div>
                <div class="modal-body">
                    <form class="do-not-check-dirty">
                        <div class="important-info">Observera att samtliga tillfällen för den sammanhållna bokningen kommer att avbokas</div>
                        <form-entry asp-for="CancelMessage" />
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-warning do-not-check-dirty pull-left" data-dismiss="modal">Avbryt</button>
                    <button type="button" class="btn btn-default send-message pull-right">Avboka</button>
                </div>
            </div>
        </div>
    </div>

    <div id="denyMessageDialog" class="modal fade" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h2 class="modal-title">Meddelande vid underkännande</h2>
                </div>
                <div class="modal-body">
                    <form class="do-not-check-dirty">
                        <form-entry asp-for="DenyMessage" />
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-warning do-not-check-dirty pull-left" data-dismiss="modal">Avbryt</button>
                    <button type="button" class="btn btn-default send-message pull-right">Skicka</button>
                </div>
            </div>
        </div>
    </div>
</section>


@section Scripts {
    <environment include="Development">
        <script src="~/js/Order/SetExpiry.js" asp-append-version="true"></script>
        <script src="~/js/OrderGroup/View.js" asp-append-version="true"></script>
        <script src="~/js/Files.js" asp-append-version="true"></script>
    </environment>
    <environment exclude="Development">
        <script src="~/js/Order/SetExpiry.min.js" asp-append-version="true"></script>
        <script src="~/js/OrderGroup/View.min.js" asp-append-version="true"></script>
        <script src="~/js/Files.min.js" asp-append-version="true"></script>
    </environment>
    @await Html.PartialAsync("_ValidationScriptsPartial")
}
