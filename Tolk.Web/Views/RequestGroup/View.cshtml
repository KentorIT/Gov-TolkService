@using Tolk.BusinessLogic.Enums;
@model RequestGroupViewModel
@{
    ViewData["Title"] = "Sammanhållen bokning - " + Model.OrderGroupNumber;
    var hasPossibleChanges = Model.Status == RequestStatus.Approved || Model.Status == RequestStatus.Delivered;
}
<section aria-label="@ViewData["Title"]">
    <div class="row">
        <div class="col-sm-12">
            @await Html.PartialAsync("_OrderGroupHeader", Model)
            <h1>@ViewData["Title"]</h1>
            @if (Model.AllowConfirmationDenial)
            {
                <br />
                <form method="post" action="@Url.Action("ConfirmDenial", "RequestGroup", new { RequestGroupId = Model.RequestGroupId })" asp-antiforgery="true">
                    <button class="btn btn-primary btn-large pull-right">Arkivera <span class="center-glyphicon glyphicon glyphicon-ok"></span></button>
                </form>
                <br /><br />
            }
            @if (Model.AllowConfirmNoAnswer)
            {
                <br />
                <form method="post" action="@Url.Action("ConfirmNoAnswer", "RequestGroup", new { RequestGroupId = Model.RequestGroupId })" asp-antiforgery="true">
                    <button class="btn btn-primary btn-large pull-right">Arkivera <span class="center-glyphicon glyphicon glyphicon-ok"></span></button>
                </form>
                <br /><br />
            }
            @if (hasPossibleChanges)
            {
                <div class="row warning-info-home">
                    <div role="alert" class="col-sm-12"><span class="glyphicon glyphicon-exclamation-sign"></span> Det kan ha skett ändringar för enskilda tillfällen i den sammanhållna bokningen. För aktuell information om tillsatt tolk, myndighetens uppgifter, inställelsesätt mm, se varje enskilt tillfälle.</div>
                </div>
            }
            @await Html.PartialAsync("_GroupRequestSummary", Model, new ViewDataDictionary(ViewData) { { "showHeader", false }, { "isBroker", true }, { "hasPossibleChanges", hasPossibleChanges } })
            @await Html.PartialAsync("_OccasionList", Model.OccasionList)
            @await Html.PartialAsync("_GroupOrderSummary", Model.OrderGroupModel, new ViewDataDictionary(ViewData) { { "isCollapsible", true }, { "displayGeneralOrderInfo", false }, { "helplink", "formedling-sammanfattning-sammanhallen-bokning/" }, { "hasPossibleChanges", hasPossibleChanges } })
            <div class="padding-top-10"></div>
            @await Html.PartialAsync("_GroupCustomerInfo", Model.CustomerInformationModel, new ViewDataDictionary(ViewData) { { "hasPossibleChanges", hasPossibleChanges } })
        </div>
    </div>
</section>
@section Scripts {
    <environment include="Development">
        <script src="~/js/Files.js" asp-append-version="true"></script>
    </environment>
    <environment exclude="Development">
        <script src="~/js/Files.min.js" asp-append-version="true"></script>
    </environment>
    @await Html.PartialAsync("_ValidationScriptsPartial")
}