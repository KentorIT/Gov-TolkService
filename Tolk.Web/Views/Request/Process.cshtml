@model Tolk.Web.Models.RequestModel
@inject SelectListService SelectListService
@using Tolk.Web.Services
@using Tolk.BusinessLogic.Utilities
@using Tolk.BusinessLogic.Enums
@{
    ViewData["Title"] = Model.Status == RequestStatus.AcceptedNewInterpreterAppointed ? "Byt ut tolk" : "Svara på bokningsförfrågan";
}
<div class="row">
    <div class="col-sm-12">
        @await Html.PartialAsync("_OrderHeader", Model.OrderModel)

        @await Html.PartialAsync("_OrderSummary", Model.OrderModel, new ViewDataDictionary(ViewData) { { "isCollapsible", false }, { "header", ViewData["title"] } })

        <div class="row">
            <div class="col-sm-4">
                @if (Model.OrderCalculatedPriceInformationModel != null)
                {
                    Html.RenderPartial("_PriceInformationDisplay", Model.OrderCalculatedPriceInformationModel);
                }
            </div>
            <div class="col-sm-4">
                @if (Model.Status == RequestStatus.AcceptedNewInterpreterAppointed)
                {
                    <display-entry asp-for="Interpreter" />
                }
            </div>
            <div class="col-sm-4">
                <display-entry asp-for="ExpiresAt" />
            </div>
        </div>
        <form method="post" asp-action="Accept">
            <input asp-for="RequestId" type="hidden" />

            @if (Model.OrderModel.ReplacingOrderId.HasValue && Model.Status != RequestStatus.AcceptedNewInterpreterAppointed)
            {
                @await Html.PartialAsync("_RequestSummary", Model, new ViewDataDictionary(ViewData) { { "isCollapsible", false }, { "header", "Svar på ersatt bokningsförfrågan" } })
            }
            else
            {
                <div class="row">
                    <div class="col-sm-4">
                        <form-entry asp-for="InterpreterId" type="select" asp-items="SelectListService.GetInterpreters(Model.BrokerId)" />
                        <form-entry asp-for="NewInterpreterEmail" class="collapse" id="new-interpreter" />
                    </div>
                    <div class="col-sm-4">
                        @if (Model.OrderModel.SpecificCompetenceLevelRequired)
                        {
                            <form-entry asp-for="InterpreterCompetenceLevel" type="select" asp-items="EnumHelper.GetAllDescriptions(Model.OrderModel.RequestedCompetenceLevels).Select(e => new SelectListItem() { Text = e.Description, Value = e.Value.ToString() })" />
                        }
                        else
                        {
                            <form-entry asp-for="InterpreterCompetenceLevel" type="select" asp-items="SelectListService.GetCompetenceLevels(CompetenceAndSpecialistLevel.OtherInterpreter)" />
                        }
                    </div>
                    <div class="col-sm-4">
                        @if (Model.InterpreterLocation.HasValue)
                        {
                            <input asp-for="InterpreterLocation" type="hidden" />
                        }
                        else
                        {
                            <form-entry asp-for="InterpreterLocation" type="select" asp-items="EnumHelper.GetAllDescriptions(Model.OrderModel.RankedInterpreterLocations).Select(e => new SelectListItem() { Text = e.Description, Value = e.Value.ToString() })" />
                        }
                    </div>
                </div>
            }
            <input asp-for="Status" type="hidden" />
            @if ((Model.InterpreterLocation == InterpreterLocation.OffSiteDesignatedLocation || Model.InterpreterLocation == InterpreterLocation.OnSite) && Model.OrderModel.AllowMoreThanTwoHoursTravelTime)
            {
                //This should be visible if a specified  InterpreterLocation is set and not being OffSite.
                <div class="important-info">Om bedömd restid och/eller resväg överstiger gränsvärdena så fyll i resekostnad nedan, annars lämna 0 i fältet.</div>
                <form-entry asp-for="ExpectedTravelCosts" />
            }
            else if (Model.OrderModel.AllowMoreThanTwoHoursTravelTime)
            {
                // If it is set to Offsite it is not needed at all
                // It should be hidden and possible to show if InterpreterLocation can be selected, and it is set to any other than OffSite
                <div class="collapse" id="set-expected-travel-costs">
                    <div class="important-info"> Om bedömd restid och/eller resväg överstiger gränsvärdena så fyll i resekostnad nedan, annars lämna 0 i fältet.</div>
                    <form-entry asp-for="ExpectedTravelCosts" />

                </div>
            }
            <div class="row">
                @if (!Model.OrderModel.ReplacingOrderId.HasValue)
                {

                    <div class="col-sm-4">
                        <label>Tillkommande krav</label><br />
                        @if (Model.RequiredRequirementAnswers.Any())
                        {
                            @for (var i = 0; i < Model.RequiredRequirementAnswers.Count(); ++i)
                            {
                                <div class="border detail-text">
                                    <span class="detail-text">@Model.RequiredRequirementAnswers[i].RequirementType.GetDescription(): @Model.RequiredRequirementAnswers[i].Description</span>
                                    <input asp-for="RequiredRequirementAnswers[i].OrderRequirementId" type="hidden" />
                                    <form-entry asp-for="RequiredRequirementAnswers[i].CanMeetRequirement" label-override="Kan uppfylla kravet"/>
                                    <form-entry asp-for="RequiredRequirementAnswers[i].Answer" />
                                    <input asp-for="RequiredRequirementAnswers[i].IsRequired" type="hidden" />
                                </div>
                            }
                        }
                        else
                        {
                            <span class="no-value-info">Inga tillkomande krav är angivna</span>
                        }
                    </div>
                    <div class="col-sm-4">
                        <label>Tillkommande önskemål</label><br />
                        @if (Model.DesiredRequirementAnswers.Any())
                        {
                            @for (var i = 0; i < Model.DesiredRequirementAnswers.Count(); ++i)
                            {
                                <div class="border">
                                    <span class="detail-text">@Model.DesiredRequirementAnswers[i].RequirementType.GetDescription(): @Model.DesiredRequirementAnswers[i].Description</span>
                                    <input asp-for="DesiredRequirementAnswers[i].OrderRequirementId" type="hidden" />
                                    <form-entry asp-for="DesiredRequirementAnswers[i].CanMeetRequirement" label-override="Kan uppfylla önskemålet" />
                                    <form-entry asp-for="DesiredRequirementAnswers[i].Answer" />
                                    <input asp-for="DesiredRequirementAnswers[i].IsRequired" type="hidden" />
                                </div>

                            }
                        }
                        else
                        {
                            <span class="no-value-info">Inga tillkomande önskemål är angivna</span>
                        }
                    </div>
                    <div class="col-sm-4">
                        <input asp-for="CombinedMaxSizeAttachments" type="hidden" />
                        @await Html.PartialAsync("_FileList", new AttachmentListModel { AllowDelete = true, AllowDownload = true, AllowUpload = true, Files = Model.Files, Description = "Möjlighet att bifoga filer som kan vara relevanta för myndigheten", Title = string.Empty })
                        <br />
                        <br />
                    </div>

                }
            </div>

            @await Html.PartialAsync("_CustomerOrganizationInfo", Model.OrderModel)
            @if (Model.Status == RequestStatus.AcceptedNewInterpreterAppointed)
            {
                <div class="row">
                    <div class="col-sm-6">
                        <a class="btn btn-large btn-warning do-not-check-dirty pull-left" href="@Url.Action("View", new { id = Model.RequestId })">Avbryt <span class="btn-remove-times">&times;</span></a>
                    </div>
                    <div class="col-sm-6">
                        <button id="Accept" class="btn btn-large btn-primary btn-success pull-right" data-set-status="Accepted">Byt tolk</button>
                    </div>
                </div>
            }
            else
            {
                @if (Model.OrderModel.ReplacingOrderId.HasValue)
                {
                    <div class="important-info">Observera att detta uppdrag ersätter tidigare uppdrag @Model.OrderModel.ReplacingOrderNumber som avbokats med mindre än 48 timmar kvar. <br /></div>
                }
                <div class="row">
                    <div class="col-xs-4">
                        <a class="btn btn-large btn-warning do-not-check-dirty pull-left" asp-action="List" asp-route-Status="ToBeProcessedByBroker">Avbryt <span class="btn-remove-times">&times;</span></a>
                    </div>
                    <div class="col-xs-4 text-align-center">
                        <button type="button" data-toggle="modal" data-target="#denyMessageDialog" class="btn btn-large btn-danger">Tacka nej till bokning</button>
                    </div>
                    <div class="col-xs-4">
                        <button id="Accept" class="btn btn-large btn-primary btn-success pull-right" data-set-status="Accepted">Acceptera <span class="center-glyphicon glyphicon glyphicon-ok"></span></button>
                    </div>
                </div>
            }
        </form>
        <span id="basefile" class="d-none">
            <input asp-for="Files[0].Id" type="hidden" />
        </span>
    </div>

    @Html.Partial("_UploadFileDialog")
    <div id="denyMessageDialog" class="modal fade" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Tacka nej till bokning</h4>
                </div>
                <div class="modal-body">
                    <form method="post" asp-action="Decline" class="do-not-check-dirty">
                        <input asp-for="RequestId" type="hidden" />
                        <form-entry asp-for="DenyMessage" />
                        <button type="submit" class="btn btn-default pull-right">Tacka nej</button>
                        <button type="button" class="btn btn-warning pull-left do-not-check-dirty" data-dismiss="modal">Avbryt</button>
                        <br /><br />
                    </form>
                </div>
                <div class="modal-footer">
                </div>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <environment include="Development">
        <script src="~/js/Request/Process.js" asp-append-version="true"></script>
        <script src="~/js/Files.js" asp-append-version="true"></script>
    </environment>
    <environment exclude="Development">
        <script src="~/js/Request/Process.min.js" asp-append-version="true"></script>
        <script src="~/js/Files.min.js" asp-append-version="true"></script>
    </environment>
    @await Html.PartialAsync("_ValidationScriptsPartial")
}
