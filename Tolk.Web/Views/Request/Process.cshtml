@model Tolk.Web.Models.RequestModel
@inject SelectListService SelectListService
@using Tolk.Web.Services
@using Tolk.BusinessLogic.Utilities
@using Tolk.BusinessLogic.Enums
@using Tolk.BusinessLogic.Services
@{
    ViewData["Title"] = "Svara på avrop";
}

<div class="row">
    <div class="col-md-8">
        <h2>@ViewData["Title"]</h2>
        <display-entry asp-for="OrderModel.OrderNumber" />
        @if (Model.OrderModel.ReplacingOrderId.HasValue)
        {
            <span>
                (Ersätter <a href="@Url.Action("View", new { id = Model.ReplacingOrderRequestId })">@Model.OrderModel.ReplacingOrderNumber</a>)<br /><br />
            </span>
        }
        <display-entry asp-for="OrderModel.CustomerCompactInfo" />
        <display-entry asp-for="OrderModel.CreatedAt" />
        <display-entry asp-for="OrderModel.CreatedBy" />
        <display-entry asp-for="OrderModel.ContactPerson" />
        <display-entry asp-for="OrderModel.RegionName" />
        <display-entry asp-for="OrderModel.LanguageName" />
        <display-entry asp-for="OrderModel.AssignmentType" />
        <input asp-for="OrderModel.SpecificCompetenceLevelRequired" type="hidden" />
        <display-entry asp-for="OrderModel.SpecificCompetenceLevelRequired" />
        @if (Model.OrderModel.RequestedCompetenceLevels.Count != 0)
        {
            @if (Model.OrderModel.SpecificCompetenceLevelRequired)
            {
                @if (Model.OrderModel.RequiredCompetenceLevelFirst.HasValue)
                {
                    <input asp-for="OrderModel.RequiredCompetenceLevelFirst" type="hidden" />
                    <display-entry asp-for="OrderModel.RequiredCompetenceLevelFirst" />
                }
                @if (Model.OrderModel.RequiredCompetenceLevelSecond.HasValue)
                {
                    <input asp-for="OrderModel.RequiredCompetenceLevelSecond" type="hidden" />
                    <display-entry asp-for="OrderModel.RequiredCompetenceLevelSecond" />
                }
            }
            else
            {
                @if (Model.OrderModel.RequestedCompetenceLevelFirst.HasValue)
                {
                    <input asp-for="OrderModel.RequestedCompetenceLevelFirst" type="hidden" />
                    <display-entry asp-for="OrderModel.RequestedCompetenceLevelFirst" />
                }
                @if (Model.OrderModel.RequestedCompetenceLevelSecond.HasValue)
                {
                    <input asp-for="OrderModel.RequestedCompetenceLevelSecond" type="hidden" />
                    <display-entry asp-for="OrderModel.RequestedCompetenceLevelSecond" />
                }
                @if (Model.OrderModel.RequestedCompetenceLevelThird.HasValue)
                {
                    <input asp-for="OrderModel.RequestedCompetenceLevelThird" type="hidden" />
                    <display-entry asp-for="OrderModel.RequestedCompetenceLevelThird" />
                }
            }
        }
        else
        {
            <span>Inga önskemål kring kompetensnivå</span> <br /><br />
        }
        <display-entry asp-for="OrderModel.TimeRange" />
        @if (Model.OrderModel.AttachmentListModel?.Files?.Count > 0)
        {
            @await Html.PartialAsync("_FileList", Model.OrderModel.AttachmentListModel)
        }
        @if (Model.OrderCalculatedPriceInformationModel != null)
        {
            Html.RenderPartial("_PriceInformationDisplay", Model.OrderCalculatedPriceInformationModel);
        }
        <display-entry asp-for="OrderModel.Description" />

        <label>Inställelsesätt</label>
        <display-entry asp-for="OrderModel.RankedInterpreterLocationFirstAddressModel.CompactInformation" />
        @if (Model.OrderModel.RankedInterpreterLocationSecondAddressModel != null)
        {
            <display-entry asp-for="OrderModel.RankedInterpreterLocationSecondAddressModel.CompactInformation" />
        }
        @if (Model.OrderModel.RankedInterpreterLocationThirdAddressModel != null)
        {
            <display-entry asp-for="OrderModel.RankedInterpreterLocationThirdAddressModel.CompactInformation" />
        }
        @if (Model.Status == RequestStatus.AcceptedNewInterpreterAppointed)
        {
            <display-entry asp-for="Interpreter" />
        }
        <form method="post" asp-action="Accept">
            <input asp-for="RequestId" type="hidden" />
            <display-entry asp-for="ExpiresAt" />

            @if (Model.OrderModel.ReplacingOrderId.HasValue && Model.Status != RequestStatus.AcceptedNewInterpreterAppointed)
            {
                <display-entry asp-for="OrderModel.ReplacingOrderNumber" />
                <display-entry asp-for="Interpreter" />
                <display-entry asp-for="OrderModel.SpecificCompetenceLevelRequired" />
                @if (Model.OrderModel.RequestedCompetenceLevels.Count != 0)
                {
                    @if (Model.OrderModel.SpecificCompetenceLevelRequired)
                    {
                        @if (Model.OrderModel.RequiredCompetenceLevelFirst.HasValue)
                        {
                            <display-entry asp-for="OrderModel.RequiredCompetenceLevelFirst" />
                        }
                        @if (Model.OrderModel.RequiredCompetenceLevelSecond.HasValue)
                        {
                            <display-entry asp-for="OrderModel.RequiredCompetenceLevelSecond" />
                        }
                    }
                    else
                    {
                        @if (Model.OrderModel.RequestedCompetenceLevelFirst.HasValue)
                        {
                            <display-entry asp-for="OrderModel.RequestedCompetenceLevelFirst" />
                        }
                        @if (Model.OrderModel.RequestedCompetenceLevelSecond.HasValue)
                        {
                            <display-entry asp-for="OrderModel.RequestedCompetenceLevelSecond" />
                        }
                        @if (Model.OrderModel.RequestedCompetenceLevelThird.HasValue)
                        {
                            <display-entry asp-for="OrderModel.RequestedCompetenceLevelThird" />
                        }
                    }
                }
                else
                {
                    <span>Inga önskemål kring kompetensnivå</span> <br /><br />
                }
            }
            else
            {
                <form-entry asp-for="InterpreterId" type="select" asp-items="SelectListService.GetInterpreters(Model.BrokerId)" />
                <form-entry asp-for="NewInterpreterEmail" class="collapse" id="new-interpreter" />
                @if (Model.OrderModel.SpecificCompetenceLevelRequired)
                {
                    <form-entry asp-for="InterpreterCompetenceLevel" type="select" asp-items="EnumHelper.GetAllDescriptions(Model.OrderModel.RequestedCompetenceLevels).Select(e => new SelectListItem() { Text = e.Description, Value = e.Value.ToString() })" />
                }
                else
                {
                    <form-entry asp-for="InterpreterCompetenceLevel" type="select" asp-items="SelectListService.GetCompetenceLevels(CompetenceAndSpecialistLevel.OtherInterpreter)" />
                }
                @if (Model.InterpreterLocation.HasValue)
                {
                    <input asp-for="InterpreterLocation" type="hidden" />
                    <display-entry asp-for="InterpreterLocation" />
                }
                else
                {
                    <form-entry asp-for="InterpreterLocation" type="select" asp-items="EnumHelper.GetAllDescriptions(Model.OrderModel.RankedInterpreterLocations).Select(e => new SelectListItem() { Text = e.Description, Value = e.Value.ToString() })" />
                }
            }
            <input asp-for="Status" type="hidden" />
            @if ((Model.InterpreterLocation == InterpreterLocation.OffSiteDesignatedLocation || Model.InterpreterLocation == InterpreterLocation.OnSite) && Model.OrderModel.AllowMoreThanTwoHoursTravelTime)
            {
                //This should be visible if a specified  InterpreterLocation is set and not being OffSite.
                <label>Om bedömd restid och/eller resväg överstiger gränsvärdena så fyll i reskostnad nedan, annars lämna 0 i fältet.</label>
                <form-entry asp-for="ExpectedTravelCosts" />
            }
            else if (Model.OrderModel.AllowMoreThanTwoHoursTravelTime)
            {
                // If it is set to Offsite it is not needed at all
                // It should be hidden and possible to show if InterpreterLocation can be selected, and it is set to any other than OffSite
                <div class="collapse" id="set-expected-travel-costs">
                    <label> Om bedömd restid och / eller resväg överstiger gränsvärdena så fyll i reskostnad nedan, annars lämna 0 i fältet.</label>

                    <form-entry asp-for="ExpectedTravelCosts" />

                </div>
            }
            @if (Model.OrderModel.ReplacingOrderId.HasValue && Model.Status != RequestStatus.AcceptedNewInterpreterAppointed)
            {
                @if (Model.RequirementAnswers != null && Model.RequirementAnswers.Any())
                {
                    <label>Extra behov</label><br />
                    @foreach (var req in Model.RequirementAnswers.OrderByDescending(ra => ra.IsRequired))
                    {
                        <span class="list-group-item-heading">@req.Requirement</span>
                        <ul>
                            <li>
                                <span class="requirement-answer">Svar: @req.Answer (@(req.CanMeetRequirement ? "uppfyller" : "uppfyller inte"))</span>
                            </li>
                        </ul>
                    }
                }
            }
            else
            {
                @for (var i = 0; i < Model.RequirementAnswers.Count(); ++i)
                {
                    <input asp-for="RequirementAnswers[i].OrderRequirementId" type="hidden" />
                    <display-entry asp-for="RequirementAnswers[i].Requirement" />
                    <form-entry asp-for="RequirementAnswers[i].Answer" />
                    <input asp-for="RequirementAnswers[i].IsRequired" type="hidden" />
                    <form-entry asp-for="RequirementAnswers[i].CanMeetRequirement" />
                }
            }
            <input asp-for="CombinedMaxSizeAttachments" type="hidden" />
            @await Html.PartialAsync("_FileList", new AttachmentListModel { AllowDelete = true, AllowDownload = true, AllowUpload = true, Files = Model.Files })

            @if (Model.Status == RequestStatus.AcceptedNewInterpreterAppointed)
            {
                <div class="row">
                    <div class="col-xs-4">
                        <button id="Accept" class="btn btn-primary btn-success" data-set-status="Accepted">Byt tolk</button>
                    </div>
                    <div class="col-xs-4">
                        <a class="btn btn-warning do-not-check-dirty" href="@Url.Action("View", new { id = Model.RequestId })">Avbryt</a>
                    </div>
                </div>
            }
            else
            {
                @if (Model.OrderModel.ReplacingOrderId.HasValue)
                {
                    <div class="important-info">Observera att detta uppdrag ersätter tidigare uppdrag @Model.OrderModel.ReplacingOrderNumber som avbokats med mindre än 48 timmar kvar. <br /></div>
                }
                <div class="row">
                    <div class="col-xs-4">
                        <button id="Accept" class="btn btn-primary btn-success" data-set-status="Accepted">Acceptera</button>
                    </div>
                    <div class="col-xs-4">
                        <a class="btn btn-warning do-not-check-dirty" asp-action="List" asp-route-Status="ToBeProcessedByBroker">Avbryt</a>
                    </div>
                    <div class="col-xs-4">
                        <button type="button" data-toggle="modal" data-target="#denyMessageDialog" class="btn btn-danger">Tacka nej</button>
                    </div>
                </div>
            }
        </form>
        <span id="basefile" class="d-none">
            <input asp-for="Files[0].Id" type="hidden" />
        </span>
    </div>
</div>
@Html.Partial("_UploadFileDialog")
<div id="denyMessageDialog" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Tacka nej till uppdrag</h4>
            </div>
            <div class="modal-body">
                <form method="post" asp-action="Decline" class="do-not-check-dirty">
                    <input asp-for="RequestId" type="hidden" />
                    <form-entry asp-for="DenyMessage" />
                    <button type="submit" class="btn btn-warning">Skicka</button>
                    <button type="button" class="btn btn-default pull-right do-not-check-dirty" data-dismiss="modal">Avbryt</button>
                </form>
            </div>
            <div class="modal-footer">
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <environment include="Development">
        <script src="~/js/Request/Process.js" asp-append-version="true"></script>
        <script src="~/js/Files.js" asp-append-version="true"></script>
    </environment>
    <environment exclude="Development">
        <script src="~/js/Request/Process.min.js" asp-append-version="true"></script>
        <script src="~/js/Files.min.js" asp-append-version="true"></script>
    </environment>
    @await Html.PartialAsync("_ValidationScriptsPartial")
}
