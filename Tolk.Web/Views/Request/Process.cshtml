@model RequestModel
@inject SelectListService SelectListService
@inject HelpLinkService HelpLinkService
@inject IOptions<Tolk.BusinessLogic.Helpers.TolkOptions> TolkOptions
@using Microsoft.Extensions.Options;
@using Tolk.Web.Services
@using Tolk.BusinessLogic.Utilities
@using Tolk.BusinessLogic.Enums
@{
    ViewData["Title"] = "Svara på bokningsförfrågan";
    var declineHeader = "Tacka nej till bokning";
    HelpLinkService.PageName = "formedling-besvara-bokningsforfragan";
    var headerHelpLink = HelpLinkService.PageName;
}
<section aria-label="@ViewData["Title"]">
    <div class="row">
        <div class="col-sm-12">

            @await Html.PartialAsync("_OrderHeader", Model.OrderViewModel)
            @await Html.PartialAsync("_OrderSummary", Model.OrderViewModel, new ViewDataDictionary(ViewData) { { "isCollapsible", false }, { "header", ViewData["title"] }, { "helplink", headerHelpLink } })
            <div class="row">
                <div class="col-sm-4">
                    @if (Model.OrderCalculatedPriceInformationModel != null)
                    {
                        await Html.RenderPartialAsync("_PriceInformationDisplay", Model.OrderCalculatedPriceInformationModel);
                    }
                </div>
                <div class="col-sm-4">
                    @if (Model.AllowAccept)
                    {
                        <div class="red-border-left">
                            <display-entry asp-for="LastAcceptAt" />
                        </div>
                    }
                </div>
                <div class="col-sm-4">
                    <div class="red-border-left">
                        <display-entry asp-for="ExpiresAt" />
                    </div>
                </div>
            </div>
            @if (Model.AllowProcessing)
            {
                <form method="post" asp-action="Answer">
                    <input asp-for="RequestId" type="hidden" />
                    <input asp-for="OrderId" type="hidden" />
                    @if (Model.AllowAccept)
                    {
                        <div class="row">
                            <div class="col-sm-4">
                                <form-entry asp-for="FullAnswer" />
                            </div>
                            <div class="col-sm-4">
                                <div class="required-on-accept-panel">
                                    <form-entry asp-for="InterpreterLocationOnAccept" type="select" asp-items="EnumHelper.GetAllDescriptions(Model.OrderViewModel.RankedInterpreterLocations).Select(e => new SelectListItem() { Text = e.Description, Value = e.Value.ToString() })" help-link="@HelpLinkService.GenerateUrl("installelsesatt")" />
                                </div>
                            </div>
                            <div class="col-sm-4">
                                @if (Model.OrderViewModel.SpecificCompetenceLevelRequired)
                                {
                                    <div class="required-on-accept-panel">
                                        <form-entry asp-for="InterpreterCompetenceLevelOnAccept" type="select" asp-items="EnumHelper.GetAllDescriptions(Model.OrderViewModel.RequestedCompetenceLevels).OrderByDescending(e => (int)e.Value).Select(e => new SelectListItem() { Text = e.Description, Value = e.Value.ToString() })" help-link="@HelpLinkService.GenerateUrl("tolkens-kompetensniva")" />
                                    </div>
                                }
                            </div>
                        </div>
                    }
                    else
                    {
                        <input asp-for="FullAnswer" type="hidden" />
                    }
                    <span class="full-answer-panel">
                        <div class="row">
                            <div class="col-sm-4 interpreter-panel">
                                <form-entry asp-for="InterpreterId" type="select" asp-items="SelectListService.GetInterpreters(Model.BrokerId, interpreterToBeReplacedId: Model.OldInterpreterId, otherInterpreterId: Model.OtherInterpreterId).ToList()" help-link="@HelpLinkService.GenerateUrl("tolk")" />
                                <div class="collapse" id="new-interpreter">
                                    <form-entry asp-for="NewInterpreterFirstName" />
                                    <form-entry asp-for="NewInterpreterLastName" />
                                    <form-entry asp-for="NewInterpreterOfficialInterpreterId" />
                                    <form-entry asp-for="NewInterpreterEmail" />
                                    <form-entry asp-for="NewInterpreterPhoneNumber" />
                                </div>
                                <div class="interpreter-information d-none">
                                    <span class="glyphicon message-icon glyphicon-ok"></span>
                                    <span class="info-message"></span>
                                    <span title="" class="form-entry-information glyphicon glyphicon-info-sign d-none"
                                      data-original-title="Efter kontroll mot Kammarkollegiets publicerade tolkregister att tilldelad tolk uppfyller kravställd kompetensnivå har ingen verifiering kunnat ske. Det kan bero på att tolkens auktorisation inte längre är giltig eller ännu inte publicerats. Det kan också bero på att tolken valt att inte synas i det officiellt publicerade tolkregistret."></span>
                                </div>
                            </div>
                            <div class="col-sm-4">
                                @if (Model.OrderViewModel.SpecificCompetenceLevelRequired)
                                {
                                    <form-entry asp-for="InterpreterCompetenceLevel" type="select" asp-items="EnumHelper.GetAllDescriptions(Model.OrderViewModel.RequestedCompetenceLevels).OrderByDescending(e => (int)e.Value).Select(e => new SelectListItem() { Text = e.Description, Value = e.Value.ToString() })" help-link="@HelpLinkService.GenerateUrl("tolkens-kompetensniva")" />
                                }
                                else
                                {
                                    <form-entry asp-for="InterpreterCompetenceLevel" type="select" asp-items="SelectListService.CompetenceLevels" help-link="@HelpLinkService.GenerateUrl("tolkens-kompetensniva")" />
                                }
                            </div>
                            <div class="col-sm-4">
                                <form-entry asp-for="InterpreterLocation" type="select" asp-items="EnumHelper.GetAllDescriptions(Model.OrderViewModel.RankedInterpreterLocations).Select(e => new SelectListItem() { Text = e.Description, Value = e.Value.ToString() })" help-link="@HelpLinkService.GenerateUrl("installelsesatt")" />
                            </div>
                        </div>
                        @if (Model.OrderViewModel.AllowSettingTravelCosts)
                        {
                            <div class="collapse" id="set-expected-travel-costs">
                                <div class="row">
                                    <div class="col-sm-4 important-info">Kunden accepterar överskridande av gränsvärde för resor för detta uppdrag, dvs över 2 tim restid eller 100 km reslängd. Ange bedömd resekostnad. Ange 0 om uppdraget inte innebär resor.</div>
                                    <div class="col-sm-4">
                                        <form-entry asp-for="ExpectedTravelCosts" help-link="@HelpLinkService.GenerateUrl("forvantad-resekostnad")" />
                                    </div>
                                    <div class="col-sm-4">
                                        <form-entry asp-for="ExpectedTravelCostInfo" />
                                    </div>
                                </div>
                                @if (TolkOptions.Value.EnableSetLatestAnswerTimeForCustomer)
                                {
                                    <div class="row">
                                        <div class="col-sm-4">
                                            <form-entry asp-for="SetLatestAnswerTimeForCustomer" layout-option="row" asp-items="SelectListService.BoolList" />
                                            <div id="SetLatestAnswerTimeForCustomerValidator" class="d-none text-danger body">Ange om du vill sätta sista svarstid eller inte</div>
                                        </div>
                                        <div class="col-sm-8 d-none" id="latestAnswerTimeForCustomer">
                                            <input asp-for="OrderViewModel.StartAt" type="hidden" />
                                            <form-entry asp-for="LatestAnswerTimeForCustomer" />
                                            <div id="LatestAnswerTimeForCustomerValidator" class="d-none text-danger body"></div>
                                            <br /><br />
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    </span>
                    <div class="row">
                        <div class="col-sm-4">
                            <label>Tillkommande krav</label> @HelpLinkService.Anchor("tillkommande-krav")<br />
                            @if (Model.RequiredRequirementAnswers.Any())
                            {
                                @for (var i = 0; i < Model.RequiredRequirementAnswers.Count(); ++i)
                                {
                                    <div class="border detail-text">
                                        <span class="detail-text">@Model.RequiredRequirementAnswers[i].RequirementType.GetDescription(): @Model.RequiredRequirementAnswers[i].Description</span>
                                        <input asp-for="RequiredRequirementAnswers[i].OrderRequirementId" type="hidden" />
                                        <form-entry asp-for="RequiredRequirementAnswers[i].CanMeetRequirement" label-override="Kan uppfylla kravet" />
                                        <input asp-for="RequiredRequirementAnswers[i].IsRequired" type="hidden" />
                                    </div>
                                }
                            }
                            else
                            {
                                <span class="no-value-info">Inga tillkommande krav är angivna</span>
                            }
                        </div>
                        <div class="col-sm-4">
                            <label>Tillkommande önskemål</label> @HelpLinkService.Anchor("tillkommande-onskemal")<br />
                            @if (Model.DesiredRequirementAnswers.Any())
                            {
                                @for (var i = 0; i < Model.DesiredRequirementAnswers.Count(); ++i)
                                {
                                    <div class="border">
                                        <span class="detail-text">@Model.DesiredRequirementAnswers[i].RequirementType.GetDescription(): @Model.DesiredRequirementAnswers[i].Description</span>
                                        <input asp-for="DesiredRequirementAnswers[i].OrderRequirementId" type="hidden" />
                                        <form-entry asp-for="DesiredRequirementAnswers[i].CanMeetRequirement" label-override="Kan uppfylla önskemålet" />
                                        <form-entry asp-for="DesiredRequirementAnswers[i].Answer" />
                                        <input asp-for="DesiredRequirementAnswers[i].IsRequired" type="hidden" />
                                    </div>

                                }
                            }
                            else
                            {
                                <span class="no-value-info">Inga tillkommande önskemål är angivna</span>
                            }
                        </div>
                        <div class="col-sm-4">
                            <input asp-for="CombinedMaxSizeAttachments" type="hidden" />
                            @await Html.PartialAsync("_FileList", new AttachmentListModel { AllowDelete = true, AllowDownload = true, AllowUpload = true, Files = Model.Files, Description = "Möjlighet att bifoga filer som kan vara relevanta för myndigheten", Title = string.Empty }, new ViewDataDictionary(ViewData) { { "helplink", HelpLinkService.PageName } })
                            <br />
                            <br />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-4">
                            <form-entry asp-for="BrokerReferenceNumber" />
                        </div>
                    </div>

                    @await Html.PartialAsync("_CustomerOrganizationInfo", Model.OrderViewModel)
                    <div class="row">
                        <div class="col-lg-4">
                            <a class="btn btn-large btn-warning do-not-check-dirty left-lg-button" id="cancel-go-back">Avbryt <span class="btn-remove-times">&times;</span></a>
                        </div>
                        <div class="col-lg-4 center-lg-button">
                            <button type="button" data-toggle="modal" data-target="#denyMessageDialog" class="btn btn-large btn-danger">Tacka nej till bokning</button>
                        </div>
                        <div class="col-lg-4">
                            @if (Model.AllowAccept)
                            {
                                <button id="Accept" class="btn btn-large btn-success right-lg-button disable-at-required">Bekräfta <span class="center-glyphicon glyphicon glyphicon-ok"></span></button>
                            }
                            <button id="Answer" class="btn btn-large btn-success right-lg-button d-none disable-at-required">Acceptera <span class="center-glyphicon glyphicon glyphicon-ok"></span></button>
                        </div>
                    </div>
                </form>
            }
            else
            {
                <div class="row">
                    <div class="col-lg-12 to-accept-info">
                        Denna förfrågan tillhör en sammanhållen bokning och måste besvaras i sin helhet i vyn för den sammanhållna bokningsförfrågan. Gå till sammanhållen bokningsförfrågan: <a asp-controller="RequestGroup" asp-action="Process" asp-route-id="@Model.RequestGroupId">@Model.OrderViewModel.OrderGroupNumber</a>
                    </div>
                </div>
                @await Html.PartialAsync("_CustomerOrganizationInfo", Model.OrderViewModel)
            }
            <span id="basefile" class="d-none">
                <input asp-for="Files[0].Id" type="hidden" />
            </span>
        </div>
        @if (Model.AllowProcessing)
        {
            @await Html.PartialAsync("_UploadFileDialog")
            <div id="denyMessageDialog" class="modal fade" role="dialog">
                <div class="modal-dialog">
                    <!-- Modal content-->
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal">&times;</button>
                            <h2 class="modal-title">@declineHeader</h2>
                        </div>
                        <div class="modal-body">
                            <form method="post" asp-action="Decline" class="do-not-check-dirty">
                                <input id="DeniedRequestId" name="DeniedRequestId" value="@Model.RequestId" type="hidden" />
                                <form-entry asp-for="DenyMessage" />
                                @if (Model.OrderViewModel.ReplacingOrderId.HasValue)
                                {
                                    <div class="text-danger">
                                        Ersättningsuppdrag kan bara avböjas om det finns sakliga skäl
                                        <br /><br />
                                    </div>
                                }
                                <button type="submit" class="btn btn-default right-md-button do-not-check-dirty">Tacka nej</button>
                                <button type="button" class="btn btn-warning left-md-button do-not-check-dirty" data-dismiss="modal">Avbryt</button>
                                <br /><br />
                            </form>
                        </div>
                        <div class="modal-footer">
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</section>
@section Scripts {
    <environment include="Development">
        <script src="~/js/Request/ValidateInterpreter.js" asp-append-version="true"></script>
        <script src="~/js/Request/Process.js" asp-append-version="true"></script>
        <script src="~/js/RequestView.js" asp-append-version="true"></script>
        <script src="~/js/Files.js" asp-append-version="true"></script>
    </environment>
    <environment exclude="Development">
        <script src="~/js/Request/ValidateInterpreter.min.js" asp-append-version="true"></script>
        <script src="~/js/Request/Process.min.js" asp-append-version="true"></script>
        <script src="~/js/RequestView.min.js" asp-append-version="true"></script>
        <script src="~/js/Files.min.js" asp-append-version="true"></script>
    </environment>
    @await Html.PartialAsync("_ValidationScriptsPartial")
}
