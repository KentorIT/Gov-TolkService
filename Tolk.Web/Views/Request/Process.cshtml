@model Tolk.Web.Models.RequestModel
@inject SelectListService SelectListService
@using Tolk.Web.Services
@using Tolk.BusinessLogic.Utilities
@using Tolk.BusinessLogic.Enums
@{
    ViewData["Title"] = "Svara på avrop";
}

<div class="row">
    <div class="col-md-8">
        <h2>@ViewData["Title"]</h2>
        <display-entry asp-for="OrderModel.OrderNumber" />
        <display-entry asp-for="OrderModel.CreatedAt" />
        <display-entry asp-for="OrderModel.CreatedBy" />
        <display-entry asp-for="OrderModel.ContactPerson" />
        <display-entry asp-for="OrderModel.RegionName" />
        <display-entry asp-for="OrderModel.LanguageName" />
        <display-entry asp-for="OrderModel.CustomerReferenceNumber" />
        <display-entry asp-for="OrderModel.AssignmentType" />
        <display-entry asp-for="OrderModel.RequiredCompetenceLevel" />
        <display-entry asp-for="OrderModel.StartAt" />
        <display-entry asp-for="OrderModel.EndAt" />
        <display-entry asp-for="OrderModel.Description" />
        @if (Model.OrderModel.UseAddress)
        {
            <display-entry asp-for="OrderModel.UnitName" />
            <display-entry asp-for="OrderModel.LocationStreet" />
            <display-entry asp-for="OrderModel.LocationZipCode" />
            <display-entry asp-for="OrderModel.LocationCity" />
            <display-entry asp-for="OrderModel.AllowMoreThanTwoHoursTravelTime" />
        }
        @if (Model.OrderModel.UseOffSiteInformation)
        {
            <display-entry asp-for="OrderModel.OffSiteAssignmentType" />
            <display-entry asp-for="OrderModel.OffSiteContactInformation" />
        }
        <form method="post" asp-action="Accept">
            <input asp-for="RequestId" type="hidden" />
            <display-entry asp-for="ExpiresAt" />
            <form-entry asp-for="InterpreterId" type="select" asp-items="SelectListService.GetInterpreters(Model.BrokerId)" />
            <form-entry asp-for="NewInterpreterEmail" class="collapse" id="new-interpreter" />
            @if (Model.InterpreterLocation.HasValue)
            {
                <input asp-for="InterpreterLocation" type="hidden" />
                <display-entry asp-for="InterpreterLocation" />
            }
            else
            {
                <label>Önskat inställelsesätt, helst överst</label>
                <ul>
                    @foreach (var location in Model.OrderModel.InterpreterLocations.OrderBy(l => l.Rank))
                    {
                        <li>
                            @EnumHelper.GetDescription(location.InterpreterLocation)
                        </li>
                    }
                </ul>
                <form-entry asp-for="InterpreterLocation" type="select" asp-items="SelectListService.InterpreterLocations" />
            }
            @if (Model.InterpreterLocation == InterpreterLocation.OffSiteDesignatedLocation || Model.InterpreterLocation == InterpreterLocation.OnSite)
            {
                //This should be visible if a specified  InterpreterLocation is set and not being OffSite.
                <form-entry asp-for="ExpectedTravelCosts" />
            }
            else
            {
                // If it is set to Offsite it is not needed at all
                // It should be hidden and possible to show if InterpreterLocation can be selected, and it is set to any other than OffSite
                <form-entry asp-for="ExpectedTravelCosts" class="collapse" id="set-expected-travel-costs" />
            }
            <form-entry asp-for="CompetenceLevel" type="select" asp-items="SelectListService.GetCompetenceLevels(Model.OrderModel.RequiredCompetenceLevel)" />
            @for (var i = 0; i < Model.RequirementAnswers.Count(); ++i)
            {
                <input asp-for="RequirementAnswers[i].OrderRequirementId" type="hidden" />
                <display-entry asp-for="RequirementAnswers[i].Requirement" />
                <form-entry asp-for="RequirementAnswers[i].Answer" />
                <form-entry asp-for="RequirementAnswers[i].CanMeetRequirement" />
            }
            <button class="btn btn-primary" data-set-status="Accepted">Acceptera</button>
            <button type="button" data-toggle="modal" data-target="#denyMessageDialog" class="btn btn-warning pull-right">Tacka nej</button>
        </form>
    </div>
</div>
<div id="denyMessageDialog" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Tacka nej till uppdrag</h4>
            </div>
            <div class="modal-body">
                <form method="post" asp-action="Decline">
                    <input asp-for="RequestId" type="hidden" />
                    <form-entry asp-for="DenyMessage" />
                    <button type="submit" class="btn btn-warning">Skicka</button>
                    <button type="button" class="btn btn-default pull-right" data-dismiss="modal">Avbryt</button>
                </form>
            </div>
            <div class="modal-footer">
            </div>
        </div>

    </div>
</div>

@section Scripts {
    <environment include="Development">
        <script src="~/js/Request/Process.js" asp-append-version="true"></script>
    </environment>
    <environment exclude="Development">
        <script src="~/js/Request/Process.min.js" asp-append-version="true"></script>
    </environment>
    @await Html.PartialAsync("_ValidationScriptsPartial")
}
