@model Tolk.Web.Models.RequestModel
@using Tolk.BusinessLogic.Enums
@{
    ViewData["Title"] = "Avropsförfrågan";
}

<div class="row">
    <div class="col-md-8">
        <h2>@ViewData["Title"]</h2>
        <display-entry asp-for="OrderModel.OrderNumber" />
        <display-entry asp-for="Status" />
        @if (!string.IsNullOrWhiteSpace(Model.DenyMessage))
        {
            <display-entry asp-for="DenyMessage" />
        }
        @if (!string.IsNullOrWhiteSpace(Model.CancelMessage))
        {
            <display-entry asp-for="CancelMessage" />
        }
        <display-entry asp-for="OrderModel.CreatedAt" />
        <display-entry asp-for="OrderModel.CreatedBy" />
        <display-entry asp-for="OrderModel.ContactPerson" />
        <display-entry asp-for="OrderModel.UnitName" />
        <display-entry asp-for="OrderModel.RegionName" />
        <display-entry asp-for="OrderModel.LanguageName" />
        <display-entry asp-for="OrderModel.CustomerReferenceNumber" />
        <display-entry asp-for="OrderModel.AssignmentType" />
        <display-entry asp-for="OrderModel.SpecificCompetenceLevelRequired" />
        @if (Model.OrderModel.SpecificCompetenceLevelRequired)
        {
            @if (Model.OrderModel.RequiredCompetenceLevelFirst.HasValue)
            {
                <display-entry asp-for="OrderModel.RequiredCompetenceLevelFirst" label-override="Kravad kompetensnivå" />
            }
            @if (Model.OrderModel.RequiredCompetenceLevelSecond.HasValue)
            {
                <display-entry asp-for="OrderModel.RequiredCompetenceLevelSecond" label-override="Kravad alternativ kompetensnivå" />
            }
        }
        else
        {
            @if (Model.OrderModel.RequestedCompetenceLevelFirst.HasValue)
            {
                <display-entry asp-for="OrderModel.RequestedCompetenceLevelFirst" label-override="Önskad kompetensnivå (förstahand)" />
            }
            @if (Model.OrderModel.RequestedCompetenceLevelSecond.HasValue)
            {
                <display-entry asp-for="OrderModel.RequestedCompetenceLevelSecond" label-override="Önskad kompetensnivå (andrahand)" />
            }
            @if (Model.OrderModel.RequestedCompetenceLevelThird.HasValue)
            {
                <display-entry asp-for="OrderModel.RequestedCompetenceLevelThird" label-override="Önskad kompetensnivå (tredjehand)" />
            }
        }
        <display-entry asp-for="OrderModel.TimeRange" />
        <display-entry asp-for="CalculatedPrice" />
        <display-entry asp-for="OrderModel.Description" />

        @if (Model.OrderModel.UseAddress)
        {
            <display-entry asp-for="OrderModel.LocationStreet" />
            <display-entry asp-for="OrderModel.LocationZipCode" />
            <display-entry asp-for="OrderModel.LocationCity" />
            <display-entry asp-for="OrderModel.AllowMoreThanTwoHoursTravelTime" />
        }
        @if (Model.OrderModel.UseOffSiteInformation)
        {
            <display-entry asp-for="OrderModel.OffSiteAssignmentType" />
            <display-entry asp-for="OrderModel.OffSiteContactInformation" />
        }

        <display-entry asp-for="Interpreter" />
        <display-entry asp-for="InterpreterCompetenceLevel" />
        @if (Model.InterpreterLocationAnswer != null && Model.InterpreterLocation == null)
        {
            <display-entry asp-for="InterpreterLocationAnswer" />
        }
        else
        {
            <display-entry asp-for="InterpreterLocation" />
        }
        @if ((Model.InterpreterLocation == InterpreterLocation.OffSiteDesignatedLocation || Model.InterpreterLocation == InterpreterLocation.OnSite) && Model.OrderModel.AllowMoreThanTwoHoursTravelTime)
        {
            //This should be visible if a specified  InterpreterLocation is set and not being OffSite, and allow more than 2 h travel time is set
            <display-entry asp-for="ExpectedTravelCosts" />
        }

        @if (Model.RequirementAnswers != null && Model.RequirementAnswers.Any())
        {
            <label>Extra behov</label><br />
            @foreach (var req in Model.RequirementAnswers.OrderByDescending(ra => ra.IsRequired))
            {
                <span class="list-group-item-heading">@req.Requirement</span>
                <ul>
                    <li>
                        <span class="requirement-answer">Svar: @req.Answer (@(req.CanMeetRequirement ? "uppfyller" : "uppfyller inte"))</span>
                    </li>
                </ul>
            }
        }
        @if (Model.ComplaintId.HasValue)
        {
            <display-entry asp-for="ComplaintStatus" />
            <display-entry asp-for="ComplaintType" />
            <display-entry asp-for="ComplaintMessage" />
            <a href="@Url.Action("View", "Complaint", new { id = Model.ComplaintId })">Visa reklamation</a>
            <br />
        }
        @if (Model.RequisitionId.HasValue)
        {
            <a href="@Url.Action("View", "Requisition", new { id = Model.RequisitionId })">Visa rekvisition</a>
            <br />

        }
        @if (Model.AllowInterpreterChange)
        {
            <a href="@Url.Action("Change", "Request", new { id = Model.RequestId })">Byt tolk för uppdraget</a>
        }
        @if (Model.AllowCancellation)
        {
            <div class="row">
                <div class="col-md-8">
                    <form method="post" class="cancel-form" asp-action="Cancel">
                        <input asp-for="RequestId" type="hidden" />
                        <input name="CancelMessage" type="hidden" />
                        <button class="btn cancel-button btn-warning pull-right">Avboka uppdrag</button>
                    </form>
                </div>
            </div>
        }
        <div id="cancelMessageDialog" class="modal fade" role="dialog">
            <div class="modal-dialog">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title">Meddelande vid avbokning</h4>
                        <h6>Du måste ange en orsak till avbokningen. Observera att avbokning, beroende på omständighet, kan vara förknippad med vite.</h6>
                    </div>
                    <div class="modal-body">
                        <form class="do-not-check-dirty">
                            <form-entry asp-for="CancelMessage" />
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn" data-dismiss="modal">Avbryt</button>
                        <button type="button" class="btn btn-default send-message">Skicka</button>
                    </div>
                </div>
            </div>
        </div>
        @if (Model.Status == RequestStatus.CancelledByCreatorWhenApproved)
        {
            @if (!string.IsNullOrWhiteSpace(Model.CancelMessage))
            {
                <display-entry asp-for="CancelMessage" />
            }
            <form method="post" asp-action="ConfirmCancellation">
                <input asp-for="RequestId" type="hidden" />
                <button class="btn btn-danger pull-right">Bekräfta avbokning</button>
            </form>
        }
    </div>
</div>
@section Scripts {
    <environment include="Development">
        <script src="~/js/Request/Process.js" asp-append-version="true"></script>
    </environment>
    <environment exclude="Development">
        <script src="~/js/Request/Process.min.js" asp-append-version="true"></script>
    </environment>
    @await Html.PartialAsync("_ValidationScriptsPartial")
}

