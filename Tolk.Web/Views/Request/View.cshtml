@model Tolk.Web.Models.RequestModel
@using Tolk.BusinessLogic.Enums
@{
    ViewData["Title"] = "Bokningsförfrågan";
}

<div class="row">
    <div class="col-sm-12">
        @await Html.PartialAsync("_OrderHeader", Model.OrderModel, new ViewDataDictionary(ViewData) { { "header", ViewData["Title"] } })

        @if (Model.Status == RequestStatus.CancelledByCreatorWhenApproved)
        {
            @if (!string.IsNullOrWhiteSpace(Model.CancelMessage))
            {
                <display-entry asp-for="CancelMessage" />
            }
            @if (!string.IsNullOrWhiteSpace(Model.Info48HCancelledByCustomer))
            {
                <div class="important-info">@Model.Info48HCancelledByCustomer</div>
            }
            <form method="post" asp-action="ConfirmCancellation">
                <input asp-for="RequestId" type="hidden" />
                <button class="btn btn-default btn-success btn-large pull-right">Bekräfta avbokning <span class="center-glyphicon glyphicon glyphicon-ok"></span></button>
            </form>
            <br /><br />
        }
        @if (Model.Status == RequestStatus.DeniedByCreator)
        {
            @if (!string.IsNullOrWhiteSpace(Model.DenyMessage))
            {
                <display-entry asp-for="DenyMessage" />
            }
            @if (Model.AllowConfirmationDenial)
            {
                <form method="post" asp-action="ConfirmDenial">
                    <input asp-for="RequestId" type="hidden" />
                    <button class="btn btn-default btn-success btn-large pull-right">Bekräfta avböjande <span class="center-glyphicon glyphicon glyphicon-ok"></span></button>
                </form>
                <br /><br />
            }
        }
        @await Html.PartialAsync("_RequestSummary", Model)
        <div class="row">
            @if (Model.RequestCalculatedPriceInformationModel != null)
            {
                <div class="col-sm-6">
                    @await Html.PartialAsync("_PriceInformationDisplay", Model.RequestCalculatedPriceInformationModel)
                </div>
            }
            @if (Model.OrderCalculatedPriceInformationModel != null)
            {
                <div class="col-sm-6">
                    @await Html.PartialAsync("_PriceInformationDisplay", Model.OrderCalculatedPriceInformationModel)
                </div>
            }
        </div>
        @await Html.PartialAsync("_OrderSummary", Model.OrderModel)
        @await Html.PartialAsync("_CustomerOrganizationInfo", Model.OrderModel)
        @if (!string.IsNullOrWhiteSpace(Model.Info48HCancelledByCustomer) && Model.Status == RequestStatus.CancelledByCreatorConfirmed)
        {
            <div class="important-info">@Model.Info48HCancelledByCustomer</div>
        }

        @if ((Model.InterpreterLocation == InterpreterLocation.OffSiteDesignatedLocation || Model.InterpreterLocation == InterpreterLocation.OnSite) && Model.OrderModel.AllowMoreThanTwoHoursTravelTime)
        {
            //This should be visible if a specified  InterpreterLocation is set and not being OffSite, and allow more than 2 h travel time is set
            <display-entry asp-for="ExpectedTravelCosts" />
        }

        <div class="row">
            @if (Model.ComplaintId.HasValue)
            {
                <div class="col-sm-12">
                    @await Html.PartialAsync("_ComplaintSummary", Model)
                </div>
            }
            @if (Model.AllowCancellation)
            {
                <div class="col-sm-4">
                    <form method="post" class="cancel-form" asp-action="Cancel">
                        <input asp-for="RequestId" type="hidden" />
                        <input name="CancelMessage" type="hidden" />
                        <button class="btn cancel-button btn-warning">Avboka uppdrag</button>
                    </form>
                </div>
            }
            @if (Model.AllowInterpreterChange)
            {
                <div class="col-sm-4">
                    <a class="btn btn-danger btn-large" href="@Url.Action("Change", "Request", new { id = Model.RequestId })">Byt tolk för uppdraget</a>
                </div>
            }
        </div>
        <div id="cancelMessageDialog" class="modal fade" role="dialog">
            <div class="modal-dialog">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title">Meddelande vid avbokning</h4>
                        <h6>Du måste ange en orsak till avbokningen. Observera att avbokning, beroende på omständighet, kan vara förknippad med vite.</h6>
                    </div>
                    <div class="modal-body">
                        <form class="do-not-check-dirty">
                            <form-entry asp-for="CancelMessage" />
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-warning do-not-check-dirty pull-left" data-dismiss="modal">Avbryt</button>
                        <button type="button" class="btn btn-default send-message pull-right">Skicka</button>
                    </div>
                </div>
            </div>
        </div>

        @await Html.PartialAsync("_EventLog", Model.EventLog, new ViewDataDictionary(ViewData) { { "header", "Förfråganhändelser" } })
    </div>
</div>
@section Scripts {
    <environment include="Development">
        <script src="~/js/Request/Process.js" asp-append-version="true"></script>
        <script src="~/js/Files.js" asp-append-version="true"></script>
    </environment>
    <environment exclude="Development">
        <script src="~/js/Request/Process.min.js" asp-append-version="true"></script>
        <script src="~/js/Files.min.js" asp-append-version="true"></script>
    </environment>
    @await Html.PartialAsync("_ValidationScriptsPartial")
}

