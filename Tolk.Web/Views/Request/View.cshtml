@model Tolk.Web.Models.RequestModel
@using Tolk.BusinessLogic.Enums
@{
    ViewData["Title"] = "Avropsförfrågan";
}

<div class="row">
    <div class="col-md-8">
        <h2>@ViewData["Title"]</h2>
        <display-entry asp-for="OrderModel.OrderNumber" />
        <display-entry asp-for="Status" />
        @if (!string.IsNullOrWhiteSpace(Model.DenyMessage))
        {
            <display-entry asp-for="DenyMessage" />
        }
        <display-entry asp-for="OrderModel.CreatedAt" />
        <display-entry asp-for="OrderModel.CreatedBy" />
        <display-entry asp-for="OrderModel.ContactPerson" />
        <display-entry asp-for="OrderModel.UnitName" />
        <display-entry asp-for="OrderModel.RegionName" />
        <display-entry asp-for="OrderModel.LanguageName" />
        <display-entry asp-for="OrderModel.CustomerReferenceNumber" />
        <display-entry asp-for="OrderModel.AssignmentType" />
        <display-entry asp-for="OrderModel.RequiredCompetenceLevel" />
        <display-entry asp-for="OrderModel.StartAt" />
        <display-entry asp-for="OrderModel.EndAt" />
        <display-entry asp-for="CalculatedPrice" />
        <display-entry asp-for="OrderModel.Description" />

        @if (Model.OrderModel.UseAddress)
        {
            <display-entry asp-for="OrderModel.LocationStreet" />
            <display-entry asp-for="OrderModel.LocationZipCode" />
            <display-entry asp-for="OrderModel.LocationCity" />
            <display-entry asp-for="OrderModel.AllowMoreThanTwoHoursTravelTime" />
        }
        @if (Model.OrderModel.UseOffSiteInformation)
        {
            <display-entry asp-for="OrderModel.OffSiteAssignmentType" />
            <display-entry asp-for="OrderModel.OffSiteContactInformation" />
        }

        <display-entry asp-for="Interpreter" />
        <display-entry asp-for="CompetenceLevel" />
        <display-entry asp-for="InterpreterLocation" />
        @if ((Model.InterpreterLocation == InterpreterLocation.OffSiteDesignatedLocation || Model.InterpreterLocation == InterpreterLocation.OnSite) && Model.OrderModel.AllowMoreThanTwoHoursTravelTime)
        {
            //This should be visible if a specified  InterpreterLocation is set and not being OffSite, and allow more than 2 h travel time is set
            <display-entry asp-for="ExpectedTravelCosts" />
        }

        @if (Model.RequirementAnswers != null && Model.RequirementAnswers.Any())
        {
            <label>Extra behov</label><br />
            @foreach (var req in Model.RequirementAnswers.OrderByDescending(ra => ra.IsRequired))
            {
                <span class="list-group-item-heading">@req.Requirement</span>
                <ul>
                    <li>
                        <span class="requirement-answer">Svar: @req.Answer (@(req.CanMeetRequirement ? "uppfyller" : "uppfyller inte"))</span>
                    </li>
                </ul>
            }
        }
        @if (Model.RequisitionId.HasValue)
        {
            <a href="@Url.Action("View", "Requisition", new { id = Model.RequisitionId })">Visa rekvisition</a>
        }
    </div>
</div>
