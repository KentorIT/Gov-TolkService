@model Tolk.Web.Models.RequisitionViewModel
@{
    ViewData["Title"] = "Rekvisition";
}
<div class="row">
    <div class="col-md-8">
        <h2>@ViewData["Title"]</h2>
        <display-entry asp-for="OrderNumber" />
        <display-entry asp-for="CustomerOrganizationName" />
        @if (!string.IsNullOrWhiteSpace(Model.CustomerReferenceNumber))
        {
            <display-entry asp-for="CustomerReferenceNumber" />
        }
        <display-entry asp-for="OrderCreatedBy" />
        <display-entry asp-for="CreatedAt" />
        <display-entry asp-for="AssignmentType" />
        @if (!string.IsNullOrWhiteSpace(Model.Description))
        {
            <display-entry asp-for="Description" />
        }
        <display-entry asp-for="UnitName" />
        @if (Model.InterpreterLocation == Tolk.BusinessLogic.Enums.InterpreterLocation.OffSite)
        {
            <display-entry asp-for="OffSiteAssignmentType" />
            <display-entry asp-for="OffSiteContactInformation" />
        }
        else
        {
            <display-entry asp-for="Address" />
        }
        <display-entry asp-for="RegionName" />
        <display-entry asp-for="LanguageName" />
        <display-entry asp-for="SpecificCompetenceLevelRequired" />
        @if (Model.SpecificCompetenceLevelRequired)
        {
            @if (Model.RequiredCompetenceLevelFirst.HasValue)
            {
                <display-entry asp-for="RequiredCompetenceLevelFirst" />
            }
            @if (Model.RequiredCompetenceLevelSecond.HasValue)
            {
                <display-entry asp-for="RequiredCompetenceLevelSecond" />
            }
        }
        else
        {
            @if (Model.RequestedCompetenceLevelFirst.HasValue)
            {
                <display-entry asp-for="RequestedCompetenceLevelFirst" />
            }
            @if (Model.RequestedCompetenceLevelSecond.HasValue)
            {
                <display-entry asp-for="RequestedCompetenceLevelSecond" />
            }
            @if (Model.RequestedCompetenceLevelThird.HasValue)
            {
                <display-entry asp-for="RequestedCompetenceLevelThird" />
            }
        }
        <display-entry asp-for="InterpretersCompetenceLevel" />
        <display-entry asp-for="AllowMoreThanTwoHoursTravelTime" />
        <display-entry asp-for="Status" />
        @if (Model.PreviousRequisition != null)
        {
            <a href="@Url.Action("View", "Requisition", new { id = Model.PreviousRequisition.RequisitionId })">Se tidigare rekvisition</a>
        }
        @if (Model.ReplacingRequisitionId.HasValue)
        {
            <a href="@Url.Action("View", "Requisition", new { id = Model.ReplacingRequisitionId })">Se ersättande rekvisition</a>
        }
        @if (Model.Status == Tolk.BusinessLogic.Enums.RequisitionStatus.DeniedByCustomer)
        {
            <display-entry asp-for="DenyMessage" />
        }
        <display-entry asp-for="BrokerName" />
        <display-entry asp-for="InterpreterName" />
        <display-entry asp-for="InterpreterLocation" />
        @if (Model.OffSiteAssignmentType.HasValue)
        {
            <display-entry asp-for="OffSiteAssignmentType" />
        }
        @if (!string.IsNullOrWhiteSpace(Model.OffSiteContactInformation))
        {
            <display-entry asp-for="OffSiteContactInformation" />
        }
        <display-entry asp-for="ExpectedStartedAt" />
        <display-entry asp-for="SessionStartedAt" />
        <display-entry asp-for="ExpectedEndedAt" />
        <display-entry asp-for="SessionEndedAt" />
        <display-entry asp-for="TimeWasteNormalTime" />
        <display-entry asp-for="TimeWasteIWHTime" />
        @if (Model.AllowMoreThanTwoHoursTravelTime)
        {
            <display-entry asp-for="ExpectedTravelCosts" />
        }
        <display-entry asp-for="RequisitionCreatedBy" />
        <display-entry asp-for="TravelCosts" />
        <display-entry asp-for="Message" />
        @if (Model.RequestPriceInformationModel != null)
        {
            Html.RenderPartial("_PriceInformationDisplay", Model.RequestPriceInformationModel);
        }

        @await Html.PartialAsync("_FileList", Model.AttachmentListModel)

        @if (Model.AllowCreation)
        {
            <a href="@Url.Action("Create", "Requisition", new { id = Model.RequestId })">Ersätt rekvisition</a>
        }
        @if (Model.ResultPriceInformationModel != null)
        {
            Html.RenderPartial("_PriceInformationDisplay", Model.ResultPriceInformationModel);
        }
    </div>
</div>
@section Scripts {
    <environment include="Development">
        <script src="~/js/Files.js" asp-append-version="true"></script>
    </environment>
    <environment exclude="Development">
        <script src="~/js/Files.min.js" asp-append-version="true"></script>
    </environment>
}
